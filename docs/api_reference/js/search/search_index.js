var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/ChatAdapter.html",[0,0.181,1,0.878]],["body/interfaces/ChatAdapter.html",[0,0.285,1,1.64,2,1.039,3,0.534,4,0.383,5,0.25,6,2.376,7,0.825,8,2.024,9,2.024,10,3.922,11,1.571,12,3.176,13,2.707,14,2.024,15,2.024,16,2.024,17,3.922,18,2.025,19,3.922,20,1.444,21,2.741,22,2.14,23,2.317,24,2.024,25,2.684,26,3.176,27,3.176,28,0.947,29,1.78,30,1.78,31,3.922,32,2.684,33,0.314,34,1.08,35,2.433,36,2.903,37,2.684,38,1.139,39,2.935,40,1.389,41,2.433,42,3.227,43,4.714,44,4.714,45,4.714,46,3.176,47,3.922,48,3.922,49,1.889,50,3.176,51,3.922,52,1.78,53,3.922,54,3.176,55,1.571,56,1.226,57,1.08,58,0.049,59,0.713,60,0.334,61,0.947,62,1.381,63,2.024,64,1.78,65,1.474,66,0.825,67,0.893,68,2.009,69,1.389,70,2.009,71,0.511,72,2.009,73,2.935,74,3.922,75,3.922,76,3.922,77,4.093,78,1.669,79,2.684,80,2.317,81,3.46,82,1.536,83,3.176,84,3.227,85,3.922,86,3.922,87,3.176,88,3.922,89,3.176,90,3.922,91,2.317,92,0.803,93,2.005,94,1.515,95,0.456,96,1.332,97,2.009,98,0.025,99,0.034,100,0.025]],["title/interfaces/ClassConstructor.html",[0,0.181,101,1.922]],["body/interfaces/ClassConstructor.html",[0,0.241,1,1.167,2,0.965,3,0.496,4,0.487,5,0.232,7,0.574,8,1.407,9,1.407,14,1.407,15,1.926,18,1.704,22,1.694,28,0.901,32,1.866,52,2.077,55,1.093,56,1.167,58,0.05,59,0.832,60,0.451,62,0.853,64,1.238,66,0.574,67,0.773,71,0.682,92,0.871,93,1.238,95,0.8,98,0.023,99,0.032,100,0.023,101,3.131,102,1.866,103,1.506,104,3.021,105,0.4,106,3.279,107,1.547,108,3.279,109,0.853,110,2.727,111,2.727,112,0.853,113,2.727,114,1.093,115,2.727,116,2.727,117,1.611,118,1.866,119,2.554,120,2.208,121,2.208,122,2.029,123,1.611,124,2.208,125,1.611,126,1.866,127,2.727,128,2.185,129,1.866,130,1.866,131,2.208,132,2.205,133,3.021,134,2.208,135,2.208,136,2.205,137,1.611,138,1.407,139,2.208,140,2.208,141,0.496,142,0.574,143,1.611,144,3.021,145,1.238,146,2.208,147,2.208,148,2.912,149,1.866,150,2.208,151,1.704,152,3.131,153,1.866,154,3.021,155,2.208,156,2.208,157,0.751,158,1.611,159,1.833,160,2.208,161,2.208,162,2.208,163,3.021,164,1.694,165,2.912,166,2.208,167,2.208,168,1.407,169,2.554,170,2.912,171,1.866,172,3.021,173,1.611,174,1.407,175,1.866,176,1.866,177,1.866,178,2.912,179,1.866,180,1.093,181,0.965,182,1.866,183,2.727,184,3.386,185,2.208,186,1.866,187,2.208,188,1.866,189,1.238,190,1.866,191,1.238,192,2.208,193,2.554,194,2.208,195,1.611,196,1.43,197,1.866,198,2.727,199,2.208,200,1.866,201,1.407,202,2.208,203,0.853,204,1.611,205,2.208,206,1.407,207,1.926,208,0.853,209,1.866,210,2.208,211,1.866,212,1.407,213,2.205,214,1.866,215,1.866,216,2.205,217,2.205,218,2.208,219,2.205,220,1.407,221,1.611,222,1.611,223,1.611,224,1.407,225,1.407]],["title/classes/DialogflowAdapter.html",[105,0.301,226,1.449]],["body/classes/DialogflowAdapter.html",[0,0.244,3,0.505,4,0.362,5,0.237,7,0.584,11,1.513,20,1.269,28,1.113,33,0.297,34,1.04,38,1.164,42,2.585,49,1.513,56,1.441,57,1.269,58,0.05,59,0.838,60,0.411,61,1.113,65,1.181,66,0.97,67,0.942,71,0.74,82,1.181,92,0.925,95,0.431,98,0.024,99,0.032,100,0.024,105,0.297,109,1.441,112,0.868,141,0.687,142,0.795,151,1.993,157,0.765,164,2.092,180,1.513,181,1.337,196,0.868,203,1.342,208,1.181,226,2.766,227,0.868,228,2.248,229,3.777,230,2.488,231,3.06,232,3.059,233,3.059,234,3.777,235,1.95,236,1.95,237,2.585,238,3.059,239,2.585,240,1.04,241,2.232,242,1.715,243,1.513,244,2.202,245,2.216,246,1.932,247,1.932,248,2.188,249,2.216,250,1.112,251,1.433,252,2.776,253,2.248,254,2.433,255,2.822,256,2.776,257,1.64,258,3.154,259,2.776,260,2.248,261,1.847,262,2.776,263,1.64,264,2.092,265,2.776,266,1.64,267,1.433,268,1.64,269,2.248,270,1.715,271,1.64,272,1.26,273,1.433,274,1.9,275,2.248,276,2.248,277,1.113,278,4.293,279,2.776]],["title/interfaces/DialogflowConfig.html",[0,0.181,280,1.449]],["body/interfaces/DialogflowConfig.html",[0,0.262,2,1.437,3,0.738,4,0.529,5,0.346,33,0.435,58,0.049,60,0.437,71,0.627,92,0.875,95,0.796,98,0.035,99,0.041,100,0.035,128,1.928,159,2.125,173,2.398,196,1.269,197,2.777,199,3.286,216,3.031,226,2.095,243,1.928,280,2.483,281,2.777,282,3.896,283,4.295,284,3.286,285,4.058,286,3.896]],["title/classes/DialogflowV2Adapter.html",[105,0.301,235,1.449]],["body/classes/DialogflowV2Adapter.html",[0,0.24,3,0.494,4,0.354,5,0.232,7,0.572,11,1.492,20,1.258,24,1.922,28,1.103,33,0.291,34,1.025,38,1.156,56,1.164,57,1.258,58,0.05,59,0.831,60,0.408,61,1.103,62,1.164,66,0.961,67,0.937,71,0.738,82,1.164,89,3.015,92,0.937,95,0.422,98,0.023,99,0.032,100,0.023,105,0.291,109,1.428,112,0.85,141,0.677,142,0.784,157,0.748,164,2.243,175,2.548,176,2.548,177,2.548,180,1.492,181,1.318,196,0.85,203,1.328,208,1.164,212,1.922,227,0.85,230,2.192,231,2.699,235,2.814,236,1.922,239,2.548,240,1.025,241,2.2,242,1.69,243,1.492,244,2.196,245,2.192,246,1.917,247,1.917,248,2.172,249,2.192,250,1.089,251,1.403,253,2.201,254,2.443,255,2.797,260,2.201,261,2.065,263,1.606,264,2.074,266,1.606,267,1.403,268,1.606,269,2.201,270,1.69,271,1.606,272,1.234,273,1.403,274,1.86,275,2.201,276,2.201,277,1.103,280,2.729,287,2.201,288,3.723,289,2.548,290,3.723,291,2.718,292,2.718,293,2.718,294,2.718,295,2.718,296,2.718,297,3.126,298,4.568,299,4.246,300,4.246,301,2.718]],["title/classes/FacebookAdapter.html",[30,1.275,105,0.301]],["body/classes/FacebookAdapter.html",[1,1.647,3,0.62,4,0.445,5,0.291,7,0.718,20,1.308,21,2.66,29,2.267,30,1.963,33,0.365,34,1.191,35,2.232,36,2.806,37,2.96,38,1.045,57,1.191,58,0.05,59,0.786,60,0.369,61,1.045,62,1.352,66,0.91,67,0.937,68,2.335,70,2.335,71,0.564,72,2.335,81,3.251,82,1.066,92,0.984,93,2.156,94,1.761,95,0.529,96,1.548,98,0.029,99,0.037,100,0.029,105,0.365,138,2.232,141,0.908,142,1.051,157,0.939,203,1.485,227,1.066,240,1.375,244,2.11,277,1.045,302,2.762,303,3.251,304,1.963,305,2.451,306,3.411,307,3.411,308,2.762,309,2.015,310,2.762,311,2.762,312,2.762,313,3.502,314,3.411,315,2.762,316,3.411,317,2.762,318,2.762,319,2.762,320,3.411,321,3.411,322,3.411,323,2.762]],["title/interfaces/FacebookChatConfig.html",[0,0.181,324,1.659]],["body/interfaces/FacebookChatConfig.html",[0,0.337,2,1.177,3,0.604,4,0.433,5,0.283,7,0.7,8,2.196,11,1.705,29,1.931,30,2.246,33,0.356,40,1.752,56,1.33,58,0.049,60,0.4,64,1.931,69,1.506,71,0.709,78,1.506,92,0.774,95,0.516,98,0.028,99,0.036,100,0.028,103,1.752,141,0.774,142,0.895,151,1.332,164,1.509,169,2.275,171,2.912,172,2.691,207,2.196,213,2.772,215,2.912,225,2.196,231,3.182,237,3.386,240,1.172,242,2.246,243,1.705,282,3.445,284,2.691,303,3.211,304,2.541,317,2.691,318,2.691,324,2.514,325,2.691,326,4.254,327,4.254,328,3.445,329,4.254,330,4.254,331,4.36,332,3.386,333,4.946,334,2.912,335,4.254,336,2.196,337,3.445,338,4.235,339,3.445,340,3.445,341,3.445,342,3.445,343,2.514,344,4.254]],["title/interfaces/Interceptor.html",[0,0.181,114,1.125]],["body/interfaces/Interceptor.html",[0,0.237,1,0.966,2,0.741,3,0.38,4,0.273,5,0.178,7,0.65,13,1.595,15,1.595,16,1.595,18,1.815,20,1.528,22,1.842,23,2.397,24,1.595,25,2.115,28,0.746,33,0.224,34,0.851,35,1.595,38,0.887,40,1.704,49,1.815,52,1.403,55,1.238,57,0.576,58,0.049,59,0.562,60,0.432,61,0.505,62,1.353,63,1.595,65,1.562,66,0.854,67,0.562,69,1.094,71,0.479,78,1.704,80,1.826,91,1.826,92,0.38,93,1.403,94,1.08,95,0.325,96,1.403,97,2.115,98,0.018,99,0.026,100,0.018,103,1.704,107,1.417,112,1.269,114,2.15,119,2.515,122,1.815,125,1.826,128,1.626,132,2.677,136,1.826,141,0.562,145,1.403,151,1.734,157,1.012,158,1.826,159,1.238,164,1.965,168,1.08,169,2.777,174,1.595,178,2.115,189,1.403,208,1.417,209,2.115,212,1.595,220,2.094,221,2.397,222,2.397,224,2.094,236,1.595,250,1.238,254,1.403,261,1.238,277,0.746,289,2.115,304,1.403,336,1.595,345,1.694,346,2.502,347,4.057,348,3.089,349,1.826,350,2.502,351,2.502,352,3.089,353,2.115,354,3.089,355,3.089,356,3.101,357,3.089,358,4.057,359,3.089,360,3.089,361,3.089,362,2.502,363,3.089,364,2.975,365,2.515,366,3.089,367,3.089,368,4.811,369,4.057,370,2.777,371,2.115,372,4.057,373,3.669,374,2.115,375,2.094,376,3.089,377,2.502,378,3.285,379,3.089,380,1.826,381,2.115,382,4.53,383,2.502,384,2.502,385,1.842,386,3.285,387,4.53,388,2.397,389,3.285,390,2.777,391,3.089,392,2.502,393,2.397,394,3.089,395,3.285,396,3.089,397,3.089,398,3.089,399,2.502,400,2.115,401,3.089,402,3.089,403,2.115,404,3.089,405,3.089,406,3.089,407,3.089,408,2.115,409,2.502,410,2.115,411,2.502,412,3.089,413,3.089,414,2.502,415,3.089,416,4.057,417,2.115,418,3.089,419,3.089,420,3.089,421,3.089,422,3.089,423,3.089,424,3.089,425,3.089,426,3.089,427,3.089,428,2.502,429,1.826,430,3.089,431,3.089,432,2.502,433,3.089,434,2.502,435,3.089,436,3.089,437,3.089,438,2.115,439,2.502,440,2.091,441,2.502,442,2.502,443,3.089,444,3.089,445,2.502,446,2.777,447,2.502,448,3.089,449,3.089,450,2.091,451,2.091,452,2.091,453,2.091,454,1.694,455,2.091,456,2.091]],["title/classes/MirrorInterceptor.html",[105,0.301,457,1.922]],["body/classes/MirrorInterceptor.html",[2,1.711,3,0.568,4,0.407,5,0.266,7,0.658,13,2.11,14,2.11,18,1.638,20,1.381,33,0.335,34,1.126,38,0.987,49,1.638,57,1.126,58,0.049,59,0.568,60,0.348,61,0.755,62,0.977,63,2.11,65,1.511,66,1.017,67,0.879,71,0.594,91,2.415,92,0.879,94,1.613,95,0.485,98,0.027,99,0.035,100,0.027,103,1.447,105,0.488,107,1.278,114,2.1,117,2.415,119,3.118,122,1.638,137,2.855,141,0.935,142,0.86,145,1.856,157,0.861,158,2.855,181,1.447,189,1.856,203,1.278,206,2.11,224,2.494,227,0.977,240,1.126,244,1.936,277,0.987,305,2.352,346,3.31,362,2.53,364,2.53,370,2.798,371,2.798,386,3.31,388,2.415,434,3.31,438,2.798,439,3.31,441,3.31,457,3.588,458,2.53,459,4.088,460,4.556,461,4.088,462,2.855,463,4.088,464,4.088,465,3.31,466,4.088,467,2.798,468,3.31,469,4.088,470,4.088,471,4.088,472,2.798,473,4.556,474,4.832,475,3.125,476,3.125,477,2.798,478,3.31,479,3.125,480,3.31,481,2.53,482,3.125,483,3.125,484,3.125,485,3.125,486,3.125,487,3.125,488,3.125,489,3.125]],["title/interfaces/NlpAdapter.html",[0,0.181,109,0.878]],["body/interfaces/NlpAdapter.html",[0,0.242,2,0.767,3,0.394,4,0.283,5,0.422,7,0.924,8,2.508,14,2.13,20,0.873,29,1.44,33,0.232,34,0.873,38,0.997,40,1.123,41,1.637,55,1.271,57,1.137,58,0.05,59,0.956,60,0.374,61,0.997,64,2.206,65,1.52,66,1.023,67,0.884,69,1.784,71,0.724,79,2.171,80,1.874,82,0.678,87,2.568,92,0.577,95,0.492,97,3.449,98,0.019,99,0.027,100,0.019,107,1.645,109,0.992,112,1.173,122,1.947,123,2.872,126,2.171,128,1.947,138,1.637,141,0.884,142,1.023,153,1.483,174,2.508,182,2.171,191,1.874,196,1.173,201,2.508,227,0.992,240,0.873,243,1.271,245,2.13,246,1.503,247,1.503,248,1.703,249,1.936,254,2.318,255,2.753,257,1.281,261,2.179,264,2.152,267,1.119,272,2.251,273,1.119,277,0.523,343,1.874,353,1.483,370,2.171,375,1.637,380,2.711,385,1.44,390,2.171,429,2.595,445,3.935,490,1.755,491,3.171,492,2.13,493,4.127,494,3.171,495,2.568,496,3.171,497,3.171,498,3.171,499,3.171,500,1.874,501,2.568,502,1.874,503,1.483,504,2.167,505,4.127,506,4.127,507,4.86,508,4.86,509,3.935,510,4.588,511,5.26,512,4.588,513,4.127,514,2.167,515,2.568,516,4.588,517,4.127,518,1.483,519,4.127,520,2.167,521,3.171,522,2.167,523,2.167,524,2.568,525,2.568,526,3.171,527,2.568,528,2.567,529,2.167,530,2.167,531,1.755,532,1.483,533,2.167,534,1.755,535,2.167,536,1.755]],["title/classes/RasaAdapter.html",[105,0.301,537,1.659]],["body/classes/RasaAdapter.html",[0,0.254,3,0.536,4,0.385,5,0.251,7,0.621,11,1.576,28,0.95,33,0.316,34,1.084,38,1.189,40,1.044,57,1.301,58,0.05,59,0.859,60,0.419,61,1.141,66,0.994,67,0.955,71,0.743,82,1.23,92,0.92,95,0.458,98,0.025,99,0.034,100,0.025,105,0.316,107,0.922,109,1.477,112,0.922,141,0.715,142,0.828,157,0.812,180,1.576,181,1.393,191,1.339,196,0.922,203,1.384,208,1.23,227,0.922,240,1.084,241,2.325,242,1.786,243,1.576,244,2.219,245,2.285,246,1.893,247,1.972,248,2.144,249,2.285,250,1.182,251,1.522,254,2.346,255,2.87,257,1.742,258,3.233,261,1.972,263,1.742,264,2.346,266,1.742,267,1.522,268,1.742,270,1.339,271,1.742,272,1.339,273,1.522,277,1.141,305,2.744,492,1.522,503,2.693,518,2.693,528,2.018,537,2.908,538,2.388,539,3.03,540,2.388,541,2.325,542,2.949,543,2.949,544,2.949,545,2.949,546,2.949,547,2.388,548,2.949,549,1.742,550,2.388,551,2.388]],["title/classes/SlackAdapter.html",[105,0.301,552,1.659]],["body/classes/SlackAdapter.html",[1,1.5,3,0.634,4,0.455,5,0.297,20,1.322,21,2.678,33,0.374,34,1.208,35,2.264,36,2.836,37,3.003,38,1.06,57,1.208,58,0.05,59,0.798,60,0.374,61,1.06,62,1.5,66,0.923,67,0.943,68,2.388,70,2.388,71,0.626,72,2.388,81,3.285,82,1.091,92,0.997,93,2.178,94,1.801,95,0.541,96,1.584,98,0.03,99,0.038,100,0.03,105,0.374,203,1.372,227,1.091,244,1.923,277,0.843,297,3.003,305,2.734,308,2.825,309,2.061,310,2.825,312,2.825,319,2.825,323,2.825,552,2.592,553,2.825,554,3.488,555,3.488,556,2.825,557,2.825,558,2.825,559,3.552,560,3.488,561,3.552,562,3.488,563,3.552,564,3.488,565,4.798,566,3.488,567,3.488,568,4.386,569,3.488,570,3.488,571,3.488]],["title/classes/SnipsAdapter.html",[105,0.301,572,1.659]],["body/classes/SnipsAdapter.html",[0,0.221,3,0.438,4,0.314,5,0.205,7,0.507,11,1.37,13,1.765,16,1.765,28,0.826,33,0.258,34,0.942,38,1.105,40,0.852,57,1.193,58,0.05,59,0.788,60,0.39,61,1.046,65,1.069,66,0.912,67,0.909,69,1.211,71,0.731,78,1.534,82,1.069,84,2.341,92,0.865,95,0.374,98,0.039,99,0.029,100,0.021,103,1.211,105,0.258,107,0.752,109,1.355,112,0.752,130,2.965,141,0.622,142,0.72,143,2.021,157,0.663,180,1.37,181,1.211,191,1.093,196,0.752,203,1.244,207,1.765,208,1.069,227,0.752,240,0.942,241,2.021,242,1.553,243,1.37,244,2.158,245,2.054,246,1.736,247,1.834,248,1.967,249,2.054,250,0.964,251,2.525,254,2.309,255,2.796,257,1.422,258,2.965,261,1.96,263,1.422,264,2.221,266,1.422,267,1.242,268,1.422,270,1.093,271,1.422,272,1.093,273,1.242,277,1.046,305,2.625,341,2.769,356,2.341,403,2.341,408,2.965,492,1.242,503,2.341,518,2.341,528,1.647,532,2.341,540,3.222,541,2.021,547,1.949,549,1.422,550,1.949,551,1.949,572,2.704,573,1.949,574,3.348,575,3.42,576,3.42,577,3.42,578,4.332,579,3.42,580,3.42,581,2.769,582,3.42,583,2.769,584,3.42,585,3.42,586,3.42,587,3.42,588,3.42,589,3.42,590,4.332,591,3.42,592,2.769,593,3.42,594,2.769,595,3.42,596,3.42,597,3.42,598,3.42,599,3.42,600,3.42,601,3.42,602,3.508,603,3.42,604,2.769,605,3.42,606,2.406,607,2.406,608,2.406,609,2.406,610,2.406,611,2.406,612,2.406]],["title/coverage.html",[613,3.083]],["body/coverage.html",[0,0.279,1,0.576,5,0.157,6,1.491,28,0.445,30,0.836,58,0.05,60,0.157,78,0.652,82,1.803,98,0.016,99,0.024,100,0.016,101,1.26,102,1.26,105,0.481,109,0.576,114,0.738,117,1.088,159,0.738,174,0.95,214,1.26,217,1.088,219,1.088,220,0.95,221,1.088,222,1.088,223,2.249,226,0.95,228,1.491,235,0.95,246,1.363,247,1.363,248,1.545,270,1.728,274,1.26,280,0.95,281,1.26,287,1.491,302,1.491,309,1.659,311,1.491,315,1.491,324,1.088,325,1.491,345,1.491,438,1.26,457,1.26,458,1.491,481,1.491,490,2.273,502,1.088,534,1.491,537,1.088,538,1.491,541,3.381,552,1.088,553,1.491,556,1.491,557,1.491,558,1.491,563,1.491,572,1.088,573,1.491,613,1.491,614,1.841,615,2.273,616,1.841,617,5.717,618,1.841,619,5.676,620,1.841,621,1.841,622,1.841,623,2.807,624,5.667,625,1.841,626,4.098,627,1.841,628,1.841,629,1.841,630,1.841,631,1.841,632,3.806,633,4.098,634,1.841,635,1.841,636,3.637,637,1.841,638,1.841,639,1.841,640,1.841,641,4.435,642,1.491,643,1.841,644,1.841,645,1.841,646,1.841,647,1.841,648,4.098,649,2.807,650,1.841,651,1.841,652,1.491,653,1.491,654,1.491,655,1.491,656,1.491,657,1.491,658,1.491,659,1.491,660,1.491,661,1.491,662,1.491,663,1.491,664,1.491,665,1.491,666,1.491,667,1.491,668,1.491,669,2.755,670,1.841,671,1.491,672,1.491,673,2.755,674,1.841,675,1.491,676,1.841,677,1.841,678,1.26,679,3.497,680,1.841,681,1.841,682,1.841,683,1.491,684,2.755,685,4.098,686,1.841,687,1.841,688,1.491,689,1.491,690,1.841,691,2.605,692,1.841,693,1.491,694,1.491,695,1.841,696,1.841,697,1.491,698,1.491,699,2.807,700,1.841,701,4.318,702,1.841,703,1.841,704,1.841,705,1.841,706,1.841,707,1.841,708,1.841,709,1.841,710,1.841,711,1.841,712,1.922,713,1.491,714,1.26,715,1.841,716,3.806,717,2.807,718,2.807,719,2.807,720,3.403,721,1.841,722,1.841,723,3.806,724,3.806,725,3.806,726,2.807,727,3.403,728,2.273,729,2.807,730,3.806,731,2.807,732,2.807,733,1.841,734,1.841,735,2.807,736,3.806,737,1.841,738,2.807,739,1.841,740,1.841,741,2.807,742,2.807,743,3.403,744,1.841,745,2.807,746,2.807,747,1.841,748,1.841]],["title/dependencies.html",[749,2.357,750,2.307]],["body/dependencies.html",[56,1.301,58,0.049,67,0.757,69,1.729,98,0.036,99,0.042,100,0.036,151,1.667,230,2.148,454,3.369,750,2.848,751,4.161,752,4.161,753,4.161,754,4.161,755,4.161,756,4.161,757,4.161,758,4.161,759,4.161,760,4.161,761,4.161,762,4.161,763,4.161,764,4.161,765,4.161,766,4.161,767,4.161,768,4.161,769,4.161,770,4.161,771,4.161,772,4.161,773,2.848,774,4.161]],["title/miscellaneous/enumerations.html",[775,1.07,776,2.729]],["body/miscellaneous/enumerations.html",[33,0.471,58,0.043,98,0.038,99,0.043,100,0.038,385,1.997,775,1.997,776,3.562,777,5.043,778,3.562,779,3.562,780,4.399,781,4.399,782,3.562,783,4.399]],["title/index.html",[33,0.253,784,2.357,785,2.357]],["body/index.html",[4,0.317,5,0.371,7,0.511,9,1.777,13,1.253,15,1.253,16,1.253,18,1.379,22,1.562,27,1.966,28,0.586,29,1.815,40,1.54,41,1.253,46,2.787,49,1.602,52,1.815,55,1.379,56,0.759,58,0.029,60,0.207,61,0.586,65,1.25,78,1.219,83,1.966,98,0.021,99,0.029,100,0.021,103,1.54,107,1.25,122,1.602,123,2.898,125,2.034,128,0.973,129,1.662,136,1.435,137,2.034,138,2.245,141,0.791,142,0.724,143,1.435,145,2.085,149,2.356,157,0.669,159,0.973,168,1.253,179,2.356,186,1.662,189,2.165,190,1.662,191,1.562,195,2.034,200,1.662,201,2.064,204,2.034,206,1.777,208,1.436,211,1.662,212,1.253,225,1.253,230,1.253,233,2.787,239,1.662,240,1.198,250,1.602,303,3.537,304,1.102,328,1.966,332,1.662,336,2.064,343,2.362,349,1.435,356,1.662,365,2.356,371,1.662,374,1.662,375,2.245,378,3.237,383,1.966,385,1.102,388,1.435,393,1.435,403,2.737,408,1.662,414,1.966,428,1.966,432,1.966,462,1.435,465,1.966,467,1.662,472,2.737,477,2.356,492,1.253,500,2.57,501,2.787,502,2.362,524,1.966,525,1.966,532,1.662,539,1.662,574,1.662,641,1.966,712,1.662,714,2.356,750,1.662,773,1.662,786,2.428,787,2.428,788,2.428,789,3.442,790,3.442,791,3.998,792,3.442,793,3.442,794,2.428,795,2.428,796,3.442,797,2.428,798,3.442,799,2.428,800,3.998,801,2.428,802,2.428,803,2.428,804,2.428,805,4.769,806,1.966,807,2.787,808,3.442,809,1.966,810,2.428,811,2.428,812,1.966,813,1.966,814,2.428,815,2.428,816,2.428,817,2.428,818,3.143,819,2.428,820,2.428,821,2.428,822,3.442,823,2.428,824,2.428,825,2.428,826,1.662,827,2.428,828,2.428,829,2.428,830,2.428,831,1.966,832,2.428,833,3.442,834,2.428,835,2.428,836,2.428,837,2.428,838,2.428,839,2.428,840,2.428,841,2.428,842,2.428,843,2.428,844,2.428,845,2.428,846,2.428,847,2.428,848,2.428,849,3.442,850,2.428,851,3.998,852,2.428,853,2.428,854,2.428,855,2.428,856,2.428,857,3.998,858,2.428,859,2.428,860,2.428,861,2.428,862,2.428,863,2.428,864,1.966,865,2.428,866,1.966,867,2.428,868,2.428,869,2.428,870,2.428,871,2.428,872,2.428,873,1.966,874,2.428,875,2.428,876,2.428,877,3.442,878,3.998,879,2.428,880,3.442,881,2.428,882,1.966,883,3.998,884,1.662,885,5.01,886,3.862,887,2.428,888,1.966,889,2.428,890,2.787,891,2.787,892,2.428,893,3.442,894,3.442,895,4.592,896,2.428,897,2.428,898,1.966,899,2.428,900,2.428,901,2.428,902,2.428,903,1.966,904,2.428,905,2.428,906,1.966,907,2.428,908,2.428,909,2.428,910,2.428,911,2.428,912,2.428,913,3.442,914,2.787,915,3.442,916,3.442,917,2.428,918,2.428,919,2.428,920,3.442,921,1.966,922,1.966,923,2.428,924,2.428,925,2.428,926,2.428,927,2.428,928,2.428,929,4.349,930,2.428,931,2.428,932,2.428,933,4.349,934,2.428,935,3.998,936,2.428,937,2.428,938,2.428,939,2.428,940,1.966,941,2.428,942,2.428,943,2.428,944,2.428,945,2.428,946,2.787,947,2.428,948,3.442,949,1.966,950,2.428,951,2.428,952,1.966,953,1.966,954,2.428,955,2.428,956,2.428,957,2.428,958,2.428,959,2.428,960,2.428,961,2.428,962,3.442,963,2.428,964,2.428,965,2.428,966,2.428,967,2.428,968,2.428,969,2.428,970,2.428,971,2.428,972,2.428,973,2.428,974,2.428,975,2.428,976,2.428,977,2.428,978,2.428,979,2.428]],["title/modules.html",[980,3.083]],["body/modules.html",[58,0.044,98,0.038,99,0.044,100,0.038,980,3.633]],["title/overview.html",[981,3.083]],["body/overview.html",[2,1.577,58,0.043,98,0.038,99,0.043,100,0.038,192,3.607,227,1.393,981,3.607,982,4.454]],["title/miscellaneous/typealiases.html",[775,1.07,983,3.37]],["body/miscellaneous/typealiases.html",[0,0.098,1,0.938,4,0.197,5,0.256,8,1.766,9,0.78,14,1.243,15,1.243,16,0.78,18,1.371,20,1.39,21,1.243,22,1.093,23,0.893,24,1.549,25,1.648,28,0.826,32,1.035,33,0.162,38,0.582,41,1.243,42,1.035,49,0.606,52,1.895,55,0.965,56,1.07,58,0.047,59,0.438,60,0.489,62,1.396,63,0.78,64,1.967,65,1.461,66,0.786,69,1.062,71,0.544,78,1.211,79,1.648,80,0.893,84,2.054,93,1.553,96,0.686,98,0.026,99,0.021,100,0.013,102,1.035,103,1.478,104,1.224,106,1.035,107,0.938,108,1.648,112,0.938,114,1.595,118,1.035,120,1.224,121,1.224,122,1.736,123,0.893,124,1.224,125,0.893,126,1.035,128,1.96,129,1.035,130,1.035,131,1.224,132,1.423,133,1.95,134,1.224,135,1.224,136,2.022,137,1.423,138,0.78,139,1.224,140,1.224,141,0.438,142,0.507,143,0.893,144,3.223,145,1.093,146,1.224,147,1.224,148,2.054,149,1.035,150,1.224,151,0.606,152,2.054,153,1.035,154,1.95,155,1.224,156,1.224,157,0.826,158,0.893,159,1.497,160,1.224,161,1.224,162,1.95,163,1.95,165,1.648,166,1.224,167,1.224,168,1.243,170,1.648,171,1.035,173,0.893,174,1.549,175,1.035,176,1.035,177,1.035,178,2.342,179,1.648,180,0.606,181,0.535,182,1.035,184,2.724,185,1.224,186,1.035,187,1.224,188,1.035,189,1.362,190,1.035,191,0.686,193,1.035,194,1.224,195,0.893,196,0.473,200,1.035,201,0.78,202,1.95,203,0.473,204,0.893,205,1.224,206,0.78,207,1.243,208,0.938,209,1.035,210,1.224,211,1.035,212,1.549,213,1.423,216,1.423,217,1.423,219,1.423,220,1.243,223,1.423,224,1.243,225,1.243,236,0.78,237,1.035,242,1.093,264,1.093,272,1.093,277,0.725,281,1.035,283,1.95,286,1.95,304,0.686,313,1.95,334,1.035,336,1.549,337,1.224,340,1.224,349,0.893,350,3.223,353,1.035,373,1.224,375,0.78,380,0.893,381,1.648,385,1.553,390,1.035,393,2.352,395,2.429,399,1.224,400,1.035,409,1.95,410,2.857,417,1.035,429,1.423,442,1.224,446,1.035,447,1.95,462,0.893,467,1.035,480,2.429,492,0.78,500,0.893,536,1.224,549,0.893,559,1.95,561,1.95,594,1.224,602,1.224,604,1.224,615,1.224,678,1.035,691,1.035,697,1.224,775,0.686,778,4.008,779,1.224,782,1.95,809,1.224,818,1.035,826,1.035,831,1.224,866,1.224,873,1.224,884,1.035,888,1.224,890,1.224,891,1.224,898,1.224,903,1.224,914,1.224,922,1.224,940,1.224,949,1.224,984,1.512,985,1.224,986,4.174,987,2.408,988,1.512,989,2.408,990,4.577,991,1.512,992,2.408,993,5,994,2.408,995,2.408,996,4.174,997,3,998,3,999,2.408,1000,3,1001,3,1002,2.408,1003,2.408,1004,3,1005,3.421,1006,2.408,1007,2.408,1008,2.408,1009,1.512,1010,2.408,1011,3,1012,3,1013,3,1014,3,1015,3,1016,2.408,1017,2.408,1018,1.512,1019,2.408,1020,2.408,1021,4.174,1022,3,1023,4.892,1024,2.408,1025,2.408,1026,2.408,1027,2.408,1028,2.408,1029,2.408,1030,2.408,1031,3,1032,2.408,1033,2.408,1034,2.408,1035,3,1036,2.408,1037,1.512,1038,3,1039,3,1040,2.408,1041,3,1042,2.408,1043,3.421,1044,2.408,1045,2.408,1046,3,1047,2.408,1048,2.408,1049,3,1050,1.95,1051,2.408,1052,3,1053,2.408,1054,1.224,1055,3,1056,2.408,1057,2.408,1058,3,1059,2.408,1060,2.408,1061,2.408,1062,3.736,1063,2.408,1064,2.408,1065,2.408,1066,2.408,1067,2.408,1068,2.408,1069,2.408,1070,3.421,1071,3,1072,2.408,1073,2.408,1074,3,1075,2.408,1076,3,1077,2.408,1078,2.408,1079,1.512,1080,3,1081,2.408,1082,2.408,1083,5.723,1084,1.224,1085,1.512,1086,1.512,1087,2.429,1088,1.512,1089,1.512,1090,1.512,1091,1.512,1092,1.512,1093,2.408,1094,1.512,1095,1.512,1096,1.512,1097,1.512,1098,2.429,1099,1.95,1100,1.512,1101,1.512,1102,1.512,1103,1.512,1104,1.512,1105,1.512,1106,1.224,1107,1.512,1108,1.512,1109,1.512,1110,2.408,1111,1.512,1112,1.512,1113,1.95,1114,1.512,1115,1.512,1116,1.512,1117,1.512,1118,1.512,1119,1.512,1120,1.224,1121,1.512,1122,1.512,1123,1.512,1124,1.512,1125,1.512,1126,1.512,1127,1.512,1128,1.512,1129,1.512,1130,1.512,1131,1.512,1132,1.512,1133,1.512,1134,1.512,1135,1.512,1136,1.512,1137,1.512,1138,2.408,1139,1.224,1140,1.512,1141,1.512,1142,1.512,1143,1.512,1144,1.512,1145,1.95,1146,1.95,1147,1.512,1148,1.512,1149,1.512,1150,1.512,1151,1.224,1152,1.512,1153,1.512,1154,1.512,1155,1.512,1156,3,1157,1.512,1158,1.512,1159,1.512,1160,1.512,1161,1.512,1162,1.512,1163,1.512,1164,1.512,1165,2.408,1166,1.512,1167,1.512,1168,1.512,1169,2.408,1170,1.512,1171,1.512,1172,1.512,1173,1.512,1174,1.512,1175,1.512,1176,1.512,1177,2.408,1178,1.512,1179,1.512,1180,1.512,1181,1.512,1182,1.512,1183,1.512,1184,1.512,1185,1.512,1186,1.512,1187,1.512,1188,1.512,1189,1.512,1190,1.512,1191,1.512,1192,1.512,1193,1.512]],["title/miscellaneous/variables.html",[775,1.07,1194,2.729]],["body/miscellaneous/variables.html",[1,0.711,5,0.244,9,0.726,11,0.911,12,1.14,18,1.146,20,1.285,21,0.726,22,1.49,23,0.832,24,0.726,26,1.14,28,1.106,29,1.032,30,0.639,33,0.151,35,0.726,36,0.832,40,1.495,41,0.726,49,1.316,50,2.316,52,0.639,54,1.14,55,1.146,56,0.894,58,0.05,59,0.701,60,0.448,62,1.205,63,0.726,64,1.032,65,1.127,67,0.52,69,1.365,71,0.296,77,2.316,78,1.276,91,0.832,95,0.218,96,0.639,98,0.012,99,0.019,100,0.012,103,0.498,106,2.638,107,1.205,108,2.638,109,0.711,112,0.44,114,0.911,117,1.94,118,1.556,122,0.564,128,1.544,132,1.343,141,0.793,142,0.296,145,1.032,148,2.466,151,1.316,152,2.638,159,1.625,164,1.75,165,2.638,168,0.726,170,2.776,173,1.94,180,1.544,181,1.365,184,3.193,188,1.556,189,1.979,193,2.638,195,0.832,196,0.894,197,2.247,201,2.448,204,0.832,206,0.726,207,2.179,208,0.711,213,0.832,214,2.247,215,1.556,216,1.343,217,2.277,218,2.918,219,2.277,220,1.476,221,1.69,222,1.69,223,2.878,224,2.179,225,1.476,226,1.476,230,2.25,231,2.129,232,1.14,235,1.476,236,0.726,238,1.14,240,0.788,246,0.564,247,0.564,250,2.125,251,2.716,261,1.316,270,1.032,277,0.691,280,1.173,289,2.776,297,1.957,304,2.032,309,0.832,324,0.832,331,1.14,332,1.556,334,1.556,336,1.476,338,1.14,339,1.841,342,1.14,343,1.69,349,1.343,351,1.14,365,0.963,374,0.963,375,1.173,377,1.14,380,2.576,381,0.963,384,1.841,385,1.032,388,2.129,389,3.121,392,2.316,393,1.343,400,0.963,410,0.963,411,1.14,417,1.957,429,0.832,446,1.556,462,0.832,468,1.14,472,1.957,477,0.963,478,1.14,495,1.841,500,1.69,502,2.396,509,1.14,515,1.14,527,2.659,531,2.316,537,1.69,539,2.247,541,2.129,549,0.832,552,0.832,572,0.832,574,1.957,581,1.14,583,1.14,592,1.14,636,1.14,642,1.841,652,1.14,653,1.14,654,1.14,655,1.14,656,1.14,657,2.659,658,1.14,659,2.316,660,1.14,661,1.841,662,1.14,663,2.659,664,1.14,665,2.316,666,1.14,667,1.841,668,1.14,669,1.14,671,2.316,672,1.841,673,1.14,675,2.316,678,0.963,679,1.14,683,1.841,684,1.14,688,1.14,689,1.841,691,0.963,693,1.841,694,1.841,698,1.14,712,0.963,713,2.659,714,2.247,728,1.14,773,0.963,775,0.639,806,2.316,807,3.418,812,1.14,813,1.841,818,0.963,826,0.963,864,1.14,882,3.121,884,0.963,886,1.14,906,3.625,921,1.841,946,1.841,952,2.316,953,1.841,985,1.14,1050,1.14,1054,2.316,1084,1.14,1087,1.14,1098,2.316,1099,1.14,1106,1.14,1113,1.841,1120,1.841,1139,1.14,1145,1.14,1146,1.14,1151,1.14,1194,1.14,1195,2.859,1196,1.407,1197,1.407,1198,1.407,1199,2.273,1200,2.273,1201,2.273,1202,1.407,1203,2.273,1204,1.407,1205,1.407,1206,1.407,1207,1.407,1208,1.407,1209,1.407,1210,1.407,1211,2.273,1212,1.407,1213,1.407,1214,1.407,1215,2.859,1216,2.273,1217,1.407,1218,1.407,1219,2.273,1220,1.407,1221,1.407,1222,1.407,1223,1.407,1224,1.407,1225,1.407,1226,2.859,1227,1.407,1228,1.407,1229,1.407,1230,1.407,1231,1.407,1232,1.407,1233,1.407,1234,1.407,1235,1.407,1236,2.859,1237,2.859,1238,2.859,1239,2.859,1240,1.407,1241,1.407,1242,1.407,1243,1.407,1244,1.407,1245,2.859,1246,1.407,1247,1.407,1248,1.407,1249,1.407,1250,1.407,1251,1.407,1252,1.407,1253,2.273,1254,2.273,1255,1.407,1256,1.407,1257,1.407,1258,1.407,1259,1.407,1260,1.407,1261,1.407,1262,1.407,1263,1.407,1264,1.407,1265,1.407,1266,1.407,1267,1.407,1268,1.407,1269,2.859,1270,1.407,1271,1.407,1272,1.407,1273,1.407,1274,1.407,1275,1.407,1276,1.407,1277,1.407,1278,1.407,1279,1.407,1280,2.859,1281,1.407,1282,1.407,1283,1.407,1284,1.407,1285,1.407,1286,1.407,1287,1.407,1288,2.859,1289,1.407,1290,1.407,1291,1.407,1292,1.407,1293,2.273,1294,2.273,1295,1.407,1296,1.407,1297,1.407,1298,1.407,1299,1.407,1300,1.407,1301,1.407,1302,1.407,1303,1.407,1304,1.407,1305,1.407,1306,1.407,1307,2.273,1308,1.407,1309,1.407,1310,1.407,1311,1.407,1312,2.859,1313,1.407,1314,1.407,1315,1.407,1316,1.407,1317,1.407,1318,2.273,1319,1.407,1320,2.273,1321,1.407,1322,1.407,1323,1.407,1324,1.407,1325,1.407,1326,1.407,1327,1.407,1328,1.407,1329,1.407,1330,1.407,1331,1.407,1332,1.407,1333,1.407,1334,1.407,1335,1.407,1336,1.407,1337,2.273,1338,1.407,1339,1.407,1340,1.407,1341,1.407,1342,1.407,1343,1.407,1344,1.407,1345,1.407,1346,1.407,1347,1.407,1348,1.407,1349,1.407,1350,1.407,1351,2.859,1352,1.407,1353,1.407,1354,1.407,1355,1.407,1356,1.407,1357,1.407,1358,2.273,1359,2.273,1360,2.273,1361,2.273,1362,1.407,1363,1.407,1364,2.273,1365,1.407,1366,2.273,1367,2.273,1368,2.273,1369,1.407,1370,1.407,1371,1.407,1372,1.407,1373,1.407,1374,3.854,1375,1.407,1376,1.407,1377,1.407,1378,2.273,1379,2.273,1380,2.273,1381,3.854,1382,2.273,1383,1.407,1384,2.273,1385,1.407,1386,2.273,1387,1.407,1388,1.407,1389,1.407,1390,1.407,1391,1.407,1392,2.273,1393,2.273,1394,1.407,1395,1.407,1396,2.273,1397,1.407,1398,1.407,1399,1.407,1400,1.407,1401,1.407,1402,1.407,1403,1.407,1404,1.407,1405,1.407,1406,1.407,1407,2.273,1408,1.407,1409,1.407,1410,1.407,1411,1.407]]],"invertedIndex":[["",{"_index":58,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":541,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.12.2",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.75",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.8",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.95",{"_index":587,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["0/1",{"_index":617,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["000017380158_smaller.jpg",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["00:00",{"_index":598,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["02",{"_index":595,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["08",{"_index":596,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["1",{"_index":151,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["1.0.8",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["1.1.11",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":709,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":622,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":619,"title":{},"body":{"coverage.html":{}}}],["1234",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["16",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":164,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["2,3,1",{"_index":161,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["2.0",{"_index":967,"title":{},"body":{"index.html":{}}}],["2.3.0",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["2.88.0",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":711,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1181,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["200",{"_index":489,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["2018",{"_index":594,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["20:00:00",{"_index":597,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["25",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["25mb",{"_index":1132,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["3",{"_index":169,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{}}}],["3.1.9",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["3.6.4",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":620,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":621,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":172,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{}}}],["4.17.1",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":183,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["50",{"_index":708,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":192,"title":{},"body":{"interfaces/ClassConstructor.html":{},"overview.html":{}}}],["6/6",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":982,"title":{},"body":{"overview.html":{}}}],["9pm",{"_index":579,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["_agents_",{"_index":127,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["_build/html/chat_adapter/facebook_messenger.html",{"_index":318,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{}}}],["_build/html/nlp_adapter/custom_nlp_adapter.html",{"_index":530,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["above",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accept",{"_index":426,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["access",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessed",{"_index":413,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["action",{"_index":531,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":91,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["adapt",{"_index":860,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":28,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["adapters",{"_index":182,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["add",{"_index":408,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["added",{"_index":411,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["additional",{"_index":137,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["administers",{"_index":1109,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["after_action",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterwards",{"_index":449,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["again",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":128,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["agent`s",{"_index":198,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["agentindex",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agentname",{"_index":255,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["agents",{"_index":159,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["agents[agentindex].minscore",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agentwithname",{"_index":987,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aims",{"_index":787,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":984,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":51,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["allowing",{"_index":797,"title":{},"body":{"index.html":{}}}],["allows",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["already",{"_index":431,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["alternative",{"_index":357,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["always",{"_index":1104,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["and/or",{"_index":1142,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["another",{"_index":136,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["answer",{"_index":581,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["answered",{"_index":811,"title":{},"body":{"index.html":{}}}],["apache",{"_index":966,"title":{},"body":{"index.html":{}}}],["api",{"_index":56,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["api/#recipient",{"_index":1176,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["app",{"_index":342,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["app_secret",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["application",{"_index":332,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["apply",{"_index":1129,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["appsecret",{"_index":215,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["apt",{"_index":930,"title":{},"body":{"index.html":{}}}],["arbitrarily",{"_index":509,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["architecture",{"_index":877,"title":{},"body":{"index.html":{}}}],["arias",{"_index":977,"title":{},"body":{"index.html":{}}}],["array",{"_index":516,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["asked",{"_index":154,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["assigned",{"_index":1117,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["async",{"_index":305,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["attachment",{"_index":1087,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["attachments",{"_index":1099,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["attachmenttype",{"_index":989,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["audio",{"_index":1084,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["authenticate",{"_index":239,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"index.html":{}}}],["authentication",{"_index":171,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authors",{"_index":969,"title":{},"body":{"index.html":{}}}],["automated",{"_index":827,"title":{},"body":{"index.html":{}}}],["avoid",{"_index":396,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["await",{"_index":565,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["awaits",{"_index":76,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["awesome",{"_index":957,"title":{},"body":{"index.html":{}}}],["back",{"_index":1094,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["background",{"_index":816,"title":{},"body":{"index.html":{}}}],["base",{"_index":459,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["basic",{"_index":200,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["bastian",{"_index":974,"title":{},"body":{"index.html":{}}}],["before",{"_index":369,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["belong",{"_index":1100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["below",{"_index":884,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["between",{"_index":341,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"classes/SnipsAdapter.html":{}}}],["bloated",{"_index":397,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["body",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["boolean",{"_index":1106,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["bot",{"_index":123,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["botframeworkinterfacemessage",{"_index":480,"title":{},"body":{"classes/MirrorInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["both",{"_index":834,"title":{},"body":{"index.html":{}}}],["botresponse",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["botresponse.textrequestresult",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["budget",{"_index":874,"title":{},"body":{"index.html":{}}}],["build",{"_index":804,"title":{},"body":{"index.html":{}}}],["buildbutton",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["buildquickreply",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["built",{"_index":918,"title":{},"body":{"index.html":{}}}],["button",{"_index":1151,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["buttons",{"_index":1146,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["callbutton",{"_index":992,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["called",{"_index":126,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["cardbuttons",{"_index":994,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["cards",{"_index":780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cases",{"_index":382,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["categories",{"_index":1101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["certain",{"_index":133,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["certainty",{"_index":147,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["change",{"_index":818,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["changed",{"_index":372,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["changing",{"_index":465,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{}}}],["channel",{"_index":568,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["chat",{"_index":108,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["chat)bot",{"_index":120,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["chat_adapter/chatadapterrequest",{"_index":116,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["chat_adapter/ichatadapter",{"_index":111,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["chatadapter",{"_index":1,"title":{"interfaces/ChatAdapter.html":{}},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["chatadapterattachmentmessage",{"_index":995,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterattachmentrequest",{"_index":997,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterbuttonattachmentmessage",{"_index":998,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadaptercustompayloadquickreplymessage",{"_index":999,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterimageattachmentmessage",{"_index":1000,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterinitialrequest",{"_index":1001,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterquickreplymessage",{"_index":1002,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterrequest",{"_index":93,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["chatadapterrequest,messengeruserid",{"_index":70,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["chatadapterrequests",{"_index":1095,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterresponse",{"_index":21,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["chatadaptertextmessage",{"_index":1003,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadaptertextrequest",{"_index":1004,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatadapterundefinedrequest",{"_index":1005,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["chatbot",{"_index":805,"title":{},"body":{"index.html":{}}}],["chatbots",{"_index":792,"title":{},"body":{"index.html":{}}}],["chatconfig",{"_index":213,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["chattocore",{"_index":220,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":958,"title":{},"body":{"index.html":{}}}],["checks",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choice",{"_index":879,"title":{},"body":{"index.html":{}}}],["choose",{"_index":888,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["chosen",{"_index":508,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["class",{"_index":105,"title":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["classconstructor",{"_index":101,"title":{"interfaces/ClassConstructor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{}}}],["classes",{"_index":227,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"overview.html":{}}}],["classified",{"_index":525,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{}}}],["clear",{"_index":498,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["cli",{"_index":902,"title":{},"body":{"index.html":{}}}],["clickable",{"_index":1162,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["client",{"_index":42,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["cloud",{"_index":176,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{},"miscellaneous/typealiases.html":{}}}],["cms",{"_index":469,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["code",{"_index":378,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["coherent",{"_index":129,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["combine",{"_index":836,"title":{},"body":{"index.html":{}}}],["combined",{"_index":841,"title":{},"body":{"index.html":{}}}],["comes",{"_index":862,"title":{},"body":{"index.html":{}}}],["commands",{"_index":924,"title":{},"body":{"index.html":{}}}],["common",{"_index":368,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["commonly",{"_index":1150,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["communicate",{"_index":206,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["communication",{"_index":340,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/typealiases.html":{}}}],["communication/convertrequest",{"_index":312,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["communication/convertresponse",{"_index":564,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["communication/deletecontexts",{"_index":268,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["communication/postcontexts",{"_index":547,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["communication/postcontextsfromserver",{"_index":269,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["communication/sendresponses",{"_index":316,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["communication/sendtextrequest",{"_index":271,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["communication/webhook",{"_index":310,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["companies",{"_index":872,"title":{},"body":{"index.html":{}}}],["compile",{"_index":894,"title":{},"body":{"index.html":{}}}],["complex",{"_index":864,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["compodoc",{"_index":919,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components",{"_index":796,"title":{},"body":{"index.html":{}}}],["concepts",{"_index":493,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["concerns",{"_index":824,"title":{},"body":{"index.html":{}}}],["confidence",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confidentiality",{"_index":329,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["config",{"_index":223,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configport",{"_index":683,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["configuration",{"_index":201,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["configuration/configtypes",{"_index":284,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{}}}],["connect",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connected",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connecting",{"_index":1088,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["connection",{"_index":1293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connections",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectionundefined",{"_index":1292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consider",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":124,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["const",{"_index":297,"title":{},"body":{"classes/DialogflowV2Adapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":106,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["consult",{"_index":501,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{}}}],["contact",{"_index":358,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["contactclient",{"_index":35,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["contactclient(response",{"_index":37,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["contacted",{"_index":163,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["containing",{"_index":202,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["content",{"_index":63,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":429,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["contextcreated",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contexts",{"_index":261,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["contextstodelete",{"_index":513,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["contextstopost",{"_index":519,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["contexttodelete",{"_index":258,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["contribute",{"_index":916,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":956,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":960,"title":{},"body":{"index.html":{}}}],["control",{"_index":876,"title":{},"body":{"index.html":{}}}],["controlled",{"_index":945,"title":{},"body":{"index.html":{}}}],["convenience",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convert",{"_index":1140,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["convertfacebookrequest",{"_index":311,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["convertfacebookrequest(message",{"_index":320,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["convertintochatadapterrequest",{"_index":558,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["convertintochatadapterrequest(message",{"_index":566,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["convertstringarraytonlpcontexts",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["converttobuttons",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["converttofacebookresponse",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["converttoimage",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["converttonlpparams",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["converttoquickreply",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["converttoslackresponse",{"_index":563,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["converttotext",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["converttourlbutton",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core",{"_index":527,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["core/getconfig",{"_index":275,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["core/model/response",{"_index":94,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SlackAdapter.html":{}}}],["core/utils/responseutils",{"_index":482,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["correct",{"_index":892,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":1111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["counts",{"_index":1102,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["coverage",{"_index":613,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["crappyboolean",{"_index":1006,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["create",{"_index":477,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdialogflowrequestconfiguration",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["createdocs",{"_index":941,"title":{},"body":{"index.html":{}}}],["createnoresponse",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["createpostrequestconfiguration",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["createrequestconfiguration",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["createrequestconfigurationallcontexts",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["createrequestconfigurationselectedcontexts",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["createrequestconfigurationtextmessage",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["createresponse",{"_index":481,"title":{},"body":{"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["credentials",{"_index":880,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["current",{"_index":414,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["currently",{"_index":1098,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":377,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["customchat",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customchatadapter",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custompayload",{"_index":783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cute",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data",{"_index":118,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":388,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["decision",{"_index":423,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["decrypt",{"_index":327,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["default",{"_index":250,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_log_messages",{"_index":671,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_messages",{"_index":675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultattachmentresponse",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultlifespan",{"_index":197,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":38,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["defines",{"_index":346,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["definitions",{"_index":497,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["degree",{"_index":798,"title":{},"body":{"index.html":{}}}],["delete/add",{"_index":430,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["deleteallcontexts",{"_index":246,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleteallcontexts(internaluserid",{"_index":503,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["deleteallcontexts(this",{"_index":253,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["deleted",{"_index":511,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["deletes",{"_index":505,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["deleteselectedcontexts",{"_index":247,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["deleteselectedcontexts(internaluserid",{"_index":257,"title":{},"body":{"classes/DialogflowAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["deleteselectedcontexts(this",{"_index":293,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["deleting",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["depend",{"_index":1130,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dependencies",{"_index":750,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["depending",{"_index":428,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["depends",{"_index":447,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["deploy",{"_index":791,"title":{},"body":{"index.html":{}}}],["deployed",{"_index":121,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["deprecated",{"_index":232,"title":{},"body":{"classes/DialogflowAdapter.html":{},"miscellaneous/variables.html":{}}}],["depseudonymize",{"_index":437,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["depseudonymized",{"_index":442,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["desired",{"_index":604,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["detailed",{"_index":912,"title":{},"body":{"index.html":{}}}],["details",{"_index":915,"title":{},"body":{"index.html":{}}}],["determination",{"_index":418,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["determined",{"_index":432,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["determines",{"_index":83,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["develop",{"_index":790,"title":{},"body":{"index.html":{}}}],["developer",{"_index":237,"title":{},"body":{"classes/DialogflowAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"miscellaneous/typealiases.html":{}}}],["developers",{"_index":803,"title":{},"body":{"index.html":{}}}],["dialogflow",{"_index":230,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dialogflow/dialogflowadapter",{"_index":285,"title":{},"body":{"interfaces/DialogflowConfig.html":{}}}],["dialogflow](https://dialogflow.com",{"_index":276,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["dialogflowadapter",{"_index":226,"title":{"classes/DialogflowAdapter.html":{}},"body":{"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dialogflowagent",{"_index":286,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"miscellaneous/typealiases.html":{}}}],["dialogflowagents",{"_index":283,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"miscellaneous/typealiases.html":{}}}],["dialogflowconfig",{"_index":280,"title":{"interfaces/DialogflowConfig.html":{}},"body":{"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dialogflowconfig.agents[agentname",{"_index":301,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["dialogflowconfig.agents[agentname].project_id",{"_index":299,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["dialogflowconfig.agents[agentname].token",{"_index":300,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["dialogflowcontextresponse",{"_index":1008,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessage",{"_index":1010,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessagecard",{"_index":1011,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessagecustompayload",{"_index":1012,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessageimage",{"_index":1013,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessagequickreplies",{"_index":1014,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessagetext",{"_index":1015,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowmessagetypes",{"_index":777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dialogflowparameters",{"_index":1016,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowstatus",{"_index":1017,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowtextresponse",{"_index":1019,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["dialogflowv2",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dialogflowv2adapter",{"_index":235,"title":{"classes/DialogflowV2Adapter.html":{}},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":336,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["differentiate",{"_index":605,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["directly",{"_index":53,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["disable",{"_index":452,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["disappear",{"_index":1163,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["distinctive",{"_index":27,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["distribute",{"_index":1092,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["docs",{"_index":883,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":502,"title":{},"body":{"interfaces/NlpAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["documented",{"_index":1153,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["doesresponsepassscoringthreshold",{"_index":693,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dolgich",{"_index":973,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1126,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["during",{"_index":417,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["e.g",{"_index":18,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["e.g.export",{"_index":954,"title":{},"body":{"index.html":{}}}],["each",{"_index":242,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["early",{"_index":425,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["easy",{"_index":789,"title":{},"body":{"index.html":{}}}],["effective",{"_index":1179,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["elements",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emubot",{"_index":356,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["emundo",{"_index":786,"title":{},"body":{"index.html":{}}}],["en",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enabled",{"_index":854,"title":{},"body":{"index.html":{}}}],["enables",{"_index":800,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":188,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["enough",{"_index":150,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["enter",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":130,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["entry",{"_index":1020,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":776,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":935,"title":{},"body":{"index.html":{}}}],["equal",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":380,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["error.log",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errors",{"_index":951,"title":{},"body":{"index.html":{}}}],["eslint",{"_index":451,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["eslint/interface",{"_index":455,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["especially",{"_index":186,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["established",{"_index":88,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["event",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["examine",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":157,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["examples",{"_index":362,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["examples](https://github.com/emundo/emubot",{"_index":484,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["exceeds",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exchange",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exchangeability",{"_index":799,"title":{},"body":{"index.html":{}}}],["execute",{"_index":436,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["executionindex",{"_index":152,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["executionindices",{"_index":160,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["exemplar",{"_index":906,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["exemplary",{"_index":31,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["exist",{"_index":471,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["existing",{"_index":908,"title":{},"body":{"index.html":{}}}],["expected",{"_index":1135,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["expects",{"_index":1136,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["experienced",{"_index":802,"title":{},"body":{"index.html":{}}}],["export",{"_index":95,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["express",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["extended",{"_index":364,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["extends",{"_index":282,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{}}}],["extensive",{"_index":861,"title":{},"body":{"index.html":{}}}],["external",{"_index":370,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["facebook",{"_index":304,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["facebookadapter",{"_index":30,"title":{"classes/FacebookAdapter.html":{}},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookattachmentmessage",{"_index":1022,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookbutton",{"_index":1024,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookbuttonattachment",{"_index":1025,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookchatconfig",{"_index":324,"title":{"interfaces/FacebookChatConfig.html":{}},"body":{"interfaces/FacebookChatConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookfallbackattachment",{"_index":1026,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookgenerictemplate",{"_index":1027,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookimageattachment",{"_index":1028,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebooklocationattachment",{"_index":1029,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookmessage",{"_index":1030,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookmessaging",{"_index":313,"title":{},"body":{"classes/FacebookAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["facebookpostbackbutton",{"_index":1031,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookpostrequest",{"_index":1032,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookpostresponse",{"_index":1033,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookquickreply",{"_index":1034,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookquickreplymessage",{"_index":1035,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookresponseconfirmation",{"_index":1036,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebooktextmessage",{"_index":1038,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebooktextquickreply",{"_index":1039,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookurlattachment",{"_index":1040,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["facebookurlbutton",{"_index":1041,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["failed",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failedtoconnect",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fallback",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fallbacks",{"_index":427,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["false",{"_index":1143,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["faster",{"_index":156,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["fastest",{"_index":404,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["february",{"_index":1180,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["feedback",{"_index":352,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["few",{"_index":820,"title":{},"body":{"index.html":{}}}],["field",{"_index":602,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["fiete",{"_index":970,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":914,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["final",{"_index":433,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["find",{"_index":363,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["findbestnlpanswerfortextrequest",{"_index":692,"title":{},"body":{"coverage.html":{}}}],["first",{"_index":144,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["first_agent",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixed",{"_index":187,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["flag",{"_index":940,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["follow",{"_index":913,"title":{},"body":{"index.html":{}}}],["following",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forecastlocality",{"_index":591,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["forecaststartdatetime",{"_index":600,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["fork",{"_index":406,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["form",{"_index":582,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":472,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":208,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["from/to",{"_index":444,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["fulfillment",{"_index":1042,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["function",{"_index":82,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["functionality",{"_index":138,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/FacebookAdapter.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":17,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["further",{"_index":375,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["furthermore",{"_index":909,"title":{},"body":{"index.html":{}}}],["future",{"_index":412,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["gcp",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["general",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generalized",{"_index":1097,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["generated",{"_index":337,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/typealiases.html":{}}}],["generateid",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["generic",{"_index":409,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["getallcontexts",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["getappsecretproof",{"_index":634,"title":{},"body":{"coverage.html":{}}}],["getconfig",{"_index":274,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"coverage.html":{}}}],["getconfig()).platform.chat.constructor",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig()).platform.nlp.constructor",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().interceptors.chattocore",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().interceptors.nlptocore",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().interceptors.nlptonlp",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().platform.nlp",{"_index":298,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["getconfig().platform.nlp.agents[agentname].token",{"_index":278,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["getconfig().platform.nlp.agents[agentname].url",{"_index":279,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["getcontext",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["getinstance",{"_index":474,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["getorderedagents",{"_index":698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getport",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["getting",{"_index":784,"title":{"index.html":{}},"body":{}}],["given",{"_index":575,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["goal",{"_index":844,"title":{},"body":{"index.html":{}}}],["google",{"_index":175,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{},"miscellaneous/typealiases.html":{}}}],["gorholt",{"_index":975,"title":{},"body":{"index.html":{}}}],["graph",{"_index":330,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["group",{"_index":402,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["guidelines",{"_index":961,"title":{},"body":{"index.html":{}}}],["handle",{"_index":84,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["handlecustompayload",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["handled",{"_index":25,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["handlemessage",{"_index":438,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["handlemessage(userid",{"_index":439,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["handlemessageafterthirdinterceptor",{"_index":686,"title":{},"body":{"coverage.html":{}}}],["handlemessagedependingonmessagetype",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["handlereceivedmessage",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlereceivedmessageincore",{"_index":688,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handlerequest",{"_index":81,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["handlerequests",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["handleresponses",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["handles",{"_index":366,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["handletextrequest",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":384,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["handlingbetweencoreandchatadapter",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash_mismatch",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["here",{"_index":365,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here](https://github.com/emundo/emubot",{"_index":450,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["high",{"_index":149,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["higher",{"_index":155,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["highly",{"_index":858,"title":{},"body":{"index.html":{}}}],["hopefully",{"_index":868,"title":{},"body":{"index.html":{}}}],["host",{"_index":835,"title":{},"body":{"index.html":{}}}],["http://localhost:5005",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https",{"_index":911,"title":{},"body":{"index.html":{}}}],["https://api.dialogflow.com/v1/query?v=20150910",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://developers.facebook.com/docs/messenger",{"_index":1165,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["https://graph.facebook.com",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://slack.com/api/chat.postmessage",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.npmjs.com/package/winston#logging",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.petbarn.com.au/petspot/app/uploads/2019/01/kitten",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.url",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["i.e",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ichatadapter",{"_index":308,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["id",{"_index":1120,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["idattachment",{"_index":1043,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["identifier",{"_index":174,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["identifiers",{"_index":866,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["identify",{"_index":1186,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ifacebookchatconfig",{"_index":326,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["image",{"_index":782,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["images",{"_index":1145,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["immediately",{"_index":461,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["implement",{"_index":14,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["implementated",{"_index":47,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["implementation",{"_index":32,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["implemented",{"_index":11,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["implementing",{"_index":491,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["implements",{"_index":203,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["import",{"_index":92,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["important",{"_index":12,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["improving",{"_index":848,"title":{},"body":{"index.html":{}}}],["include",{"_index":16,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["included",{"_index":853,"title":{},"body":{"index.html":{}}}],["includes",{"_index":8,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["incoming",{"_index":77,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["incominggetrequest",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incomingpostrequest",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incomplete",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incorporating",{"_index":850,"title":{},"body":{"index.html":{}}}],["index",{"_index":33,"title":{"index.html":{}},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1107,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["individually",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["individuals",{"_index":870,"title":{},"body":{"index.html":{}}}],["influence",{"_index":814,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["information",{"_index":141,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["init",{"_index":36,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["init(handlerequest",{"_index":68,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["initcore",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["initial",{"_index":1133,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["initialize",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializelogging",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializes",{"_index":74,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["initwebhook",{"_index":309,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initwebhook(async",{"_index":319,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["inlpadapter",{"_index":266,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["input",{"_index":435,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["inside",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["install",{"_index":885,"title":{},"body":{"index.html":{}}}],["instance",{"_index":478,"title":{},"body":{"classes/MirrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["instanttime",{"_index":593,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["instead",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insufficient",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integrated",{"_index":335,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["intent",{"_index":583,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["intentname",{"_index":584,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["interceptor",{"_index":114,"title":{"interfaces/Interceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["interceptor]{@link",{"_index":485,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["interceptorconfig",{"_index":219,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["interceptors",{"_index":224,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["interceptors/interceptor",{"_index":115,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["intercepts",{"_index":416,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["interchangeably",{"_index":810,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"overview.html":{}}}],["interfaces/interceptor.html",{"_index":486,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["internal",{"_index":209,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["internally",{"_index":26,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["internaluserid",{"_index":254,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["invalid",{"_index":373,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["isattachmentrequest",{"_index":616,"title":{},"body":{"coverage.html":{}}}],["isfallbackintent",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfromadmin",{"_index":1105,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["issue",{"_index":1148,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["istextrequest",{"_index":618,"title":{},"body":{"coverage.html":{}}}],["iswebhookauthenticated",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["itself",{"_index":921,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["jpg",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["json",{"_index":1138,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["jsons",{"_index":288,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["keep",{"_index":496,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["key",{"_index":199,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{}}}],["kind",{"_index":592,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["kitten",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["kittens",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["knowledge",{"_index":847,"title":{},"body":{"index.html":{}}}],["language",{"_index":195,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["languagecode",{"_index":193,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["large",{"_index":401,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["larger",{"_index":1131,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["left",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["less",{"_index":801,"title":{},"body":{"index.html":{}}}],["level",{"_index":952,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":962,"title":{},"body":{"index.html":{}}}],["license.md",{"_index":968,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":964,"title":{},"body":{"index.html":{}}}],["lifespan",{"_index":528,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["lifespan]{@link",{"_index":529,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["lifespaninminutes",{"_index":245,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["limitations",{"_index":1127,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["line",{"_index":453,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["lines",{"_index":821,"title":{},"body":{"index.html":{}}}],["links",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["listening",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["literal",{"_index":1083,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["loading",{"_index":1091,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":900,"title":{},"body":{"index.html":{}}}],["locality",{"_index":589,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["locally",{"_index":903,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["location",{"_index":391,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["lodash",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":374,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["log_messages",{"_index":672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logging",{"_index":204,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":815,"title":{},"body":{"index.html":{}}}],["logically",{"_index":838,"title":{},"body":{"index.html":{}}}],["loglevel",{"_index":714,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loglevel=\"error",{"_index":955,"title":{},"body":{"index.html":{}}}],["logs",{"_index":946,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["longer",{"_index":1182,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["look",{"_index":181,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lower",{"_index":167,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["lüer",{"_index":971,"title":{},"body":{"index.html":{}}}],["machine",{"_index":901,"title":{},"body":{"index.html":{}}}],["mainly",{"_index":419,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["maintaining",{"_index":822,"title":{},"body":{"index.html":{}}}],["make",{"_index":890,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["makerequest",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["makes",{"_index":825,"title":{},"body":{"index.html":{}}}],["makesuccess",{"_index":534,"title":{},"body":{"interfaces/NlpAdapter.html":{},"coverage.html":{}}}],["making",{"_index":424,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["manipulate",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many",{"_index":869,"title":{},"body":{"index.html":{}}}],["mapped",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapserialized",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["mark",{"_index":166,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["markdown",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["markup",{"_index":944,"title":{},"body":{"index.html":{}}}],["match",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":99,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxim",{"_index":972,"title":{},"body":{"index.html":{}}}],["meaning",{"_index":817,"title":{},"body":{"index.html":{}}}],["means",{"_index":851,"title":{},"body":{"index.html":{}}}],["message",{"_index":20,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message.sender.id",{"_index":321,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["message.user",{"_index":567,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["messagehandlingincore",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":78,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messages/quick",{"_index":1167,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["messaging",{"_index":52,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messaginguserid",{"_index":1093,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["messenger",{"_index":806,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["messengeruserid",{"_index":96,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":1044,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["method",{"_index":361,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["methods",{"_index":34,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["mid",{"_index":842,"title":{},"body":{"index.html":{}}}],["migrate",{"_index":234,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["minimal",{"_index":9,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["minimalacceptablescore",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minscore",{"_index":165,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miracle",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mirror",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mirrorinterceptor",{"_index":457,"title":{"classes/MirrorInterceptor.html":{}},"body":{"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["mirrorinterceptor.getinstance",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mirrorinterceptor`s",{"_index":483,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["mirrorinterceptors",{"_index":460,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["mirrorinterface",{"_index":421,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["miscellaneous",{"_index":775,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["missingappsecret",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["missingpageaccesstoken",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["missingverifytoken",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model/facebookpostrequest",{"_index":314,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["model/nlpadapterresponse",{"_index":273,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["model/slackrequest",{"_index":560,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["model/slackresponse",{"_index":562,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["model/textrequest",{"_index":267,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["modifications",{"_index":1139,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":980,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":240,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["morethanoneresponse",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiple",{"_index":125,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["my_first_agent",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["my_second_agent",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":59,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":517,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["naming",{"_index":494,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["native",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["natural",{"_index":812,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":813,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":1149,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["new",{"_index":117,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":168,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nlp",{"_index":107,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nlp_adapter/inlpadapter",{"_index":110,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["nlp_adapter/model/nlpadapterresponse",{"_index":113,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["nlpadapter",{"_index":109,"title":{"interfaces/NlpAdapter.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlpconfig",{"_index":216,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nlpcontext",{"_index":1045,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpcustompayload",{"_index":1046,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpcustompayloadbutton",{"_index":1047,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpcustompayloadquickreply",{"_index":1048,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpimage",{"_index":1049,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpmessage",{"_index":1050,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nlpparameters",{"_index":1051,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpquickreplies",{"_index":1052,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpresponse",{"_index":112,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["nlpresponsedata",{"_index":1053,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlpstatus",{"_index":272,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["nlptext",{"_index":1055,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlptextrequestresult",{"_index":1056,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlptochat",{"_index":1141,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["nlptocore",{"_index":221,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlptonlp",{"_index":222,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlu",{"_index":540,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["nlu.readthedocs.io/en/latest",{"_index":612,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["nlu](https://rasa.com/docs/rasa",{"_index":548,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["nlu](https://snips",{"_index":611,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["no_agents",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noagent",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nopagesubscriptionevent",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noresponse",{"_index":350,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["noresponsenotpossible",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["note",{"_index":1178,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["notion",{"_index":550,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["nourlprovided",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nowebsocketerror",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":886,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":196,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occur",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occured",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":788,"title":{},"body":{"index.html":{}}}],["offering",{"_index":867,"title":{},"body":{"index.html":{}}}],["one",{"_index":145,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":190,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["openchannel",{"_index":557,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["openchannel(response.messengeruserid",{"_index":569,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["operating",{"_index":927,"title":{},"body":{"index.html":{}}}],["operations",{"_index":464,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["optional",{"_index":61,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["options",{"_index":1159,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["original",{"_index":1112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["otherquickreply",{"_index":1058,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["otherwise",{"_index":420,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["out",{"_index":959,"title":{},"body":{"index.html":{}}}],["outside",{"_index":43,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["over",{"_index":910,"title":{},"body":{"index.html":{}}}],["overhead",{"_index":794,"title":{},"body":{"index.html":{}}}],["overview",{"_index":981,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":749,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":334,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["page_access_token",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pageaccesstoken",{"_index":331,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["pagesubscriptionevent",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":97,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["parameter",{"_index":1059,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["paris",{"_index":578,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["parse",{"_index":580,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["parsed",{"_index":603,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["parser",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["parts",{"_index":923,"title":{},"body":{"index.html":{}}}],["passed",{"_index":85,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["passes",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paste",{"_index":881,"title":{},"body":{"index.html":{}}}],["path",{"_index":210,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["path/to/your/dialogflowapitoken1.json",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path/to/your/dialogflowapitoken2.json",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":410,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["payload.type",{"_index":376,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["payloadnotverified",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":852,"title":{},"body":{"index.html":{}}}],["perform",{"_index":468,"title":{},"body":{"classes/MirrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["performing",{"_index":463,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["person",{"_index":1108,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["personal",{"_index":808,"title":{},"body":{"index.html":{}}}],["phrase",{"_index":576,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["ping",{"_index":1089,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["pip",{"_index":929,"title":{},"body":{"index.html":{}}}],["pipeline",{"_index":348,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["platform",{"_index":22,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["platform's",{"_index":1119,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["platform/reference/send",{"_index":1175,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["platform/send",{"_index":1166,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["platformchatfacebook",{"_index":657,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformchatslack",{"_index":659,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlpdialogflow",{"_index":661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlpdialogflowv2",{"_index":663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlprasa",{"_index":665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlpsnips",{"_index":667,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platforms",{"_index":179,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["please",{"_index":500,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":507,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["pointing",{"_index":185,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["points",{"_index":1122,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["port",{"_index":218,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/variables.html":{}}}],["portal",{"_index":333,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["possible",{"_index":390,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["post",{"_index":54,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["postbackbutton",{"_index":1060,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["postcontexts",{"_index":248,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["postcontexts(internaluserid",{"_index":518,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["postcontexts(this",{"_index":260,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["posting",{"_index":533,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["posts",{"_index":521,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["predefined",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefer",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":456,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["preprocessed",{"_index":526,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["present",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":328,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"index.html":{}}}],["primary_agent_index",{"_index":694,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["primer",{"_index":942,"title":{},"body":{"index.html":{}}}],["privacy",{"_index":833,"title":{},"body":{"index.html":{}}}],["probability",{"_index":586,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["problem",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process",{"_index":132,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["process.env.logginglevel",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":80,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["processing",{"_index":349,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["programming",{"_index":846,"title":{},"body":{"index.html":{}}}],["project",{"_index":963,"title":{},"body":{"index.html":{}}}],["project1",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project2",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project_id",{"_index":173,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["projects",{"_index":177,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{},"miscellaneous/typealiases.html":{}}}],["promise",{"_index":67,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["promise.resolve(createresponse(message",{"_index":488,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["promise.resolve(new",{"_index":487,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["properties",{"_index":243,"title":{},"body":{"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["protect",{"_index":832,"title":{},"body":{"index.html":{}}}],["protecting",{"_index":855,"title":{},"body":{"index.html":{}}}],["protection",{"_index":849,"title":{},"body":{"index.html":{}}}],["provide",{"_index":351,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":289,"title":{},"body":{"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":139,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["proxy",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pseudonymization",{"_index":383,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["pseudonymize",{"_index":865,"title":{},"body":{"index.html":{}}}],["pseudonymized",{"_index":445,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["public",{"_index":244,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["published",{"_index":907,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":241,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["purposes",{"_index":205,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["python3",{"_index":931,"title":{},"body":{"index.html":{}}}],["queries",{"_index":134,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["query",{"_index":143,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["queued",{"_index":1168,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["quick",{"_index":1155,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["quickreplies",{"_index":781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["quite",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":938,"title":{},"body":{"index.html":{}}}],["raphael",{"_index":976,"title":{},"body":{"index.html":{}}}],["rasa",{"_index":539,"title":{},"body":{"classes/RasaAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rasa_test",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rasaadapter",{"_index":537,"title":{"classes/RasaAdapter.html":{}},"body":{"classes/RasaAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rasaentity",{"_index":1061,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rasaintent",{"_index":1063,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rasaparseresponse",{"_index":1064,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rasaresponse",{"_index":1065,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["rasatextresponse",{"_index":1066,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["receive",{"_index":1169,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["received",{"_index":392,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["receives",{"_index":905,"title":{},"body":{"index.html":{}}}],["receiving/sending",{"_index":443,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["recipient",{"_index":1177,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["recipient.phone_number",{"_index":1185,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["recipient.user_ref",{"_index":1184,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["recipient_id",{"_index":1183,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["recognition",{"_index":829,"title":{},"body":{"index.html":{}}}],["recommend",{"_index":859,"title":{},"body":{"index.html":{}}}],["recommended",{"_index":932,"title":{},"body":{"index.html":{}}}],["reduce",{"_index":845,"title":{},"body":{"index.html":{}}}],["reducing",{"_index":793,"title":{},"body":{"index.html":{}}}],["reference",{"_index":917,"title":{},"body":{"index.html":{}}}],["referencing",{"_index":1121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["regarding",{"_index":142,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["relevant",{"_index":178,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["remains",{"_index":379,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["remove",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["repeatedly",{"_index":1123,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["replies",{"_index":1156,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["reply",{"_index":1160,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["repo",{"_index":407,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["repository",{"_index":856,"title":{},"body":{"index.html":{}}}],["request",{"_index":69,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/SnipsAdapter.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["requestattachment",{"_index":1067,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["requests",{"_index":212,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["require",{"_index":1125,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["required",{"_index":40,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["requirements.txt",{"_index":939,"title":{},"body":{"index.html":{}}}],["requirements/functions",{"_index":10,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["resp",{"_index":570,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["respective",{"_index":55,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":62,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["response.messengeruserid",{"_index":323,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["responses",{"_index":86,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["responsetypenotimplemented",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restrictive",{"_index":415,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["restructured",{"_index":943,"title":{},"body":{"index.html":{}}}],["result",{"_index":98,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":100,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":389,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["return",{"_index":277,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":381,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["returnerroraschatadapterresponse",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["returning",{"_index":354,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["returns",{"_index":66,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["routes",{"_index":359,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["run",{"_index":895,"title":{},"body":{"index.html":{}}}],["running",{"_index":904,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":492,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["save",{"_index":386,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["saved",{"_index":1118,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["score",{"_index":148,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["scorebelowthreshold",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchweatherforecast",{"_index":585,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["second_agent",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["section",{"_index":882,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["see",{"_index":29,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":515,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["selection",{"_index":1164,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["self",{"_index":90,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["send",{"_index":41,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sending",{"_index":446,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sendingmessagetouser",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sendmultipleresponses",{"_index":315,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["sendmultipleresponses([response",{"_index":322,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["sendresponse",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["sends",{"_index":211,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["sendsingletextrequest",{"_index":249,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["sendsingletextrequest(textrequest",{"_index":522,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["sendsingletextrequest(this",{"_index":263,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["sendtextrequest",{"_index":270,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sendtextrequest(textrequest",{"_index":551,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["sendtextresponse",{"_index":556,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["sendtextresponse(resp",{"_index":571,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["sendtonextagent",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sent",{"_index":64,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["separate",{"_index":837,"title":{},"body":{"index.html":{}}}],["separated",{"_index":839,"title":{},"body":{"index.html":{}}}],["separating",{"_index":830,"title":{},"body":{"index.html":{}}}],["separation",{"_index":823,"title":{},"body":{"index.html":{}}}],["server",{"_index":225,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["server.com",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serverconfig",{"_index":217,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":122,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":191,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["session",{"_index":87,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["set",{"_index":343,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setconfig",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["setcontexts",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlogmessages",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["setmessages",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["setport",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["settings",{"_index":344,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["setup",{"_index":303,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"index.html":{}}}],["setup]{@link",{"_index":317,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{}}}],["severity",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha1",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":79,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["signaling",{"_index":194,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["signals",{"_index":153,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["signature",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["simple",{"_index":826,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["simplest",{"_index":897,"title":{},"body":{"index.html":{}}}],["simply",{"_index":1114,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["single",{"_index":524,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{}}}],["singlenlpparameter",{"_index":1068,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["size",{"_index":1128,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["slack",{"_index":807,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["slack/events",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["slackadapter",{"_index":552,"title":{"classes/SlackAdapter.html":{}},"body":{"classes/SlackAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slackerrorresponse",{"_index":1069,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["slackmessage",{"_index":1071,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["slackopenchannelresponse",{"_index":1073,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["slackrequest",{"_index":559,"title":{},"body":{"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["slackresponse",{"_index":561,"title":{},"body":{"classes/SlackAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["slacktextresponse",{"_index":1074,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["slightly",{"_index":863,"title":{},"body":{"index.html":{}}}],["slotname",{"_index":590,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["slots",{"_index":588,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["small",{"_index":871,"title":{},"body":{"index.html":{}}}],["smalltalk",{"_index":135,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["snips",{"_index":574,"title":{},"body":{"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["snips/datetime",{"_index":599,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["snips_test",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snipsadapter",{"_index":572,"title":{"classes/SnipsAdapter.html":{}},"body":{"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["snipsentity",{"_index":1075,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snipsintent",{"_index":1077,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snipsresponse",{"_index":1078,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["solution",{"_index":405,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["solutions",{"_index":398,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["something",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soon",{"_index":233,"title":{},"body":{"classes/DialogflowAdapter.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["spahn",{"_index":979,"title":{},"body":{"index.html":{}}}],["specialized",{"_index":394,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["specific",{"_index":23,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":506,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["specify",{"_index":104,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["speech",{"_index":828,"title":{},"body":{"index.html":{}}}],["spent",{"_index":875,"title":{},"body":{"index.html":{}}}],["sphinx",{"_index":920,"title":{},"body":{"index.html":{}}}],["sphinxenv",{"_index":936,"title":{},"body":{"index.html":{}}}],["sphinxenv/bin/activate",{"_index":937,"title":{},"body":{"index.html":{}}}],["src/.../botframeworkinterfacemessage.ts",{"_index":991,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../chatadapterrequest.ts",{"_index":990,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../chatadapterresponse.ts",{"_index":996,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../configfacebookdf2.ts",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../configfacebookrasa.ts",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../configslackdf2.ts",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../configtypes.ts",{"_index":986,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dialogflowconfig.ts",{"_index":1007,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dialogflowcontextresponse.ts",{"_index":1009,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dialogflowstatus.ts",{"_index":1018,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../dialogflowtextresponse.ts",{"_index":778,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../facebookpostrequest.ts",{"_index":1021,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../facebookpostresponse.ts",{"_index":1023,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../facebookresponseconfirmation.ts",{"_index":1037,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../findbestnlpanswerfortextrequest.ts",{"_index":1054,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../getadapter.ts",{"_index":985,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../getconfig.ts",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getinterceptors.ts",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getorderedagents.ts",{"_index":988,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../interceptorconfig.ts",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.ts",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logmessages.ts",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../messages.ts",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../nlpadapterresponse.ts",{"_index":993,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../platformchatfacebook.ts",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformchatslack.ts",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlpdialogflow.ts",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlpdialogflowv2.ts",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlprasa.ts",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlpsnips.ts",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../rasaresponse.ts",{"_index":1062,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../response.ts",{"_index":1057,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../serverconfig.ts",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../slackrequest.ts",{"_index":1072,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../slackresponse.ts",{"_index":1070,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../snipstextresponse.ts",{"_index":1076,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../textrequest.ts",{"_index":1079,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../webhook.ts",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/chat_adapter/chatadapterrequest.ts",{"_index":615,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/chatadapterresponse.ts",{"_index":1144,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/facebook/communication/convertrequest.ts",{"_index":623,"title":{},"body":{"coverage.html":{}}}],["src/chat_adapter/facebook/communication/convertresponse.ts",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["src/chat_adapter/facebook/communication/sendresponses.ts",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["src/chat_adapter/facebook/communication/webhook.ts",{"_index":636,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/chat_adapter/facebook/facebookadapter.ts",{"_index":302,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["src/chat_adapter/facebook/facebookadapter.ts:18",{"_index":307,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/chat_adapter/facebook/facebookadapter.ts:32",{"_index":306,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/chat_adapter/facebook/facebookconfig.ts",{"_index":325,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"coverage.html":{}}}],["src/chat_adapter/facebook/model/facebookpostrequest.ts",{"_index":1172,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/facebook/model/facebookpostresponse.ts",{"_index":1173,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/facebook/model/facebookresponseconfirmation.ts",{"_index":1174,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/ichatadapter.ts",{"_index":6,"title":{},"body":{"interfaces/ChatAdapter.html":{},"coverage.html":{}}}],["src/chat_adapter/ichatadapter.ts:19",{"_index":73,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["src/chat_adapter/ichatadapter.ts:34",{"_index":39,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["src/chat_adapter/slack/communication/convertrequest.ts",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["src/chat_adapter/slack/communication/convertresponse.ts",{"_index":647,"title":{},"body":{"coverage.html":{}}}],["src/chat_adapter/slack/communication/webhook.ts",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["src/chat_adapter/slack/model/slackrequest.ts",{"_index":1191,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/slack/model/slackresponse.ts",{"_index":1190,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/chat_adapter/slack/slackadapter.ts",{"_index":553,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["src/chat_adapter/slack/slackadapter.ts:16",{"_index":555,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["src/chat_adapter/slack/slackadapter.ts:30",{"_index":554,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["src/chat_adapter/utils.ts",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["src/configuration/configfacebookdf2.ts",{"_index":652,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/configfacebookrasa.ts",{"_index":653,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/configslackdf2.ts",{"_index":654,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/configtypes.ts",{"_index":102,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/configuration/interceptorconfig.ts",{"_index":655,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/platformchatfacebook.ts",{"_index":656,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/platformchatslack.ts",{"_index":658,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/platformnlpdialogflow.ts",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/platformnlpdialogflowv2.ts",{"_index":662,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/platformnlprasa.ts",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/platformnlpsnips.ts",{"_index":666,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/configuration/serverconfig.ts",{"_index":668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/constants/logmessages.ts",{"_index":669,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/constants/messages.ts",{"_index":673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.ts",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["src/core/getadapter.ts",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/getconfig.ts",{"_index":679,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/getinterceptors.ts",{"_index":684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/handlereceivedmessage.ts",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["src/core/model/response.ts",{"_index":1187,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/core/utils/findbestnlpanswerfortextrequest.ts",{"_index":691,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/core/utils/generateid.ts",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["src/core/utils/getorderedagents.ts",{"_index":697,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/core/utils/responseutils.ts",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["src/core/utils/transformmessagetype.ts",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["src/interceptors/botframeworkinterfacemessage.ts",{"_index":1134,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/interceptors/interceptor.ts",{"_index":345,"title":{},"body":{"interfaces/Interceptor.html":{},"coverage.html":{}}}],["src/interceptors/interceptor.ts:68",{"_index":440,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["src/interceptors/mirrorinterceptor.ts",{"_index":458,"title":{},"body":{"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/mirrorinterceptor.ts:24",{"_index":475,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["src/interceptors/mirrorinterceptor.ts:30",{"_index":479,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["src/logger.ts",{"_index":712,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":889,"title":{},"body":{"index.html":{}}}],["src/nlp_adapter/communication/deletecontexts.ts",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/communication/postcontexts.ts",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/convertstringarraytonlpcontexts.ts",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflow/communication/deletecontexts.ts",{"_index":725,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflow/communication/postcontextsfromserver.ts",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflow/communication/responseconverters.ts",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflow/communication/sendtextrequest.ts",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflow/dialogflowadapter.ts",{"_index":228,"title":{},"body":{"classes/DialogflowAdapter.html":{},"coverage.html":{}}}],["src/nlp_adapter/dialogflow/dialogflowadapter.ts:22",{"_index":252,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/nlp_adapter/dialogflow/dialogflowadapter.ts:24",{"_index":256,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/nlp_adapter/dialogflow/dialogflowadapter.ts:35",{"_index":259,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/nlp_adapter/dialogflow/dialogflowadapter.ts:47",{"_index":262,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/nlp_adapter/dialogflow/dialogflowadapter.ts:60",{"_index":265,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/nlp_adapter/dialogflow/model/dialogflowcontextresponse.ts",{"_index":1170,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/dialogflow/model/dialogflowstatus.ts",{"_index":1171,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/dialogflow/model/dialogflowtextresponse.ts",{"_index":779,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/dialogflowv2/communication/deletecontexts.ts",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflowv2/communication/getcontexts.ts",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflowv2/communication/postcontextsfromserver.ts",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflowv2/communication/responseconverters.ts",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflowv2/communication/sendtextrequest.ts",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowconfig.ts",{"_index":281,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts",{"_index":287,"title":{},"body":{"classes/DialogflowV2Adapter.html":{},"coverage.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:22",{"_index":291,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:24",{"_index":292,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:38",{"_index":294,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:54",{"_index":295,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:69",{"_index":296,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/nlp_adapter/inlpadapter.ts",{"_index":490,"title":{},"body":{"interfaces/NlpAdapter.html":{},"coverage.html":{}}}],["src/nlp_adapter/inlpadapter.ts:28",{"_index":504,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/nlp_adapter/inlpadapter.ts:44",{"_index":514,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/nlp_adapter/inlpadapter.ts:61",{"_index":520,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/nlp_adapter/inlpadapter.ts:77",{"_index":523,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/nlp_adapter/model/nlpadapterresponse.ts",{"_index":1137,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/model/textrequest.ts",{"_index":1193,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/rasa/communication/responseconverters.ts",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/rasa/communication/sendtextrequest.ts",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/rasa/model/rasaresponse.ts",{"_index":1189,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/rasa/rasaadapter.ts",{"_index":538,"title":{},"body":{"classes/RasaAdapter.html":{},"coverage.html":{}}}],["src/nlp_adapter/rasa/rasaadapter.ts:20",{"_index":542,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/nlp_adapter/rasa/rasaadapter.ts:22",{"_index":543,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/nlp_adapter/rasa/rasaadapter.ts:29",{"_index":544,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/nlp_adapter/rasa/rasaadapter.ts:41",{"_index":545,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/nlp_adapter/rasa/rasaadapter.ts:49",{"_index":546,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/nlp_adapter/snips/communication/responseconverters.ts",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/snips/communication/sendtextrequest.ts",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["src/nlp_adapter/snips/model/snipstextresponse.ts",{"_index":1192,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/nlp_adapter/snips/snipsadapter.ts",{"_index":573,"title":{},"body":{"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["src/nlp_adapter/snips/snipsadapter.ts:52",{"_index":606,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/nlp_adapter/snips/snipsadapter.ts:54",{"_index":607,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/nlp_adapter/snips/snipsadapter.ts:61",{"_index":608,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/nlp_adapter/snips/snipsadapter.ts:73",{"_index":609,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/nlp_adapter/snips/snipsadapter.ts:81",{"_index":610,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["stage",{"_index":448,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["standard",{"_index":1110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["standardized",{"_index":795,"title":{},"body":{"index.html":{}}}],["start",{"_index":878,"title":{},"body":{"index.html":{}}}],["started",{"_index":785,"title":{"index.html":{}},"body":{}}],["state",{"_index":371,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{}}}],["statements",{"_index":614,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":473,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["stating",{"_index":1116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stdout",{"_index":948,"title":{},"body":{"index.html":{}}}],["steps",{"_index":922,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["stop",{"_index":347,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["stored",{"_index":1113,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":71,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["submit",{"_index":1147,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["subscription",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["success",{"_index":535,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["success:false",{"_index":512,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["success:true",{"_index":510,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["successful",{"_index":353,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["such",{"_index":532,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["suffice",{"_index":422,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["sufficient",{"_index":466,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["suggested",{"_index":1157,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["suggestions",{"_index":1161,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["suitable",{"_index":355,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["supplied",{"_index":601,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["support",{"_index":549,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["supported",{"_index":393,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sure",{"_index":891,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["switching",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["systems",{"_index":928,"title":{},"body":{"index.html":{}}}],["t",{"_index":119,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["tabea",{"_index":978,"title":{},"body":{"index.html":{}}}],["table",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":180,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["takes",{"_index":434,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["tasked",{"_index":131,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["template",{"_index":1086,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["term",{"_index":843,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":887,"title":{},"body":{"index.html":{}}}],["terms",{"_index":499,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["test",{"_index":857,"title":{},"body":{"index.html":{}}}],["text",{"_index":385,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["text_request",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["texthandlinginit",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textrequest",{"_index":264,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["textrequestresult",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textrequestresult.score",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["texttoresponse",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["thedetection",{"_index":146,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["think",{"_index":399,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["third",{"_index":162,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["three",{"_index":158,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["threshold",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["through",{"_index":89,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["time",{"_index":873,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["token",{"_index":170,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":238,"title":{},"body":{"classes/DialogflowAdapter.html":{},"miscellaneous/variables.html":{}}}],["tonlpmessage",{"_index":728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tonlpstatus",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["tonlptextresponse",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["transform",{"_index":19,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["transformation",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformchatadapterrequestresponsetonlpresponse",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["transformed",{"_index":1096,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["transforming",{"_index":367,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["transformnlpresponsetochatadapterresponse",{"_index":706,"title":{},"body":{"coverage.html":{}}}],["transformtochatadapterresponse",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["transformtochatadapterresponseerror",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transports",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigger",{"_index":1115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["true",{"_index":536,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/typealiases.html":{}}}],["try",{"_index":495,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":896,"title":{},"body":{"index.html":{}}}],["two",{"_index":950,"title":{},"body":{"index.html":{}}}],["type",{"_index":60,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":983,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":395,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{}}}],["typescript",{"_index":454,"title":{},"body":{"interfaces/Interceptor.html":{},"dependencies.html":{}}}],["typings",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u",{"_index":476,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["ubuntu",{"_index":926,"title":{},"body":{"index.html":{}}}],["unable",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unabletoaddcontexts",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unabletosendresponse",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined/invalid",{"_index":1103,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["under",{"_index":965,"title":{},"body":{"index.html":{}}}],["understand",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["units",{"_index":840,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedattachment",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedbuttonerror",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedcustompayloaderror",{"_index":1291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedformat",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedmessagetype",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsure",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":893,"title":{},"body":{"index.html":{}}}],["updated",{"_index":290,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["upon",{"_index":1090,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["url",{"_index":184,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["urlattachment",{"_index":1080,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["urlattachments",{"_index":1124,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["urlbutton",{"_index":1081,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["usage",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usages",{"_index":1152,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["use",{"_index":49,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["usecases",{"_index":470,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["used",{"_index":103,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":831,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":65,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["userconnectedto",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdefinedlogging.log",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":441,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["usernotfoundorcreatable",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":403,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["uses",{"_index":236,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":189,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["usual",{"_index":44,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["usually",{"_index":15,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["utility",{"_index":140,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/typealiases.html":{}}}],["v1",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v2",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v3.3",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":925,"title":{},"body":{"index.html":{}}}],["validchatadapterrequesttypes",{"_index":1082,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["value",{"_index":251,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":387,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["variable",{"_index":641,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1194,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vary",{"_index":48,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["verbose",{"_index":953,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verfified",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verified",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":339,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["verify_token",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifyauthentication",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["verifytoken",{"_index":338,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":231,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["very",{"_index":819,"title":{},"body":{"index.html":{}}}],["via",{"_index":360,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["video",{"_index":1085,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["virtual",{"_index":934,"title":{},"body":{"index.html":{}}}],["virtualenv",{"_index":933,"title":{},"body":{"index.html":{}}}],["visible",{"_index":1188,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["visualize",{"_index":1158,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["void",{"_index":72,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["want",{"_index":13,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["warning",{"_index":229,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["warnings",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":46,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["weather",{"_index":577,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["webhook",{"_index":207,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["webhook_path",{"_index":214,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhook_verification",{"_index":642,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["webhooklistening",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhooknotverfied",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhookverified",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webserver",{"_index":75,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["website",{"_index":809,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["websocket",{"_index":50,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["websocketerror",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weird",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["well",{"_index":949,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["went",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whether",{"_index":898,"title":{},"body":{"index.html":{},"miscellaneous/typealiases.html":{}}}],["whilst",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston",{"_index":773,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.createlogger",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.transports.file",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wish",{"_index":467,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["without",{"_index":462,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["work",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["workflow",{"_index":45,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["works",{"_index":899,"title":{},"body":{"index.html":{}}}],["write",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["written",{"_index":947,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_app_secret",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_dialogflow_token_from_agent_1",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_dialogflow_token_from_agent_2",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_page_access_token",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_secret",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_secret_token",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_verify_token",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourself",{"_index":400,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ChatAdapter.html":{"url":"interfaces/ChatAdapter.html","title":"interface - ChatAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChatAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat_adapter/IChatAdapter.ts\n        \n\n            \n                Description\n            \n            \n                ChatAdapter includes the minimal requirements/functions that have to be implemented by every ChatAdapter. This\ninterface is important if you want to implement your own ChatAdapter.\nUsually you want to include functions to e.g. transform a message from a ChatAdapterResponse to the platform-specific\nformat. This is handled internally by the distinctive adapter. See FacebookAdapter for an exemplary implementation.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    contactClient\n                                \n                                \n                                    init\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \ncontactClient(response: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/chat_adapter/IChatAdapter.ts:34\n                \n            \n\n\n            \n                \n                    Required to send a message to the client outside of the usual workflow.\nThe way this is implementated can vary. You could e.g. use a websocket or, if allowed by the messaging platform,\ndirectly post to the respective API.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A ChatAdapterResponse with the content that should be sent to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(handleRequest: (request: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/chat_adapter/IChatAdapter.ts:19\n                \n            \n\n\n            \n                \n                    Initializes a webserver and awaits incoming messages that shall be processed. A handleRequest function that\ndetermines how you want to handle incoming messages has to be passed to the init() function. handleRequest\nshould handle responses to the user in a session established by the client through an incoming message.\nUse contactClient if you want to send a message outside of the usual workflow (e.g. self-defined actions)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ChatAdapterRequest } from './ChatAdapterRequest';\nimport { ChatAdapterResponse } from './ChatAdapterResponse';\nimport { Response } from '../core/model/Response';\n\n/**\n * ChatAdapter includes the minimal requirements/functions that have to be implemented by every `ChatAdapter`. This\n * interface is important if you want to implement your own `ChatAdapter`.\n *\n * Usually you want to include functions to e.g. transform a message from a ChatAdapterResponse to the platform-specific\n * format. This is handled internally by the distinctive adapter. See `FacebookAdapter` for an exemplary implementation.\n */\nexport interface ChatAdapter {\n    /**\n     * Initializes a webserver and awaits incoming messages that shall be processed. A `handleRequest` function that\n     * determines how you want to handle incoming messages has to be passed to the `init()` function. `handleRequest`\n     * should handle responses to the user in a session established by the client through an incoming message.\n     * Use `contactClient` if you want to send a message outside of the usual workflow (e.g. self-defined actions)\n     */\n    init(\n        handleRequest: (\n            request: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise;\n\n    /**\n     * Required to send a message to the client outside of the usual workflow.\n     *\n     * The way this is implementated can vary. You could e.g. use a websocket or, if allowed by the messaging platform,\n     * directly post to the respective API.\n     *\n     * @param response A `ChatAdapterResponse` with the content that should be sent to the user.\n     */\n    contactClient(response: ChatAdapterResponse): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/configuration/configTypes.ts\n        \n\n            \n                Description\n            \n            \n                Used to specify the type of a class constructor (NLP or Chat)\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../nlp_adapter/INlpAdapter';\nimport { ChatAdapter } from '../chat_adapter/IChatAdapter';\nimport { NlpResponse } from '../nlp_adapter/model/NlpAdapterResponse';\nimport { Interceptor } from '../interceptors/Interceptor';\nimport { ChatAdapterRequest } from '../chat_adapter/ChatAdapterRequest';\n\n/**\n * Used to specify the type of a class constructor (NLP or Chat)\n * */\nexport interface ClassConstructor {\n    new (data?: T): T;\n}\n\n/**\n * A (chat)bot can be deployed on a messaging service. The bot can consist of multiple so called _agents_.\n * An agent is a coherent entity, usually tasked to process certain queries (e.g. an agent to process smalltalk\n * and another agent with additional functionality that provides utility like information regarding a service).\n * Usually, a query is first sent to one agent, and then to another agent if thedetection certainty (the score)\n * has not been high enough.\n *\n * An `Agent` has:\n * 1. `executionIndex`: signals when an agent will be asked. The higher the `executionIndex`, the faster the agent\n *      will be asked. Example: You have three agents with executionIndices [2,3,1].\n *      The third agent (with the executionIndex 1) will be contacted first.\n * 2. `minScore`: minimal score to mark a response from an agent as `certain`. If the NLP service returns a score\n *      lower than `minScore`, the next agent will be contacted.\n * 3. `token`: authentication token of the NLP service.\n * 4. `project_id`: an identifier for e.g. Google Cloud Projects. Not relevant for all platforms, take a look at the\n *      respective adapters.\n * 5. `url`: url pointing to the NLP service. Especially relevant if the service does not have a fixed endpoint\n *      (e.g. when using open source services)\n * 6. `languageCode`: signaling the language of your agent.\n */\nexport type Agent = {\n    executionIndex: number;\n    minScore: number;\n    token: string;\n    url: string;\n    languageCode: string;\n    defaultLifespan?: number;\n};\n\n/**\n * Includes all `Agent`s relevant to your service.\n */\nexport type Agents = {\n    [key: string]: Agent;\n};\n\n/**\n * A basic configuration for your chat adapter. Your own implementation of a chat adapter should implement this type,\n * containing:\n *\n * 1. `constructor`: Implements the `ChatAdapter` interface.\n * 2. `name`: The name of your messaging platform. Used for logging purposes.\n * 3. `url`: The url of the messaging API with which you communicate.\n * 4. `webhook`: The framework internal webhook path to which a messaging API sends its requests\n */\nexport type ChatConfig = {\n    constructor: ClassConstructor;\n    name: string;\n    url: string;\n    webhook_path: string;\n    appSecret: string;\n};\n\nexport type NlpConfig = {\n    agents: Agents;\n    constructor: ClassConstructor;\n    name: string;\n};\n\nexport type ServerConfig = {\n    port: number;\n};\n\nexport type InterceptorConfig = {\n    chatToCore: () => Promise\n    >;\n    nlpToCore: () => Promise>;\n    nlpToNlp: () => Promise>;\n};\n\nexport type Config = {\n    interceptors: InterceptorConfig;\n    platform: {\n        chat: ChatConfig;\n        nlp: NlpConfig;\n    };\n    server: ServerConfig;\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DialogflowAdapter.html":{"url":"classes/DialogflowAdapter.html","title":"class - DialogflowAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DialogflowAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nlp_adapter/dialogflow/DialogflowAdapter.ts\n        \n\n            \n                Description\n            \n            \n                WARNING: The Dialogflow API version 1 will be deprecated soon. Migrate to version 2 and use the DialogflowV2Adapter.\nAdapter for the Dialogflow framework. This is an adapter for the Dialogflow API version 1.\nVersion 1 uses client and developer tokens to authenticate a user.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                postContexts\n                            \n                            \n                                    Public\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/nlp_adapter/dialogflow/DialogflowAdapter.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(this: DialogflowAdapter, internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflow/DialogflowAdapter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflow/DialogflowAdapter.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(this: DialogflowAdapter, internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflow/DialogflowAdapter.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: DialogflowAdapter, message: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflow/DialogflowAdapter.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from './communication/deleteContexts';\nimport { postContexts } from './communication/postContextsFromServer';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport { NlpResponse, NlpStatus } from '../model/NlpAdapterResponse';\nimport { getConfig } from '../../core/getConfig';\n\n/**\n * WARNING: The Dialogflow API version 1 will be deprecated soon. Migrate to version 2 and use the `DialogflowV2Adapter`.\n * Adapter for the [Dialogflow](https://dialogflow.com/) framework. This is an adapter for the Dialogflow API version 1.\n * Version 1 uses client and developer tokens to authenticate a user.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class DialogflowAdapter implements NlpAdapter {\n    public lifespanInMinutes = 2;\n\n    public deleteAllContexts(\n        this: DialogflowAdapter,\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        return deleteAllContexts(\n            internalUserId,\n            getConfig().platform.nlp.agents[agentName].token,\n        );\n    }\n\n    public deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextToDelete: string[],\n    ): Promise {\n        return deleteSelectedContexts(\n            internalUserId,\n            agentName,\n            contextToDelete,\n        );\n    }\n\n    public postContexts(\n        this: DialogflowAdapter,\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        return postContexts(\n            internalUserId,\n            contexts,\n            getConfig().platform.nlp.agents[agentName].token,\n        );\n    }\n\n    public sendSingleTextRequest(\n        this: DialogflowAdapter,\n        message: TextRequest,\n        agentName: string,\n    ): Promise {\n        return sendTextRequest(\n            message,\n            agentName,\n            getConfig().platform.nlp.agents[agentName].token,\n            getConfig().platform.nlp.agents[agentName].url,\n        );\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DialogflowConfig.html":{"url":"interfaces/DialogflowConfig.html","title":"interface - DialogflowConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DialogflowConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nlp_adapter/dialogflowV2/dialogflowConfig.ts\n        \n\n\n            \n                Extends\n            \n            \n                        NlpConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        agents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        agents\n                                    \n                                \n                                \n                                    \n                                        agents:         DialogflowAgents\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DialogflowAgents\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Agent, NlpConfig } from '../../configuration/configTypes';\nimport { DialogflowAdapter } from '../dialogflow/DialogflowAdapter';\n\nexport type DialogflowAgent = Agent & {\n    project_id: string;\n    defaultLifespan: number;\n};\n\nexport type DialogflowAgents = {\n    [key: string]: DialogflowAgent;\n};\n\nexport interface DialogflowConfig extends NlpConfig {\n    agents: DialogflowAgents;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DialogflowV2Adapter.html":{"url":"classes/DialogflowV2Adapter.html","title":"class - DialogflowV2Adapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DialogflowV2Adapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts\n        \n\n            \n                Description\n            \n            \n                Adapter for the Dialogflow framework. This is an adapter for Dialogflow API version 2.\nVersion 2 uses JSONs provided through Google Cloud Projects to authenticate the requests and has an updated response\nformat.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                postContexts\n                            \n                            \n                                    Public\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(this: DialogflowV2Adapter, internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(this: DialogflowV2Adapter, internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(this: DialogflowV2Adapter, internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: DialogflowV2Adapter, message: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from './communication/deleteContexts';\nimport { postContexts } from './communication/postContextsFromServer';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport { NlpResponse, NlpStatus } from '../model/NlpAdapterResponse';\nimport { getConfig } from '../../core/getConfig';\nimport { DialogflowConfig } from './dialogflowConfig';\n/**\n * Adapter for the [Dialogflow](https://dialogflow.com/) framework. This is an adapter for Dialogflow API version 2.\n * Version 2 uses JSONs provided through Google Cloud Projects to authenticate the requests and has an updated response\n * format.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class DialogflowV2Adapter implements NlpAdapter {\n    public lifespanInMinutes = 2;\n\n    public deleteAllContexts(\n        this: DialogflowV2Adapter,\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return deleteAllContexts(\n            internalUserId,\n            dialogflowConfig.agents[agentName].project_id,\n            dialogflowConfig.agents[agentName].token,\n        );\n    }\n\n    public deleteSelectedContexts(\n        this: DialogflowV2Adapter,\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return deleteSelectedContexts(\n            internalUserId,\n            dialogflowConfig.agents[agentName].project_id,\n            dialogflowConfig.agents[agentName].token,\n            contexts,\n        );\n    }\n\n    public postContexts(\n        this: DialogflowV2Adapter,\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return postContexts(\n            internalUserId,\n            dialogflowConfig.agents[agentName],\n            contexts,\n        );\n    }\n\n    public sendSingleTextRequest(\n        this: DialogflowV2Adapter,\n        message: TextRequest,\n        agentName: string,\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return sendTextRequest(\n            message,\n            dialogflowConfig.agents[agentName].project_id,\n            dialogflowConfig.agents[agentName].token,\n            agentName,\n        );\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FacebookAdapter.html":{"url":"classes/FacebookAdapter.html","title":"class - FacebookAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FacebookAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat_adapter/facebook/FacebookAdapter.ts\n        \n\n            \n                Description\n            \n            \n                For more information regarding the setup:\nsee Facebook setup.\nFor more information regarding the functionality: see ChatAdapter.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ChatAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactClient\n                            \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    contactClient(response: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/chat_adapter/facebook/FacebookAdapter.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(handleRequest: (message: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/chat_adapter/facebook/FacebookAdapter.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChatAdapter } from '../IChatAdapter';\nimport { ChatAdapterResponse } from '../ChatAdapterResponse';\nimport { initWebhook } from './communication/webhook';\nimport { ChatAdapterRequest } from '../ChatAdapterRequest';\nimport { convertFacebookRequest } from './communication/convertRequest';\nimport { FacebookMessaging } from './model/FacebookPostRequest';\nimport { Response } from '../../core/model/Response';\nimport { sendMultipleResponses } from './communication/sendResponses';\n\n/**\n * For more information regarding the setup:\n * see [Facebook setup]{@link ../../_build/html/chat_adapter/facebook_messenger.html}.\n * For more information regarding the functionality: see `ChatAdapter`.\n *\n * @implements {ChatAdapter}\n */\nexport class FacebookAdapter implements ChatAdapter {\n    public async init(\n        handleRequest: (\n            message: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise {\n        initWebhook(async (message: FacebookMessaging) => {\n            return handleRequest(\n                convertFacebookRequest(message),\n                message.sender.id,\n            );\n        });\n    }\n\n    public contactClient(response: ChatAdapterResponse): Promise {\n        return sendMultipleResponses([response], response.messengerUserId);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacebookChatConfig.html":{"url":"interfaces/FacebookChatConfig.html","title":"interface - FacebookChatConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FacebookChatConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat_adapter/facebook/facebookConfig.ts\n        \n\n            \n                Description\n            \n            \n                The IFacebookChatConfig interface is required for authentication with Facebook. It includes:\n\nappSecret: used to decrypt messages from Facebook to preserve the confidentiality.\nversion: Version of the Facebook Graph API to which the request is sent to.\npageAccessToken: Required for each application in the Facebook Developer Portal.\n  For each page the application is integrated in, a different pageAccessToken has to be generated.\nverifyToken: Used to verify the communication between your server and a Facebook App.\n  Set in the \"Webhook\" settings of the Facebook Developer Portal.\n\nThe interface has to be implemented by the FacebookAdapter. For more information regarding the setup,\nsee Facebook setup.\n\n            \n\n            \n                Extends\n            \n            \n                        ChatConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pageAccessToken\n                                \n                                \n                                        verifyToken\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageAccessToken\n                                    \n                                \n                                \n                                    \n                                        pageAccessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verifyToken\n                                    \n                                \n                                \n                                    \n                                        verifyToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChatConfig } from '../../configuration/configTypes';\nimport { FacebookAdapter } from './FacebookAdapter';\n\n/**\n * The `IFacebookChatConfig` interface is required for authentication with Facebook. It includes:\n *\n * 1. `appSecret`: used to decrypt messages from Facebook to preserve the confidentiality.\n * 2. `version`: Version of the Facebook Graph API to which the request is sent to.\n * 3. `pageAccessToken`: Required for each application in the Facebook Developer Portal.\n *     For each page the application is integrated in, a different `pageAccessToken` has to be generated.\n * 4. `verifyToken`: Used to verify the communication between your server and a Facebook App.\n *     Set in the \"Webhook\" settings of the Facebook Developer Portal.\n *\n * The interface has to be implemented by the `FacebookAdapter`. For more information regarding the setup,\n * see [Facebook setup]{@link ../../_build/html/chat_adapter/facebook_messenger.html}.\n *\n * @interface\n */\nexport interface FacebookChatConfig extends ChatConfig {\n    version: string;\n    pageAccessToken: string;\n    verifyToken: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Interceptor.html":{"url":"interfaces/Interceptor.html","title":"interface - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Interceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/Interceptor.ts\n        \n\n            \n                Description\n            \n            \n                Interface that defines an Interceptor.\nWhile you can stop the pipeline processing in your interceptor and return a NoResponse, you should\nprovide some feedback to the user that the request was successful (or not). You can do that by either returning\na suitable message to the emubot framework or using one of the alternative contact routes provided by the used\nChatAdapter via the contactClient method.\nThe emubot framework has some examples for different interceptors that you can find in our extended example\nhere.\nemubot uses three interceptors:\n\nInterceptor chatToCore,\nInterceptor nlpToNlp and\nInterceptor nlpToCore.\n\nInterceptor chatToCore handles the message after transforming it into a common format and before any internal or\nexternal state is changed. Invalid requests should be handled here (log or further process them). The payload.type\nshould be changed in your custom code if you want to further process the message. If the type remains 'invalid',\nan error message is returned to the user.\nCommon use cases include:\n\nPseudonymization of the messengerUserId.\nHandling messages which are no text messages.\nSave values in a database or retrieve them.\n\nPossible invalid messages are e.g. 'Location' which can be received from Facebook, but which are not supported yet.\nSpecialized and platform-specific types will most likely not be supported by this framework to avoid bloated code.\nPossible solutions:\n\nContact us if you think that a type required by yourself will be required by a large group of users.\n(Fastest solution) Fork the repo and add the types to the relevant Adapter and ChatAdapterRequest.\nA generic payload type might be added in the future, where most information from the message could be accessed,\nif the current type is too restrictive.\n\nInterceptor nlpToNlp intercepts the message during the determination which agent should be used. Mainly required if\nmultiple agents are used (otherwise a default MirrorInterface should suffice).\nCommon use cases are:\n\nStop the decision making early: Accept messages (e.g. fallbacks depending on the context).\nDelete/Add contexts if the message of a specific agent is not used in the user response.\n\nInterceptor nlpToCore intercepts the already determined, final message from the NLP service. Takes an NlpResponse as\ninput and returns another NlpResponse.\nCommon use cases are:\n\nExecute external actions.\nSave values in a database or retrieve values.\nDepseudonymize the internalUserId.\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    handleMessage\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \nhandleMessage(userId: string, message: T)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/Interceptor.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A user identifier required to process the message. Should be depseudonymized when\nreceiving/sending a text from/to the messaging platform and pseudonymized when\nsending it to an NLP service.\n\n                                    \n                                \n                                \n                                    message\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The respective message. The type and content of the message depends on the stage where the message\nis processed (e.g. before sending it to the NLP service or afterwards)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A (usually user-defined) Response.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Response } from '../core/model/Response';\n\n/**\n * Interface that defines an `Interceptor`.\n *\n * While you can stop the pipeline processing in your interceptor and return a `NoResponse`, you should\n * provide some feedback to the user that the request was successful (or not). You can do that by either returning\n * a suitable message to the emubot framework or using one of the alternative contact routes provided by the used\n * `ChatAdapter` via the `contactClient` method.\n *\n * The emubot framework has some examples for different interceptors that you can find in our extended example\n * [here](https://github.com/emundo/emubot-extended-example/).\n *\n * emubot uses three interceptors:\n *\n * 1. Interceptor `chatToCore`,\n * 2. Interceptor `nlpToNlp` and\n * 3. Interceptor `nlpToCore`.\n *\n * Interceptor `chatToCore` handles the message after transforming it into a common format and before any internal or\n * external state is changed. Invalid requests should be handled here (log or further process them). The `payload.type`\n * should be changed in your custom code if you want to further process the message. If the type remains 'invalid',\n * an error message is returned to the user.\n *\n * Common use cases include:\n * 1. Pseudonymization of the messengerUserId.\n * 2. Handling messages which are no text messages.\n * 3. Save values in a database or retrieve them.\n *\n * Possible invalid messages are e.g. 'Location' which can be received from Facebook, but which are not supported yet.\n * Specialized and platform-specific types will most likely not be supported by this framework to avoid bloated code.\n *\n * Possible solutions:\n * 1. Contact us if you think that a type required by yourself will be required by a large group of users.\n * 2. (Fastest solution) Fork the repo and add the types to the relevant Adapter and ChatAdapterRequest.\n * 3. A generic payload type might be added in the future, where most information from the message could be accessed,\n * if the current type is too restrictive.\n *\n *\n * Interceptor `nlpToNlp` intercepts the message during the determination which agent should be used. Mainly required if\n * multiple agents are used (otherwise a default `MirrorInterface` should suffice).\n *\n * Common use cases are:\n * 1. Stop the decision making early: Accept messages (e.g. fallbacks depending on the context).\n * 2. Delete/Add contexts if the message of a specific agent is not used in the user response.\n *\n *\n * Interceptor `nlpToCore` intercepts the already determined, final message from the NLP service. Takes an NlpResponse as\n * input and returns another NlpResponse.\n *\n * Common use cases are:\n * 1. Execute external actions.\n * 2. Save values in a database or retrieve values.\n * 3. Depseudonymize the internalUserId.\n *\n */\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\nexport interface Interceptor {\n    /**\n     *\n     * @param userId A user identifier required to process the message. Should be depseudonymized when\n     *               receiving/sending a text from/to the messaging platform and pseudonymized when\n     *               sending it to an NLP service.\n     * @param message The respective message. The type and content of the message depends on the stage where the message\n     *                is processed (e.g. before sending it to the NLP service or afterwards)\n     * @returns A (usually user-defined) `Response`.\n     */\n    handleMessage(userId: string, message: T): Promise>;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MirrorInterceptor.html":{"url":"classes/MirrorInterceptor.html","title":"class - MirrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MirrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/MirrorInterceptor.ts\n        \n\n            \n                Description\n            \n            \n                Defines the base class of MirrorInterceptors. A MirrorInterceptor takes a message from one of the three interfaces\nand immediately returns it to the user without performing any additional operations and without changing the content\nor any other external state.\nUsing MirrorInterceptors for all three interfaces is sufficient if you only want to let a user communicate with\nyour NLP Service. If you wish to perform additional actions (e.g. save information in a database or use information\nfrom your CMS), you should implement your own interceptor. You can also have a look at some\nexamples of interceptors.\nMore information regarding the usecases and which interceptors exist can be found at\nInterceptor.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Interceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                getInstance\n                            \n                            \n                                    Public\n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/MirrorInterceptor.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        U\n                    \n                \n            \n\n            \n                \n                    Used to create a new MirrorInterceptor-instance.\n\n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(userId: string, message: T)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/MirrorInterceptor.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BotFrameworkInterfaceMessage } from './BotFrameworkInterfaceMessage';\nimport { createResponse } from '../core/utils/responseUtils';\nimport { Response } from '../core/model/Response';\nimport { Interceptor } from './Interceptor';\n\n/**\n * Defines the base class of MirrorInterceptors. A `MirrorInterceptor` takes a message from one of the three interfaces\n * and immediately returns it to the user without performing any additional operations and without changing the content\n * or any other external state.\n *\n * Using `MirrorInterceptor`s for all three interfaces is sufficient if you only want to let a user communicate with\n * your NLP Service. If you wish to perform additional actions (e.g. save information in a database or use information\n * from your CMS), you should implement your own interceptor. You can also have a look at some\n * [examples](https://github.com/emundo/emubot-extended-example/) of interceptors.\n *\n * More information regarding the usecases and which interceptors exist can be found at\n * [Interceptor]{@link ../interfaces/Interceptor.html}.\n */\nexport class MirrorInterceptor\n    implements Interceptor {\n    /**\n     * Used to create a new `MirrorInterceptor`-instance.\n     */\n    public static async getInstance(): Promise> {\n        return Promise.resolve(new MirrorInterceptor());\n    }\n\n    public handleMessage(userId: string, message: T): Promise> {\n        return Promise.resolve(createResponse(message, 200, userId));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NlpAdapter.html":{"url":"interfaces/NlpAdapter.html","title":"interface - NlpAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NlpAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nlp_adapter/INlpAdapter.ts\n        \n\n            \n                Description\n            \n            \n                Implementing this interface is required by all classes that implement the functionality of NLP\nservices (also called NLP adapters).\nNot all NLP services implement the same concepts with the same naming, we will try to keep our\ndefinitions as clear as possible. For more information regarding the concepts in terms of the\nrespective NLP service, please consult our external documentation.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lifespanInMinutes\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    deleteAllContexts\n                                \n                                \n                                    deleteSelectedContexts\n                                \n                                \n                                    postContexts\n                                \n                                \n                                    sendSingleTextRequest\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/INlpAdapter.ts:28\n                \n            \n\n\n            \n                \n                    Deletes ALL contexts of a session specified by internalUserId.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User identifier. Should be pseudonymized at this point.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An NlpStatus that includes success:true, if all contexts have been deleted,\nsuccess:false and information regarding the error, if not all contexts were deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteSelectedContexts(internalUserId: string, agentName: string, contextsToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/INlpAdapter.ts:44\n                \n            \n\n\n            \n                \n                    Deletes selected contexts, specified by their name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User identifier. Should be pseudonymized at this point.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                                \n                                    contextsToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An array of context names that shall be deleted.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An NlpStatus that includes success:true, if all contexts have been deleted,\nsuccess:false and information regarding the error, if not all contexts were deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \npostContexts(internalUserId: string, agentName: string, contextsToPost: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/INlpAdapter.ts:61\n                \n            \n\n\n            \n                \n                    Posts an array of contexts to an NLP service.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User identifier. Should be pseudonymized at this point.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                                \n                                    contextsToPost\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of names of contexts that should be set.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An NlpStatus that includes success:true, if all contexts have been deleted,\nsuccess:false and information regarding the error, if not all contexts were deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \nsendSingleTextRequest(textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/INlpAdapter.ts:77\n                \n            \n\n\n            \n                \n                    Send a single text request to an NLP service.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Includes the user identifier (should be pseudonymized at this point) and\nthe message that should be classified by the NLP service.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An NlpResponse which is preprocessed to be further processed by the core.\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lifespanInMinutes\n                                    \n                                \n                                \n                                    \n                                        lifespanInMinutes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lifespan of a context (see Lifespan).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { NlpResponse, NlpStatus } from './model/NlpAdapterResponse';\nimport { TextRequest } from './model/TextRequest';\n\n/**\n * Implementing this interface is required by all classes that implement the functionality of NLP\n * services (also called NLP adapters).\n *\n * Not all NLP services implement the same concepts with the same naming, we will try to keep our\n * definitions as clear as possible. For more information regarding the concepts in terms of the\n * respective NLP service, please consult our external documentation.\n */\nexport interface NlpAdapter {\n    /**\n     * Lifespan of a context (see [Lifespan]{@link ../../_build/html/nlp_adapter/custom_nlp_adapter.html}).\n     */\n    lifespanInMinutes: number;\n\n    /**\n     * Deletes **ALL** contexts of a session specified by `internalUserId`.\n     *\n     * @param internalUserId User identifier. Should be pseudonymized at this point.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     *\n     * @returns An NlpStatus that includes `success:true`, if all contexts have been deleted,\n     *          `success:false` and information regarding the error, if not all contexts were deleted.\n     */\n    deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise;\n\n    /**\n     * Deletes selected contexts, specified by their name.\n     *\n     * @param internalUserId User identifier. Should be pseudonymized at this point.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     * @param contextsToDelete An array of context names that shall be deleted.\n     *\n     * @returns An NlpStatus that includes `success:true`, if all contexts have been deleted,\n     *          `success:false` and information regarding the error, if not all contexts were deleted.\n     */\n    deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextsToDelete: string[],\n    ): Promise;\n\n    /**\n     * Posts an array of contexts to an NLP service.\n     *\n     * @param internalUserId User identifier. Should be pseudonymized at this point.\n     * @param contextsToPost Array of names of contexts that should be set.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     *\n     * @returns An NlpStatus that includes `success:true`, if all contexts have been deleted,\n     *          `success:false` and information regarding the error, if not all contexts were deleted.\n     */\n    postContexts(\n        internalUserId: string,\n        agentName: string,\n        contextsToPost: string[],\n    ): Promise;\n\n    /**\n     * Send a single text request to an NLP service.\n     *\n     * @param textRequest Includes the user identifier (should be pseudonymized at this point) and\n     *                    the message that should be classified by the NLP service.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     *\n     * @returns An NlpResponse which is preprocessed to be further processed by the core.\n     */\n    sendSingleTextRequest(\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise;\n}\n\n/**\n * Signals that an action, such as posting a context, has been successful.\n */\nexport function makeSuccess(): NlpStatus {\n    return {\n        success: true,\n    } as NlpStatus;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RasaAdapter.html":{"url":"classes/RasaAdapter.html","title":"class - RasaAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RasaAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nlp_adapter/rasa/RasaAdapter.ts\n        \n\n            \n                Description\n            \n            \n                Adapter for the Rasa NLU framework.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                    Async\n                                postContexts\n                            \n                            \n                                    Public\n                                    Async\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/nlp_adapter/rasa/RasaAdapter.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/rasa/RasaAdapter.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/rasa/RasaAdapter.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/rasa/RasaAdapter.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: RasaAdapter, textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/rasa/RasaAdapter.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                RasaAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport { NlpStatus, NlpResponse } from '../model/NlpAdapterResponse';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from '../communication/deleteContexts';\nimport { postContexts } from '../communication/postContexts';\n\n/**\n * Adapter for the [Rasa NLU](https://rasa.com/docs/rasa/) framework.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class RasaAdapter implements NlpAdapter {\n    // Lifespan not required. Rasa does not support the same notion of contexts as other NLP services\n    public lifespanInMinutes = 0;\n\n    public async deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        return deleteAllContexts(internalUserId, agentName);\n    }\n\n    public deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextToDelete: string[],\n    ): Promise {\n        return deleteSelectedContexts(\n            internalUserId,\n            agentName,\n            contextToDelete,\n        );\n    }\n\n    public async postContexts(\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        return postContexts(internalUserId, agentName, contexts);\n    }\n\n    public async sendSingleTextRequest(\n        this: RasaAdapter,\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise {\n        return sendTextRequest(textRequest, agentName);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlackAdapter.html":{"url":"classes/SlackAdapter.html","title":"class - SlackAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlackAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat_adapter/slack/SlackAdapter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ChatAdapter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                contactClient\n                            \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    contactClient(response: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/chat_adapter/slack/SlackAdapter.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(handleRequest: (message: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/chat_adapter/slack/SlackAdapter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChatAdapter } from '../IChatAdapter';\nimport { ChatAdapterRequest } from '../ChatAdapterRequest';\nimport { ChatAdapterResponse } from '../ChatAdapterResponse';\nimport { Response } from '../../core/model/Response';\nimport {\n    initWebhook,\n    sendTextResponse,\n    openChannel,\n} from './communication/webhook';\nimport { convertIntoChatAdapterRequest } from './communication/convertRequest';\nimport { SlackRequest } from './model/SlackRequest';\nimport { SlackResponse } from './model/SlackResponse';\nimport { convertToSlackResponse } from './communication/convertResponse';\n\nexport class SlackAdapter implements ChatAdapter {\n    public async init(\n        handleRequest: (\n            message: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise {\n        await initWebhook(async (message: SlackRequest) => {\n            return handleRequest(\n                convertIntoChatAdapterRequest(message),\n                message.user,\n            );\n        });\n    }\n\n    async contactClient(response: ChatAdapterResponse): Promise {\n        const channel: string = await openChannel(response.messengerUserId);\n        const resp: SlackResponse = convertToSlackResponse(\n            response,\n            response.messengerUserId,\n            channel,\n        );\n\n        await sendTextResponse(resp);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnipsAdapter.html":{"url":"classes/SnipsAdapter.html","title":"class - SnipsAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnipsAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/nlp_adapter/snips/SnipsAdapter.ts\n        \n\n            \n                Description\n            \n            \n                Adapter for the Snips NLU framework.\nGiven a phrase such as\n *      What will the weather be like in paris at 9pm?\n * ```\nSnips NLU will parse the query and answer with a result of the form:\n{\n\"intent\": {\n\"intentName\": \"searchWeatherForecast\",\n\"probability\": 0.95\n},\n\"slots\": [\n{\n\"value\": \"paris\",\n\"entity\": \"locality\",\n\"slotName\": \"forecastLocality\"\n},\n{\n\"value\": {\n\"kind\": \"InstantTime\",\n\"value\": \"2018-02-08 20:00:00 +00:00\"\n},\n\"entity\": \"snips/datetime\",\n\"slotName\": \"forecastStartDatetime\"\n}\n]\n}\nIf you want emubot to handle the messages which should be supplied to the user, you should add a `messages`\nfield into the parsed result. You can also add a `contexts` field if desired. The request to the Snips webhook\nwill also include an internalUserID which can be used to differentiate between users.\n\n\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                    Async\n                                postContexts\n                            \n                            \n                                    Public\n                                    Async\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/nlp_adapter/snips/SnipsAdapter.ts:52\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/snips/SnipsAdapter.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/snips/SnipsAdapter.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/snips/SnipsAdapter.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: SnipsAdapter, textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/nlp_adapter/snips/SnipsAdapter.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                SnipsAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from '../communication/deleteContexts';\nimport { NlpStatus, NlpResponse } from '../model/NlpAdapterResponse';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport { postContexts } from '../communication/postContexts';\n\n/**\n * Adapter for the [Snips NLU](https://snips-nlu.readthedocs.io/en/latest/) framework.\n *\n * Given a phrase such as\n * ```\n *      What will the weather be like in paris at 9pm?\n * ```\n * Snips NLU will parse the query and answer with a result of the form:\n * ```\n * {\n * \"intent\": {\n *    \"intentName\": \"searchWeatherForecast\",\n *    \"probability\": 0.95\n * },\n * \"slots\": [\n *    {\n *        \"value\": \"paris\",\n *        \"entity\": \"locality\",\n *        \"slotName\": \"forecastLocality\"\n *    },\n *    {\n *        \"value\": {\n *        \"kind\": \"InstantTime\",\n *        \"value\": \"2018-02-08 20:00:00 +00:00\"\n *        },\n *        \"entity\": \"snips/datetime\",\n *        \"slotName\": \"forecastStartDatetime\"\n *    }\n *  ]\n * }\n * ```\n * If you want emubot to handle the messages which should be supplied to the user, you should add a `messages`\n * field into the parsed result. You can also add a `contexts` field if desired. The request to the Snips webhook\n * will also include an internalUserID which can be used to differentiate between users.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class SnipsAdapter implements NlpAdapter {\n    // Lifespan not required. Snips does not support the same notion of contexts as other NLP services.\n    public lifespanInMinutes = 0;\n\n    public async deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        return deleteAllContexts(internalUserId, agentName);\n    }\n\n    public deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextToDelete: string[],\n    ): Promise {\n        return deleteSelectedContexts(\n            internalUserId,\n            agentName,\n            contextToDelete,\n        );\n    }\n\n    public async postContexts(\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        return postContexts(internalUserId, agentName, contexts);\n    }\n\n    public async sendSingleTextRequest(\n        this: SnipsAdapter,\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise {\n        return sendTextRequest(textRequest, agentName);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/chat_adapter/ChatAdapterRequest.ts\n            \n            function\n            isAttachmentRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/ChatAdapterRequest.ts\n            \n            function\n            isTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/IChatAdapter.ts\n            \n            interface\n            ChatAdapter\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/FacebookAdapter.ts\n            \n            class\n            FacebookAdapter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertRequest.ts\n            \n            function\n            convertFacebookRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertRequest.ts\n            \n            function\n            makeRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToButtons\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToFacebookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToImage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToQuickReply\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToText\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            getAppSecretProof\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            sendMultipleResponses\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            sendResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            handleRequests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            handleResponses\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            initWebhook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            isWebhookAuthenticated\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            verifyAuthentication\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            variable\n            WEBHOOK_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/communication/webhook.ts\n            \n            variable\n            WEBHOOK_VERIFICATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/facebook/facebookConfig.ts\n            \n            interface\n            FacebookChatConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/SlackAdapter.ts\n            \n            class\n            SlackAdapter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/convertRequest.ts\n            \n            function\n            convertIntoChatAdapterRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/convertResponse.ts\n            \n            function\n            convertToSlackResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            handleMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            initWebhook\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            openChannel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            sendTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/utils.ts\n            \n            function\n            mapSerialized\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/chat_adapter/utils.ts\n            \n            function\n            textToResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/configFacebookDf2.ts\n            \n            variable\n            config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/configFacebookRasa.ts\n            \n            variable\n            config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/configSlackDf2.ts\n            \n            variable\n            config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/configTypes.ts\n            \n            interface\n            ClassConstructor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/interceptorConfig.ts\n            \n            variable\n            interceptorConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/platformChatFacebook.ts\n            \n            variable\n            platformChatFacebook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/platformChatSlack.ts\n            \n            variable\n            platformChatSlack\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/platformNlpDialogflow.ts\n            \n            variable\n            platformNlpDialogflow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/platformNlpDialogflowV2.ts\n            \n            variable\n            platformNlpDialogflowV2\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/platformNlpRasa.ts\n            \n            variable\n            platformNlpRasa\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/platformNlpSnips.ts\n            \n            variable\n            platformNlpSnips\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/configuration/serverConfig.ts\n            \n            variable\n            serverConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/logMessages.ts\n            \n            function\n            setLogMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/logMessages.ts\n            \n            variable\n            DEFAULT_LOG_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/logMessages.ts\n            \n            variable\n            LOG_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/messages.ts\n            \n            function\n            setMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/messages.ts\n            \n            variable\n            DEFAULT_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants/messages.ts\n            \n            variable\n            MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/core.ts\n            \n            function\n            initCore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/getAdapter.ts\n            \n            variable\n            adapter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/getConfig.ts\n            \n            function\n            getConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/getConfig.ts\n            \n            function\n            getPort\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/getConfig.ts\n            \n            function\n            setConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/getConfig.ts\n            \n            function\n            setPort\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/getConfig.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/getConfig.ts\n            \n            variable\n            configPort\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/getInterceptors.ts\n            \n            variable\n            chatToCore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/getInterceptors.ts\n            \n            variable\n            nlpToCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/getInterceptors.ts\n            \n            variable\n            nlpToNlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/handleReceivedMessage.ts\n            \n            function\n            handleMessageAfterThirdInterceptor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/handleReceivedMessage.ts\n            \n            function\n            handleMessageDependingOnMessageType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/handleReceivedMessage.ts\n            \n            function\n            handleReceivedMessageInCore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/handleReceivedMessage.ts\n            \n            function\n            handleTextRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/handleReceivedMessage.ts\n            \n            function\n            returnErrorAsChatAdapterResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            function\n            findBestNlpAnswerForTextRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            variable\n            agents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            variable\n            doesResponsePassScoringThreshold\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            variable\n            PRIMARY_AGENT_INDEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/generateId.ts\n            \n            function\n            generateId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/getOrderedAgents.ts\n            \n            function\n            getOrderedAgents\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/responseUtils.ts\n            \n            function\n            createNoResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/responseUtils.ts\n            \n            function\n            createResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/transformMessageType.ts\n            \n            function\n            buildButton\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/transformMessageType.ts\n            \n            function\n            buildQuickreply\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/transformMessageType.ts\n            \n            function\n            handleCustomPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/transformMessageType.ts\n            \n            function\n            transformChatAdapterRequestResponseToNlpResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/transformMessageType.ts\n            \n            function\n            transformNlpResponseToChatAdapterResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/utils/transformMessageType.ts\n            \n            function\n            transformToChatAdapterResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/interceptors/Interceptor.ts\n            \n            interface\n            Interceptor\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/interceptors/MirrorInterceptor.ts\n            \n            class\n            MirrorInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/logger.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logger.ts\n            \n            variable\n            logLevel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/INlpAdapter.ts\n            \n            interface\n            NlpAdapter\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/nlp_adapter/INlpAdapter.ts\n            \n            function\n            makeSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            deleteAllContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            deleteSelectedContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/communication/postContexts.ts\n            \n            function\n            createPostRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/communication/postContexts.ts\n            \n            function\n            postContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/convertStringArrayToNlpContexts.ts\n            \n            function\n            convertStringArrayToNlpContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/DialogflowAdapter.ts\n            \n            class\n            DialogflowAdapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            deleteAllContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            deleteSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/postContextsFromServer.ts\n            \n            function\n            createPostRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/postContextsFromServer.ts\n            \n            function\n            postContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/responseConverters.ts\n            \n            function\n            toNlpMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/responseConverters.ts\n            \n            function\n            toNlpStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflow/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts\n            \n            class\n            DialogflowV2Adapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/deleteContexts.ts\n            \n            function\n            deleteAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/deleteContexts.ts\n            \n            function\n            deleteSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/getContexts.ts\n            \n            function\n            getAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/postContextsFromServer.ts\n            \n            function\n            createPostRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/postContextsFromServer.ts\n            \n            function\n            postContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            getContext\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            toNlpMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            toNlpStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/sendTextRequest.ts\n            \n            function\n            createDialogflowRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/dialogflowV2/dialogflowConfig.ts\n            \n            interface\n            DialogflowConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/nlp_adapter/rasa/RasaAdapter.ts\n            \n            class\n            RasaAdapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/nlp_adapter/rasa/communication/responseConverters.ts\n            \n            function\n            convertToNlpParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/rasa/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/rasa/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/rasa/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfigurationTextMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/rasa/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/snips/SnipsAdapter.ts\n            \n            class\n            SnipsAdapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/nlp_adapter/snips/communication/responseConverters.ts\n            \n            function\n            convertToNlpParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/snips/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/snips/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/nlp_adapter/snips/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : 1.1.11\n        \n            @slack/events-api : 2.3.0\n        \n            body-parser : 1.19.0\n        \n            crypto-js : 3.1.9-1\n        \n            dialogflow : 0.12.2\n        \n            express : 4.17.1\n        \n            lodash : 4.17.15\n        \n            remove-markdown : 0.3.0\n        \n            request : 2.88.0\n        \n            request-promise-native : 1.0.8\n        \n            typescript : 3.6.4\n        \n            winston : 3.2.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DialogflowMessageTypes   (src/.../DialogflowTextResponse.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/nlp_adapter/dialogflow/model/DialogflowTextResponse.ts\n    \n        \n            \n                \n                    \n                        \n                        DialogflowMessageTypes\n                    \n                \n                        \n                            \n                                 text\n                            \n                        \n                        \n                            \n                                 cards\n                            \n                        \n                        \n                            \n                                 quickreplies\n                            \n                        \n                        \n                            \n                                 image\n                            \n                        \n                        \n                            \n                                 customPayload\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nemubot - eMundo Bot Framework\nThis framework aims to offer an easy way to develop and deploy chatbots, reducing the overhead in code by using standardized components, allowing a high degree of exchangeability. The easy setup also enables less experienced developers to build and deploy a chatbot. Different messaging platforms (like Facebook Messenger, Slack or your personal website) can be used interchangeably to communicate with a user, and requests can be classified and answered using different natural language processing (NLP) services like Dialogflow, Snips or Rasa, depending on your personal need. Changing a platform does not influence the logic in the background, meaning that you only have to change very few lines of code to change from one platform to another while maintaining the same functionality. Further, the separation of concerns makes it simple to include further functionality like automated speech recognition.\nSeparating the different components is especially useful to preserve and protect the privacy of both, the user and the host of a chatbot. You can also combine multiple agents (chatbots) in a single application to separate the functionality of a bot into multiple logically separated units which are combined to one coherent bot.\nThe mid-term goal is to further reduce the required programming knowledge to setup a bot, and improving the protection of the users' privacy by incorporating additional means of protection, like the pseudonymization of users, per default.\nThese means can also be included at the current state, but are not enabled by default.\nFor a minimal setup, without these protecting means, please consult this repository.\nThe minimal setup should only be used to get to test the basic functionality of the framework.\nWe highly recommend to adapt our more extensive example, which comes with a slightly more complex setup but enables you to e.g. use a database and pseudonymize users identifiers.\nOffering this framework hopefully enables many individuals and (also small) companies, reducing the time and budget that has to be spent to develop a chatbot, while maintaining a high degree of control.\nArchitecture\n\nSetup\nTo start a chatbot you have to\n\nCreate an agent using an NLP service of your choice, get the required credentials and paste them into the configuration file (more information on these can be found at the distinctive section in our docs (see below).\nInstall the dependencies (npm required): open a terminal and type npm install.\nChoose the configuration in your src/main.ts. Make sure to use the correct NLP service (the one you just set up).\nCompile the code (npm run tsc) and run your bot (npm run start).\n\nThe simplest way to test whether your chatbot works would be to send the messages from your local machine to your chatbot. A CLI-Adapter which can be used to locally test if your bot is up and running, receives messages and sends an exemplar query, will be published soon.\nSetup On Existing Messaging Services\nIf you want to deploy your bot to a messaging service such as Slack, you have to get the respective credentials (see docs) required to authenticate. Furthermore, you usually have to setup a server and communicate over https.\nA detailed setup will follow soon.\nDocumentation\nPlease consult the docs for further information regarding the setup, supported platforms, configuration files or details regarding the architecture.\nContribute To The Documentation\nOur API reference is built using compodoc, while we use sphinx for the description of the framework itself. You can follow the next steps if you would like to compile and change parts of the documentation (commands are valid for Ubuntu and might change across operating systems):\n\nInstall pip (e.g. apt-get install python3-pip).\nOptional, but recommended: install virtualenv pip install virtualenv, create a virtual environment (virtualenv sphinxenv) and start the environment using source sphinxenv/bin/activate.\npip install -r requirements.txt (add the --user flag if you are not in a virtualenv).\nMake sure to install npm and run npm run createDocs.\n\nA primer for restructured text (which is the markup language used by Sphinx) can be found here\nLogging\nLogging is controlled in ./src/logger.ts using winston. Logs are written to stdout as well as two files: One file for errors only and one file with additional information, determined by your loglevel, which also determines the logs for stdout.\nThe default log level is set to \"verbose\" (more information can be found here). Please set the respective environment variable if you wish to change the loglevel (e.g.export LOGLEVEL=\"error\").\nContributing\nYou would like to contribute? Awesome! Please check out our Contribution Guidelines.\nLicense\nThis project is licensed under the Apache 2.0 License - see the LICENSE.md file for details.\nAuthors\n\nFiete Lüer\nMaxim Dolgich\nBastian Gorholt\nRaphael Arias\nTabea Spahn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Adapter   (src/.../getAdapter.ts)\n                        \n                        \n                            Agent   (src/.../configTypes.ts)\n                        \n                        \n                            Agents   (src/.../configTypes.ts)\n                        \n                        \n                            AgentWithName   (src/.../getOrderedAgents.ts)\n                        \n                        \n                            AttachmentType   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            BotFrameworkInterfaceMessage   (src/.../BotFrameworkInterfaceMessage.ts)\n                        \n                        \n                            CallButton   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            CardButtons   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            ChatAdapterAttachmentMessage   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterAttachmentRequest   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            ChatAdapterButtonAttachmentMessage   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterCustomPayloadQuickReplyMessage   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterImageAttachmentMessage   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterInitialRequest   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            ChatAdapterQuickReplyMessage   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterRequest   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            ChatAdapterResponse   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterTextMessage   (src/.../ChatAdapterResponse.ts)\n                        \n                        \n                            ChatAdapterTextRequest   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            ChatAdapterUndefinedRequest   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            ChatConfig   (src/.../configTypes.ts)\n                        \n                        \n                            Config   (src/.../configTypes.ts)\n                        \n                        \n                            Context   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            CrappyBoolean   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowAgent   (src/.../dialogflowConfig.ts)\n                        \n                        \n                            DialogflowAgents   (src/.../dialogflowConfig.ts)\n                        \n                        \n                            DialogflowContextResponse   (src/.../DialogflowContextResponse.ts)\n                        \n                        \n                            DialogflowMessage   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowMessageCard   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowMessageCustomPayload   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowMessageImage   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowMessageQuickReplies   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowMessageText   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowParameters   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            DialogflowStatus   (src/.../DialogflowStatus.ts)\n                        \n                        \n                            DialogflowTextResponse   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            Entry   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            FacebookAttachmentMessage   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookButton   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookButtonAttachment   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookFallbackAttachment   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            FacebookGenericTemplate   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookImageAttachment   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookLocationAttachment   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            FacebookMessage   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookMessaging   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            FacebookPostbackButton   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookPostRequest   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            FacebookPostResponse   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookQuickReply   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookQuickReplyMessage   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookResponseConfirmation   (src/.../FacebookResponseConfirmation.ts)\n                        \n                        \n                            FacebookTextMessage   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookTextQuickReply   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            FacebookUrlAttachment   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            FacebookUrlButton   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            Fulfillment   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            IdAttachment   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            InterceptorConfig   (src/.../configTypes.ts)\n                        \n                        \n                            Message   (src/.../FacebookPostRequest.ts)\n                        \n                        \n                            Metadata   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            NlpConfig   (src/.../configTypes.ts)\n                        \n                        \n                            NlpContext   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpCustomPayload   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpCustomPayloadButton   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpCustomPayloadQuickReply   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpImage   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpMessage   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpParameters   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpQuickReplies   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpResponse   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpResponseData   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            NlpStatus   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpText   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NlpTextRequestResult   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            NoResponse   (src/.../Response.ts)\n                        \n                        \n                            OtherQuickReply   (src/.../FacebookPostResponse.ts)\n                        \n                        \n                            Parameter   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            PostBackButton   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            RasaEntity   (src/.../RasaResponse.ts)\n                        \n                        \n                            RasaIntent   (src/.../RasaResponse.ts)\n                        \n                        \n                            RasaParseResponse   (src/.../RasaResponse.ts)\n                        \n                        \n                            RasaResponse   (src/.../RasaResponse.ts)\n                        \n                        \n                            RasaTextResponse   (src/.../RasaResponse.ts)\n                        \n                        \n                            RequestAttachment   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            Response   (src/.../Response.ts)\n                        \n                        \n                            Result   (src/.../DialogflowTextResponse.ts)\n                        \n                        \n                            ServerConfig   (src/.../configTypes.ts)\n                        \n                        \n                            SingleNlpParameter   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            SlackErrorResponse   (src/.../SlackResponse.ts)\n                        \n                        \n                            SlackMessage   (src/.../SlackRequest.ts)\n                        \n                        \n                            SlackOpenChannelResponse   (src/.../SlackResponse.ts)\n                        \n                        \n                            SlackRequest   (src/.../SlackRequest.ts)\n                        \n                        \n                            SlackResponse   (src/.../SlackResponse.ts)\n                        \n                        \n                            SlackTextResponse   (src/.../SlackResponse.ts)\n                        \n                        \n                            SnipsEntity   (src/.../SnipsTextResponse.ts)\n                        \n                        \n                            SnipsIntent   (src/.../SnipsTextResponse.ts)\n                        \n                        \n                            SnipsResponse   (src/.../SnipsTextResponse.ts)\n                        \n                        \n                            TextRequest   (src/.../TextRequest.ts)\n                        \n                        \n                            UrlAttachment   (src/.../ChatAdapterRequest.ts)\n                        \n                        \n                            UrlButton   (src/.../NlpAdapterResponse.ts)\n                        \n                        \n                            ValidChatAdapterRequestTypes   (src/.../ChatAdapterRequest.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/getAdapter.ts\n    \n    \n        \n            \n                \n                    \n                    Adapter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/configuration/configTypes.ts\n    \n    \n        \n            \n                \n                    \n                    Agent\n                \n            \n            \n                \n                    A (chat)bot can be deployed on a messaging service. The bot can consist of multiple so called agents.\nAn agent is a coherent entity, usually tasked to process certain queries (e.g. an agent to process smalltalk\nand another agent with additional functionality that provides utility like information regarding a service).\nUsually, a query is first sent to one agent, and then to another agent if thedetection certainty (the score)\nhas not been high enough.\nAn Agent has:\n\nexecutionIndex: signals when an agent will be asked. The higher the executionIndex, the faster the agent\n   will be asked. Example: You have three agents with executionIndices [2,3,1].\n   The third agent (with the executionIndex 1) will be contacted first.\nminScore: minimal score to mark a response from an agent as certain. If the NLP service returns a score\n   lower than minScore, the next agent will be contacted.\ntoken: authentication token of the NLP service.\nproject_id: an identifier for e.g. Google Cloud Projects. Not relevant for all platforms, take a look at the\n   respective adapters.\nurl: url pointing to the NLP service. Especially relevant if the service does not have a fixed endpoint\n   (e.g. when using open source services)\nlanguageCode: signaling the language of your agent.\n\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Agents\n                \n            \n            \n                \n                    Includes all Agents relevant to your service.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatConfig\n                \n            \n            \n                \n                    A basic configuration for your chat adapter. Your own implementation of a chat adapter should implement this type,\ncontaining:\n\nconstructor: Implements the ChatAdapter interface.\nname: The name of your messaging platform. Used for logging purposes.\nurl: The url of the messaging API with which you communicate.\nwebhook: The framework internal webhook path to which a messaging API sends its requests\n\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Config\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InterceptorConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ServerConfig\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/core/utils/getOrderedAgents.ts\n    \n    \n        \n            \n                \n                    \n                    AgentWithName\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/chat_adapter/ChatAdapterRequest.ts\n    \n    \n        \n            \n                \n                    \n                    AttachmentType\n                \n            \n            \n                \n                        \"audio\" | \"video\" | \"image\" | \"file\" | \"template\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterAttachmentRequest\n                \n            \n            \n                \n                    Payload is an Attachment.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterInitialRequest\n                \n            \n            \n                \n                    Can be used when first connecting a user with the framework (e.g. sending a ping upon loading a website for the\nfirst time). Relevant if you implement a chatAdapter for your own messaging service and have to distribute a\nmessagingUserId. The messagingUserId can be generated by the server and sent back to the client.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterRequest\n                \n            \n            \n                \n                    ChatAdapterRequests are user messages that are transformed from a messaging specific format into a generalized format.\nCurrently, only text messages and attachments are supported. If a message does not belong into one of these categories it\ncounts as an undefined/invalid request, which can be handled in the first interceptor (chatToCore) if desired. If it is\nnot handled by yourself, the framework will return an error message to the user.\nRequests always include:\n\nTheir type: string\nisFromAdmin: boolean: A flag that indicates whether the message is sent from another person that administers                     the page and is NOT the user.\nmessage: Some payload. Its content depends on the type of the message.\n\n\n                \n            \n            \n                \n                            ChatAdapterTextRequest | ChatAdapterAttachmentRequest | ChatAdapterUndefinedRequest | ChatAdapterInitialRequest\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterTextRequest\n                \n            \n            \n                \n                    Standard text request. Payload is a string.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterUndefinedRequest\n                \n            \n            \n                \n                    Requests that do not correspond to a supported ChatAdapterRequest type. The original payload is stored in the\nmessage-field. You can specify how to further handle the message in the first interceptor (chatToCore). If\nyou do not wish to change the payload or handle the message, the interceptor can simply return a\nChatAdapterUndefinedRequest, which will trigger a message to the user stating that the type of message is not supported.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IdAttachment\n                \n            \n            \n                \n                    An IdAttachment uses an identifier assigned to some attachment saved on the messaging platform's server. The id is used\nfor referencing, and points to the file that shall be sent to the user. Useful if the same file is sent repeatedly.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestAttachment\n                \n            \n            \n                \n                        UrlAttachment | IdAttachment\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UrlAttachment\n                \n            \n            \n                \n                    UrlAttachments require a URL from which the data will be downloaded and sent to the user. Limitations regarding the size\nmight apply and depend on the platform. Example: Files larger than 25MB cannot be sent using Facebook.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidChatAdapterRequestTypes\n                \n            \n            \n                \n                        \"text\" | \"attachment\" | \"initial\" | \"invalid\"\n\n                \n            \n        \n    \n    src/interceptors/BotFrameworkInterfaceMessage.ts\n    \n    \n        \n            \n                \n                    \n                    BotFrameworkInterfaceMessage\n                \n            \n            \n                \n                    Possible message types that are expected during the communication with the interceptors.\nEach interceptor expects and returns a BotFrameworkInterfaceMessage.\n\n                \n            \n            \n                \n                            NlpResponse | ChatAdapterRequest\n\n                \n            \n        \n    \n    src/nlp_adapter/model/NlpAdapterResponse.ts\n    \n    \n        \n            \n                \n                    \n                    CallButton\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpContext\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpCustomPayload\n                \n            \n            \n                \n                    Developer-defined JSON. It is processed without modifications. Make sure to convert it\nat the third interceptor (nlpToChat) and/or handle it there and return a NoResponse.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpCustomPayloadButton\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpCustomPayloadQuickReply\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpImage\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpMessage\n                \n            \n            \n                \n                        NlpQuickReplies | NlpText | NlpCustomPayload | NlpImage\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpParameters\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpQuickReplies\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpStatus\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpText\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NlpTextRequestResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PostBackButton\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SingleNlpParameter\n                \n            \n            \n                \n                        literal type | literal type | string | string[] | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    UrlButton\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/nlp_adapter/dialogflow/model/DialogflowTextResponse.ts\n    \n    \n        \n            \n                \n                    \n                    CardButtons\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Context\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CrappyBoolean\n                \n            \n            \n                \n                        \"true\" | \"false\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowMessage\n                \n            \n            \n                \n                        DialogflowMessageQuickReplies | DialogflowMessageText | DialogflowMessageCard | DialogflowMessageImage | DialogflowMessageCustomPayload\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowMessageCard\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowMessageCustomPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowMessageImage\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowMessageQuickReplies\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowMessageText\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowParameters\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowTextResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Fulfillment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Metadata\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Parameter\n                \n            \n            \n                \n                        literal type | string | string[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Result\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/chat_adapter/ChatAdapterResponse.ts\n    \n    \n        \n            \n                \n                    \n                    ChatAdapterAttachmentMessage\n                \n            \n            \n                \n                    Images and buttons are the only attachments currently supported. Please submit an issue if you think that another\ntype needs to be supported.\n\n                \n            \n            \n                \n                            ChatAdapterImageAttachmentMessage | ChatAdapterButtonAttachmentMessage\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterButtonAttachmentMessage\n                \n            \n            \n                \n                    Some platforms support different types of buttons. Some commonly used button types\nare defined below, the different usages are documented in the respective chatAdapter.\n\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterCustomPayloadQuickReplyMessage\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterImageAttachmentMessage\n                \n            \n            \n                \n                    A simple image which can be retrieved using an url. Locally stored images are currently not supported.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterQuickReplyMessage\n                \n            \n            \n                \n                    Quick replies are suggested replies that can be used to visualize different options a user can choose as a reply.\nThe suggestions are often clickable and disappear after selection.\nExample: https://developers.facebook.com/docs/messenger-platform/send-messages/quick-replies/)\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterResponse\n                \n            \n            \n                \n                    Generic response format for messages that are queued to be sent to the user. Includes an identifier as well as the\nresponse. Each message includes its type, the payload (which depends on the type) and the (depseudonymized)\nmessengerUserId.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChatAdapterTextMessage\n                \n            \n            \n                \n                    Used if the user shall receive a standard text response.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/nlp_adapter/dialogflowV2/dialogflowConfig.ts\n    \n    \n        \n            \n                \n                    \n                    DialogflowAgent\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DialogflowAgents\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/nlp_adapter/dialogflow/model/DialogflowContextResponse.ts\n    \n    \n        \n            \n                \n                    \n                    DialogflowContextResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/nlp_adapter/dialogflow/model/DialogflowStatus.ts\n    \n    \n        \n            \n                \n                    \n                    DialogflowStatus\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/chat_adapter/facebook/model/FacebookPostRequest.ts\n    \n    \n        \n            \n                \n                    \n                    Entry\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookFallbackAttachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookLocationAttachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookMessaging\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookPostRequest\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookUrlAttachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Message\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/chat_adapter/facebook/model/FacebookPostResponse.ts\n    \n    \n        \n            \n                \n                    \n                    FacebookAttachmentMessage\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookButton\n                \n            \n            \n                \n                        FacebookPostbackButton | FacebookUrlButton\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookButtonAttachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookGenericTemplate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookImageAttachment\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookMessage\n                \n            \n            \n                \n                        FacebookTextMessage | FacebookQuickReplyMessage | FacebookAttachmentMessage\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookPostbackButton\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookPostResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookQuickReply\n                \n            \n            \n                \n                        FacebookTextQuickReply | OtherQuickReply\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookQuickReplyMessage\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookTextMessage\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookTextQuickReply\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FacebookUrlButton\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OtherQuickReply\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/chat_adapter/facebook/model/FacebookResponseConfirmation.ts\n    \n    \n        \n            \n                \n                    \n                    FacebookResponseConfirmation\n                \n            \n            \n                \n                    From https://developers.facebook.com/docs/messenger-platform/reference/send-api/#recipient:\nA successful Send API request returns a JSON string containing identifiers for the message and its recipient.\nNote: Effective February 20, 2018, the Send API no longer includes recipient_id in the response for messages that use\nrecipient.user_ref or recipient.phone_number to identify the message recipient.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/core/utils/findBestNlpAnswerForTextRequest.ts\n    \n    \n        \n            \n                \n                    \n                    NlpResponseData\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/core/model/Response.ts\n    \n    \n        \n            \n                \n                    \n                    NoResponse\n                \n            \n            \n                \n                    If NoResponse is returned from an interceptor the user does not receive a visible message.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                    Generic response type that will be returned from our interceptors.\nA Response either returns a payload and additional information that can be used in the next processing steps\nor it returns a NoResponse.\n\n                \n            \n            \n                \n                        literal type | NoResponse\n\n                \n            \n        \n    \n    src/nlp_adapter/rasa/model/RasaResponse.ts\n    \n    \n        \n            \n                \n                    \n                    RasaEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RasaIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RasaParseResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RasaResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RasaTextResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/chat_adapter/slack/model/SlackResponse.ts\n    \n    \n        \n            \n                \n                    \n                    SlackErrorResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SlackOpenChannelResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SlackResponse\n                \n            \n            \n                \n                            SlackTextResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SlackTextResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/chat_adapter/slack/model/SlackRequest.ts\n    \n    \n        \n            \n                \n                    \n                    SlackMessage\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SlackRequest\n                \n            \n            \n                \n                            SlackMessage\n\n                \n            \n        \n    \n    src/nlp_adapter/snips/model/SnipsTextResponse.ts\n    \n    \n        \n            \n                \n                    \n                    SnipsEntity\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SnipsIntent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SnipsResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/nlp_adapter/model/TextRequest.ts\n    \n    \n        \n            \n                \n                    \n                    TextRequest\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adapter   (src/.../getAdapter.ts)\n                        \n                        \n                            agents   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            chatToCore   (src/.../getInterceptors.ts)\n                        \n                        \n                            config   (src/.../configFacebookDf2.ts)\n                        \n                        \n                            config   (src/.../configFacebookRasa.ts)\n                        \n                        \n                            config   (src/.../configSlackDf2.ts)\n                        \n                        \n                            config   (src/.../getConfig.ts)\n                        \n                        \n                            configPort   (src/.../getConfig.ts)\n                        \n                        \n                            DEFAULT_LOG_MESSAGES   (src/.../logMessages.ts)\n                        \n                        \n                            DEFAULT_MESSAGES   (src/.../messages.ts)\n                        \n                        \n                            doesResponsePassScoringThreshold   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            interceptorConfig   (src/.../interceptorConfig.ts)\n                        \n                        \n                            LOG_MESSAGES   (src/.../logMessages.ts)\n                        \n                        \n                            logger   (src/.../logger.ts)\n                        \n                        \n                            logLevel   (src/.../logger.ts)\n                        \n                        \n                            MESSAGES   (src/.../messages.ts)\n                        \n                        \n                            nlpToCore   (src/.../getInterceptors.ts)\n                        \n                        \n                            nlpToNlp   (src/.../getInterceptors.ts)\n                        \n                        \n                            platformChatFacebook   (src/.../platformChatFacebook.ts)\n                        \n                        \n                            platformChatSlack   (src/.../platformChatSlack.ts)\n                        \n                        \n                            platformNlpDialogflow   (src/.../platformNlpDialogflow.ts)\n                        \n                        \n                            platformNlpDialogflowV2   (src/.../platformNlpDialogflowV2.ts)\n                        \n                        \n                            platformNlpRasa   (src/.../platformNlpRasa.ts)\n                        \n                        \n                            platformNlpSnips   (src/.../platformNlpSnips.ts)\n                        \n                        \n                            PRIMARY_AGENT_INDEX   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            serverConfig   (src/.../serverConfig.ts)\n                        \n                        \n                            WEBHOOK_PATH   (src/.../webhook.ts)\n                        \n                        \n                            WEBHOOK_VERIFICATION   (src/.../webhook.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/getAdapter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adapter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Adapter\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    get nlp(): NlpAdapter {\n        return new (getConfig()).platform.nlp.constructor();\n    },\n    get chat(): ChatAdapter {\n        return new (getConfig()).platform.chat.constructor();\n    },\n}\n                        \n                    \n\n                \n                    \n                        Convenience object to provide access to the NlpAdapter and ChatAdapter.\n\n                    \n                \n\n            \n        \n\n    src/core/utils/findBestNlpAnswerForTextRequest.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            agents\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : getOrderedAgents()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            doesResponsePassScoringThreshold\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n    botResponse: NlpResponse,\n    agentIndex: number,\n): boolean => {\n    const minimalAcceptableScore = agents[agentIndex].minScore;\n    const textRequestResult = botResponse.textRequestResult;\n    const score = textRequestResult.score;\n\n    return score >= minimalAcceptableScore;\n}\n                        \n                    \n\n                \n                    \n                        Checks if the message passes the agent specific minimal threshold, i.e. the confidence of the NLP service exceeds\nsome predefined and individually set threshold.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PRIMARY_AGENT_INDEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n\n\n            \n        \n\n    src/core/getInterceptors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            chatToCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Promise>\n\n                        \n                    \n                    \n                        \n                            Default value : getConfig().interceptors.chatToCore()\n                        \n                    \n\n                \n                    \n                        More information regarding the usage of the interceptors can be found at\nInterceptor\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nlpToCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise>\n\n                        \n                    \n                    \n                        \n                            Default value : getConfig().interceptors.nlpToCore()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nlpToNlp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise>\n\n                        \n                    \n                    \n                        \n                            Default value : getConfig().interceptors.nlpToNlp()\n                        \n                    \n\n\n            \n        \n\n    src/configuration/configFacebookDf2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    interceptors: interceptorConfig,\n    platform: {\n        chat: platformChatFacebook,\n        nlp: platformNlpDialogflowV2,\n    },\n    server: serverConfig,\n}\n                        \n                    \n\n                \n                    \n                        An exemplar configuration using Facebook and DialogflowV2.\nYou can exchange elements (e.g. use Slack instead of Facebook) by using a different respective (messenger) configuration.\n\n                    \n                \n\n            \n        \n\n    src/configuration/configFacebookRasa.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    interceptors: interceptorConfig,\n    platform: {\n        chat: platformChatFacebook,\n        nlp: platformNlpRasa,\n    },\n    server: serverConfig,\n}\n                        \n                    \n\n                \n                    \n                        An exemplar configuration using Facebook and Rasa.\nYou can exchange elements (e.g. use Slack instead of Facebook) by using a different respective (messenger) configuration.\n\n                    \n                \n\n            \n        \n\n    src/configuration/configSlackDf2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    interceptors: interceptorConfig,\n    platform: {\n        chat: platformChatSlack,\n        nlp: platformNlpDialogflowV2,\n    },\n    server: serverConfig,\n}\n                        \n                    \n\n                \n                    \n                        An exemplar configuration using Slack and DialogflowV2.\nYou can exchange elements (e.g. use Facebook instead of Slack) by using a different respective (messenger) configuration.\n\n                    \n                \n\n            \n        \n\n    src/core/getConfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            configPort\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n\n\n            \n        \n\n    src/constants/logMessages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_LOG_MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    chat: {\n        convertToUrlButton: 'Only URL buttons are implemented as of yet.',\n        customChat: 'custom chat',\n        facebook: 'Facebook',\n        incomingGetRequest: 'Received incoming GET request',\n        incomingPostRequest: 'Received incoming POST request.',\n        initWebhook: 'Init webhook for ',\n        missingAppSecret: 'Missing app_secret in config file.',\n        missingPageAccessToken: 'Missing page_access_token in config file.',\n        missingVerifyToken: 'Missing verify_token in config file.',\n        noPageSubscriptionEvent:\n            '404 Not Found- Event is not from a page subscription.',\n        noUrlProvided: 'No URL provided.',\n        noWebsocketError: 'No websocket with the messengerUserID ',\n        pageSubscriptionEvent: 'Page subscription event.',\n        payloadNotVerified: 'The sha1 signature could not be verified.',\n        responseTypeNotImplemented:\n            'CustomChatAdapter: Not implemented response type: ',\n        sendingMessageToUser: 'Sending message to user ',\n        unableToSendResponse: 'Message could not be sent to user.',\n        webhookListening: 'Webhook is listening on port',\n        webhookNotVerfied:\n            'Unable to verify Webhook. Unauthorized Access: Verify tokens not present',\n        webhookVerified: 'Webhook is verfified.',\n        websocketError: 'Message could not be sent to user (contactClient).',\n    },\n    connections: {\n        component: {\n            database: 'database',\n            websocket: 'WebSocket',\n        },\n        userConnectedTo: 'User connected to ',\n    },\n    core: {\n        handleReceivedMessage:\n            'Core: Error whilst handling received message in core (handleReceivedMessageInCore) => ',\n        handleTextRequest: 'Core: handleTextRequest => ',\n        isFallbackIntent: 'Is fallback intent.',\n        noResponseNotPossible: 'No Response should not occur in this adapter.',\n        scoreBelowThreshold: 'Score below threshold.',\n        sendToNextAgent: 'Send request to next agent...',\n        transformToChatAdapterResponseError:\n            'An error occured during the transformation of the NLPMessage to ChatAdapterResponse.',\n        unsupportedButtonError: 'This button is not supported.',\n        unsupportedCustomPayloadError: 'This payload is not supported.',\n    },\n    database: {\n        connectionUndefined:\n            'Connection to database failed. Connection undefined.',\n        failedToConnect: 'Failed to connect to database: ',\n        userNotFoundOrCreatable:\n            'User not found and provided information is insufficient to create.',\n    },\n    initializeLogging: 'Initialized Logger on level: ',\n    nlp: {\n        adapter: {\n            dialogflowAdapter: 'DialogflowAdapter: ',\n            dialogflowV2Adapter: 'DialogflowV2Adapter: ',\n            rasaAdapter: 'RasaAdapter: ',\n        },\n        contextCreated:\n            'Context created. API v2 typings are weird, log response and change framework',\n        deleteAllContexts: 'Error whilst deleting all contexts: ',\n        deleteSelectedContexts: 'Error whilst deleting selected contexts: ',\n        moreThanOneResponse:\n            'Error: A miracle! More than one response returned. Examine me: ',\n        sendTextRequest: 'Error Occured in sendTextRequest: ',\n        setContexts: 'Added the following contexts: ',\n        toNlpMessage: 'Unknown message type.',\n        unableToAddContexts:\n            'unable to set at least one of the following contexts: ',\n    },\n    request: {\n        text_request: 'Sending a message to agent. Message content: ',\n    },\n    response: {\n        action: 'Action: ',\n        after_action: 'After action: ',\n        agent: 'Agent: ',\n        data: 'Response data: ',\n        score: 'Score is: ',\n    },\n    textHandlingInit: 'Inside text handling...',\n    unsupportedMessageType: 'Unsupported type',\n    warnings: {\n        hash_mismatch:\n            'The provided message does not match the provided hash: ',\n        no_agents: 'No agents were provided for request: ',\n    },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : DEFAULT_LOG_MESSAGES\n                        \n                    \n\n\n            \n        \n\n    src/constants/messages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    defaultAttachmentResponse: 'I prefer cute kittens!',\n    error: {\n        general: '',\n        handlingBetweenCoreAndChatAdapter:\n            'That did not quite work. Something went wrong during processing your answer. Please try again!',\n        messageHandlingInCore:\n            'A problem occured during the processing of your request. Please try again!',\n        unsupportedAttachment:\n            'I currently do not support this kind of attachment.',\n        unsupportedFormat:\n            'I was unable to process your message: Unsupported message type. I can currently only process \\\n            text messages, audio messages and the following attachments: images (.png or .jpg).',\n    },\n    links: {\n        kitten:\n            'https://www.petbarn.com.au/petspot/app/uploads/2019/01/kitten-000017380158_Smaller.jpg',\n    },\n    noAgent:\n        'I currently do not use an agent that allows me to understand natural language.',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : DEFAULT_MESSAGES\n                        \n                    \n\n\n            \n        \n\n    src/configuration/interceptorConfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InterceptorConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    chatToCore: MirrorInterceptor.getInstance,\n    nlpToCore: MirrorInterceptor.getInstance,\n    nlpToNlp: MirrorInterceptor.getInstance,\n}\n                        \n                    \n\n                \n                    \n                        Simple interceptor configuration. Interceptors are interceptors across the framework to manipulate messages or\nperform further actions. These exemplar interceptors are only used to mirror an incoming message without further\nmodifications. You can write arbitrarily complex interceptors, for more information see\nhere.\n\n                    \n                \n\n            \n        \n\n    src/logger.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : winston.createLogger({\n    format: winston.format.json(),\n    level: logLevel,\n    transports: [\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'userDefinedLogging.log' }),\n    ],\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.loggingLevel || 'verbose'\n                        \n                    \n\n                \n                    \n                        We initialize and export an instance of a winston logger, using the default npm logging levels\n(see https://www.npmjs.com/package/winston#logging-levels)\nAll logs with a severity equal or above error are stored in error.log\nAll logs with a severity equal or above the logLevel set by yourself (default: verbose)\nare stored in userDefinedLogging.log\n\n                    \n                \n\n            \n        \n\n    src/configuration/platformChatFacebook.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformChatFacebook\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FacebookChatConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    appSecret: 'YOUR_APP_SECRET',\n    constructor: FacebookAdapter,\n    name: 'facebook',\n    pageAccessToken: 'YOUR_PAGE_ACCESS_TOKEN',\n    url: 'https://graph.facebook.com/',\n    verifyToken: 'YOUR_VERIFY_TOKEN',\n    version: 'v3.3',\n    webhook_path: '/webhook',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Facebook adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Facebook section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/configuration/platformChatSlack.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformChatSlack\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChatConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    appSecret: 'YOUR-SLACK-APP-SECRET',\n    constructor: SlackAdapter,\n    name: 'slack',\n    url: 'https://slack.com/api/chat.postMessage',\n    webhook_path: '/webhook',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Slack adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Slack section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/configuration/platformNlpDialogflow.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpDialogflow\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DialogflowConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        first_agent: {\n            defaultLifespan: 2,\n            executionIndex: 0,\n            project_id: '', //Not required for V1, can be left empty.\n            languageCode: 'en',\n            minScore: 0.75,\n            token: 'YOUR_DIALOGFLOW_TOKEN_FROM_AGENT_1',\n            url: 'https://api.dialogflow.com/v1/query?v=20150910',\n        },\n        second_agent: {\n            defaultLifespan: 2,\n            executionIndex: 1,\n            project_id: '', //Not required for V1, can be left empty.\n            languageCode: 'en',\n            minScore: 0.5,\n            token: 'YOUR_DIALOGFLOW_TOKEN_FROM_AGENT_2',\n            url: 'https://api.dialogflow.com/v1/query?v=20150910',\n        },\n    },\n    constructor: DialogflowAdapter,\n    name: 'dialogflow',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Dialogflow adapter (using version 1 of the Dialogflow API). If you are unsure which\ninformation is required and how to retrieve it, take a look at the\nDialogflow section of our documentation.\nIMPORTANT: Version 1 is deprecated and the documentation might be incomplete. Please consider switching to version 2.\n\n                    \n                \n\n            \n        \n\n    src/configuration/platformNlpDialogflowV2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpDialogflowV2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DialogflowConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        my_first_agent: {\n            defaultLifespan: 2,\n            executionIndex: 0,\n            languageCode: 'en-US',\n            minScore: 0.8,\n            project_id: 'GCP-ID-Project1',\n            token: 'path/to/your/dialogflowApiToken1.json',\n            url: '', // You do not need an endpoint url. This is provided by the Dialogflow dependency itself.\n        },\n        my_second_agent: {\n            defaultLifespan: 2,\n            executionIndex: 1,\n            languageCode: 'en-US',\n            minScore: 0.75,\n            project_id: 'GCP-ID-Project2',\n            token: 'path/to/your/dialogflowApiToken2.json',\n            url: '', // You do not need an endpoint url. This is provided by the Dialogflow dependency itself.\n        },\n    },\n    constructor: DialogflowV2Adapter,\n    name: 'dialogflowV2',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Dialogflow adapter (using version 2 of the Dialogflow API). If you are unsure which\ninformation is required and how to retrieve it, take a look at the\nDialogflow section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/configuration/platformNlpRasa.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpRasa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NlpConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        rasa_test: {\n            executionIndex: 0,\n            languageCode: 'en',\n            minScore: 0.5,\n            token: 'your_secret_token',\n            url: 'http://localhost:5005',\n        },\n    },\n    constructor: RasaAdapter,\n    name: 'rasa',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Rasa adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Rasa section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/configuration/platformNlpSnips.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpSnips\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NlpConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        snips_test: {\n            executionIndex: 0,\n            languageCode: 'en',\n            minScore: 0.8,\n            token: 'your_secret token',\n            url: 'https://www.url-to-your-server.com',\n        },\n    },\n    constructor: SnipsAdapter,\n    name: 'snips',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Snips adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Snips section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/configuration/serverConfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            serverConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ServerConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    // The port your application runs on. If your application runs inside of a proxy,\n    // do not enter the port the messaging platform uses to communicate with, but the internally mapped port.\n    port: 1234,\n}\n                        \n                    \n\n\n            \n        \n\n    src/chat_adapter/facebook/communication/webhook.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            WEBHOOK_PATH\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/webhook'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WEBHOOK_VERIFICATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/webhook'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
