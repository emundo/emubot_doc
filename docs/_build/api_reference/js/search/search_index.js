var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/ChatAdapter.html",[0,0.258,1,0.902]],["body/interfaces/ChatAdapter.html",[0,0.405,1,1.687,2,0.932,3,0.446,4,0.323,5,0.213,6,2.473,7,0.69,8,1.944,9,2.475,10,4.06,11,1.252,12,3.323,13,2.62,14,2.475,15,2.475,16,2.185,17,4.06,18,2.523,19,4.06,20,1.348,21,2.983,22,2.639,23,2.475,24,2.185,25,3.323,26,3.323,27,3.323,28,1.512,29,1.396,30,1.944,31,4.06,32,3.323,33,0.323,34,0.889,35,2.348,36,2.989,37,2.754,38,2.838,39,1.121,40,3.021,41,1.121,42,2.989,43,2.989,44,4.904,45,4.904,46,4.904,47,3.323,48,4.06,49,4.06,50,2.099,51,3.323,52,4.06,53,2.185,54,4.06,55,3.323,56,1.944,57,1.252,58,1,59,0.043,60,0.69,61,0.359,62,0.889,63,1.577,64,2.185,65,1.944,66,1.88,67,1.004,68,0.915,69,3.021,70,4.06,71,4.06,72,2.185,73,3.323,74,1.396,75,2.838,76,3.323,77,4.06,78,4.06,79,1.841,80,1.738,81,1.841,82,0.515,83,1.841,84,3.021,85,4.06,86,4.06,87,4.06,88,4.312,89,2.099,90,2.838,91,2.838,92,3.211,93,1.578,94,3.323,95,4.013,96,4.06,97,3.323,98,3.323,99,4.06,100,2.838,101,4.06,102,2.475,103,0.581,104,2.196,105,1.447,106,0.383,107,1.447,108,2.111,109,0.022,110,0.029,111,0.022]],["title/interfaces/ClassConstructor.html",[0,0.258,112,2.045]],["body/interfaces/ClassConstructor.html",[0,0.351,1,1.225,2,0.902,3,0.432,4,0.425,5,0.206,7,0.497,8,1.4,9,1.782,14,1.782,15,2.421,18,2.16,22,2.137,28,1.225,32,2.393,53,2.604,56,1.4,57,1.225,59,0.044,60,0.822,61,0.492,63,1.006,65,1.4,67,0.64,68,0.766,72,2.723,74,1.551,82,0.698,103,0.641,104,1.4,106,0.689,109,0.021,110,0.029,111,0.021,112,3.381,113,2.393,114,3.972,115,0.213,116,2.422,117,2.001,118,0.902,119,2.924,120,2.924,121,1.006,122,2.924,123,1.4,124,2.924,125,2.924,126,1.4,127,2.043,128,2.924,129,2.924,130,2.284,131,2.043,132,2.924,133,2.043,134,2.393,135,2.924,136,2.453,137,2.393,138,2.043,139,2.924,140,2.776,141,3.972,142,2.924,143,2.924,144,2.776,145,1.782,146,1.4,147,2.393,148,2.924,149,0.497,150,0.566,151,2.393,152,2.776,153,1.4,154,2.924,155,2.924,156,3.152,157,2.393,158,2.924,159,1.73,160,3.381,161,2.393,162,3.972,163,2.924,164,2.924,165,0.807,166,2.043,167,2.071,168,2.924,169,2.924,170,2.393,171,3.972,172,1.902,173,3.152,174,2.924,175,2.924,176,1.782,177,2.776,178,2.749,179,1.782,180,2.776,181,2.043,182,1.782,183,2.393,184,2.393,185,2.393,186,3.691,187,2.393,188,1.4,189,1.251,190,2.043,191,2.393,192,2.808,193,2.924,194,2.393,195,2.924,196,2.393,197,1.4,198,2.393,199,1.574,200,2.924,201,2.776,202,2.924,203,1.782,204,1.664,205,2.043,206,2.924,207,2.393,208,2.393,209,1.574,210,2.924,211,0.902,212,2.043,213,2.393,214,1.782,215,2.421,216,1.121,217,2.393,218,2.924,219,2.924,220,1.782,221,2.421,222,2.393,223,1.574,224,2.421,225,2.776,226,2.393,227,2.776,228,1.782,229,1.782,230,1.782,231,2.043,232,1.782,233,1.121]],["title/classes/CliAdapter.html",[115,0.157,234,1.784]],["body/classes/CliAdapter.html",[1,1.662,3,0.484,4,0.351,5,0.231,7,0.556,11,1.01,20,1.176,21,2.828,29,1.741,33,0.351,34,0.938,35,2.051,36,3.086,37,2.569,39,1.181,58,1.055,59,0.044,60,0.728,61,0.447,62,0.938,63,1.126,67,1.045,68,0.933,79,1.996,81,1.996,82,0.543,83,1.996,92,2.909,93,1.01,103,0.721,104,2.286,105,1.568,106,0.415,107,1.568,109,0.024,110,0.031,111,0.024,115,0.176,116,2.286,126,1.568,146,2.051,149,0.86,150,0.98,165,0.904,211,1.472,233,2.067,234,2.611,235,0.904,236,2.68,237,1.109,238,2.569,239,2.993,240,1.055,241,4.411,242,4.411,243,3.336,244,1.937,245,2.35,246,4.284,247,3.506,248,3.275,249,4.284,250,3.275,251,3.275,252,3.275,253,3.275,254,2.611,255,2.68,256,2.289,257,2.289,258,2.68,259,2.68,260,2.289,261,2.305,262,2.289,263,2.289,264,3.275,265,4.284,266,3.275,267,1.996,268,3.275,269,3.506,270,3.275,271,3.275,272,3.506,273,2.68,274,0.807,275,2.68,276,3.275,277,2.68,278,2.68,279,3.275]],["title/classes/DialogflowAdapter.html",[115,0.157,280,1.575]],["body/classes/DialogflowAdapter.html",[0,0.355,3,0.439,4,0.318,5,0.21,7,0.505,11,1.238,20,1.2,28,1.502,33,0.318,34,0.879,39,1.114,43,2.448,50,1.718,57,1.502,58,1.2,59,0.044,60,0.828,61,0.449,62,1.067,66,1.54,67,1.067,68,0.926,82,0.754,93,1.238,103,0.68,106,0.377,109,0.021,110,0.029,111,0.021,115,0.159,118,1.502,121,1.022,149,0.682,150,0.777,159,2.011,165,0.82,172,2.332,188,1.923,189,1.718,204,1.022,211,1.402,216,1.54,235,0.82,237,0.879,240,0.989,244,1.985,274,1.2,280,3.033,281,2.432,282,4.016,283,2.738,284,2.934,285,3.286,286,3.286,287,4.016,288,2.161,289,2.448,290,3.286,291,3.286,292,2.806,293,2.161,294,1.718,295,2.178,296,1.75,297,1.75,298,1.951,299,2.178,300,1.14,301,1.423,302,2.972,303,2.432,304,2.411,305,2.751,306,2.972,307,1.599,308,3.404,309,2.972,310,2.432,311,2.084,312,2.972,313,1.811,314,2.332,315,2.972,316,1.811,317,1.599,318,1.811,319,2.432,320,1.718,321,1.811,322,1.423,323,1.599,324,1.599,325,2.077,326,2.432,327,4.548,328,2.972]],["title/interfaces/DialogflowConfig.html",[0,0.258,329,1.575]],["body/interfaces/DialogflowConfig.html",[0,0.378,2,1.319,3,0.632,4,0.458,5,0.302,33,0.458,59,0.043,61,0.476,82,0.641,103,0.641,106,0.683,109,0.031,110,0.036,111,0.031,136,2.164,167,2.382,181,2.988,204,1.471,205,2.988,207,3.5,224,3.283,240,1.246,280,2.301,329,2.722,330,3.5,331,3.535,332,5.567,333,2.988,334,4.276,335,5.058]],["title/classes/DialogflowV2Adapter.html",[115,0.157,288,1.575]],["body/classes/DialogflowV2Adapter.html",[0,0.35,3,0.43,4,0.312,5,0.205,7,0.495,11,1.221,20,1.19,24,2.131,28,1.489,33,0.312,34,0.867,39,1.106,57,1.221,58,1.19,59,0.044,60,0.821,61,0.446,62,1.058,63,1.362,67,1.058,68,0.922,82,0.753,93,1.221,100,2.768,103,0.688,106,0.369,109,0.021,110,0.028,111,0.021,115,0.156,118,1.489,121,1.001,149,0.673,150,0.767,165,0.804,172,2.495,183,3.241,184,3.241,185,3.241,188,1.896,189,1.695,204,1.001,211,1.388,216,1.519,220,2.414,235,0.804,237,0.867,240,0.976,244,1.98,274,1.19,283,2.422,284,2.599,288,3.083,289,2.414,292,2.768,293,2.131,294,1.695,295,2.155,296,1.737,297,1.737,298,1.937,299,2.155,300,1.116,301,1.394,303,2.383,304,2.422,305,2.727,310,2.383,311,2.322,313,1.775,314,2.313,316,1.775,317,1.567,318,1.775,319,2.383,320,1.695,321,1.775,322,1.394,323,1.567,324,1.567,325,2.035,326,2.383,329,2.994,336,2.383,337,3.96,338,2.414,339,3.96,340,2.911,341,2.911,342,2.911,343,2.911,344,2.911,345,2.911,346,2.944,347,4.83,348,4.5,349,4.5,350,2.911]],["title/classes/DummyNlpAdapter.html",[115,0.157,351,1.784]],["body/classes/DummyNlpAdapter.html",[3,0.354,4,0.257,5,0.169,20,1.207,33,0.257,34,0.757,39,1.106,58,1.273,59,0.044,60,0.799,61,0.456,62,0.972,67,0.972,68,0.878,82,0.745,103,0.596,106,0.514,109,0.017,110,0.025,111,0.017,115,0.129,116,2.125,118,1.25,121,0.825,126,2.252,136,1.899,152,1.677,156,3.101,160,2.417,167,1.899,173,2.417,178,2.108,191,1.964,192,1.861,201,2.417,204,1.189,211,1.066,224,2.108,235,0.662,240,0.852,244,1.394,245,2.341,274,1.317,278,1.964,295,1.941,296,1.394,297,1.394,298,1.555,299,1.941,300,0.92,301,1.149,304,2.097,305,2.697,307,1.291,314,2.346,322,1.941,324,1.291,346,3.299,351,2.705,352,1.677,353,4.055,354,3.458,355,3.85,356,2.399,357,1.462,358,2.399,359,3.318,360,2.399,361,1.462,362,3.632,363,2.399,364,1.964,365,2.399,366,2.399,367,4.437,368,2.399,369,3.68,370,2.399,371,2.399,372,2.83,373,1.677,374,2.399,375,2.399,376,2.399,377,2.399,378,2.399,379,2.399,380,4.055,381,4.704,382,4.055,383,1.677,384,2.399,385,2.399,386,2.399,387,4.43,388,2.399,389,5.05,390,4.437,391,3.632,392,3.101,393,4.437,394,4.437,395,3.458,396,2.399,397,2.399,398,2.399,399,2.399,400,3.458,401,4.01,402,4.437,403,3.632,404,4.437,405,4.9,406,3.632,407,3.101,408,3.632,409,2.097,410,3.458,411,4.055,412,2.399,413,2.399,414,2.399,415,2.399,416,3.458,417,2.399,418,3.458,419,2.182,420,2.399,421,1.964,422,2.399,423,1.677,424,2.83,425,1.964]],["title/classes/FacebookAdapter.html",[30,1.401,115,0.157]],["body/classes/FacebookAdapter.html",[1,1.637,3,0.458,4,0.332,5,0.219,7,0.527,20,1.221,21,2.779,29,1.705,30,1.979,33,0.332,34,0.905,35,1.979,36,3.021,37,2.502,38,2.889,39,1.163,41,0.857,58,1.019,59,0.044,60,0.702,61,0.456,62,0.905,63,1.422,67,1.018,68,0.921,79,1.892,81,1.892,82,0.628,83,2.52,92,2.833,93,1.275,103,0.72,104,2.226,105,1.486,106,0.393,107,1.486,109,0.022,110,0.03,111,0.022,115,0.166,116,2.226,146,1.979,149,0.842,150,0.96,165,0.857,211,1.433,233,2.036,235,0.857,237,1.086,238,2.502,240,1.019,241,4.346,242,4.346,243,3.249,244,1.826,245,2.319,247,3.384,254,2.52,255,2.54,256,2.169,257,2.169,258,2.54,259,2.54,260,2.169,261,2.225,262,2.169,267,1.892,269,3.384,272,3.384,273,2.54,274,1.019,277,2.54,426,2.54,427,1.979,428,4.134,429,3.104,430,3.104,431,3.104,432,3.104,433,4.134,434,4.134,435,2.54,436,2.54,437,4.134,438,3.104,439,2.54,440,3.104,441,4.134,442,3.104,443,3.104,444,3.104,445,3.104,446,3.384,447,3.104,448,3.104,449,3.104,450,3.104,451,3.104,452,3.104,453,3.104,454,3.104,455,3.104,456,2.54,457,3.104,458,3.104,459,1.67,460,3.104,461,3.104,462,3.104,463,2.54]],["title/interfaces/FacebookChatConfig.html",[0,0.258,464,1.784]],["body/interfaces/FacebookChatConfig.html",[0,0.486,2,1.09,3,0.522,4,0.378,5,0.249,7,0.6,8,2.154,11,1.387,29,1.547,30,2.495,33,0.378,41,1.438,57,1.387,59,0.043,61,0.437,65,2.154,74,1.792,80,1.925,82,0.724,89,1.925,103,0.57,106,0.448,109,0.025,110,0.032,111,0.025,149,0.764,150,0.871,159,1.355,172,1.692,177,2.47,179,2.742,180,2.47,215,2.742,221,3.017,223,2.421,233,1.725,237,0.985,238,2.664,240,1.108,243,3.144,267,2.154,284,3.045,290,4.264,294,2.23,331,3.144,333,2.47,427,2.813,456,2.892,459,2.421,464,2.742,465,2.892,466,4.499,467,4.499,468,3.682,469,4.499,470,4.499,471,3.954,472,3.176,473,5.211,474,2.742,475,3.682,476,2.154,477,3.144,478,4.502,479,3.144,480,3.144,481,2.742,482,4.499]],["title/interfaces/Interceptor.html",[0,0.258,123,1.401]],["body/interfaces/Interceptor.html",[0,0.346,1,1.02,2,0.696,3,0.334,4,0.242,5,0.159,7,0.562,13,1.584,15,2.017,16,1.781,18,2.297,20,1.436,22,2.321,23,2.629,24,1.781,25,2.708,28,1.02,33,0.242,34,0.725,35,1.584,39,0.858,41,1.403,50,2.053,53,1.781,56,1.584,58,0.556,59,0.043,60,0.562,61,0.472,62,0.495,63,1.579,64,1.781,66,2.021,67,0.945,68,0.562,73,2.708,74,1.748,80,1.416,82,0.497,89,2.175,91,2.313,102,2.017,103,0.286,104,1.584,105,1.081,106,0.286,107,1.584,108,2.313,109,0.016,110,0.024,111,0.016,117,1.84,121,1.483,123,2.702,127,2.737,130,2.053,133,2.313,136,1.846,140,3.353,144,2.313,149,0.562,153,1.584,159,1.76,165,1.081,166,2.313,167,1.416,172,2.198,176,1.376,177,3.014,182,2.017,186,2.708,197,1.584,216,1.84,217,2.708,220,2.017,228,2.629,229,2.629,230,2.629,232,2.629,274,0.815,289,2.017,300,1.269,304,1.416,311,1.416,338,2.017,409,1.846,427,1.584,476,1.584,483,1.848,484,2.708,485,4.313,486,3.309,487,2.313,488,3.309,489,2.313,490,3.309,491,2.708,492,3.309,493,3.309,494,2.924,495,3.309,496,3.53,497,3.309,498,2.708,499,2.708,500,3.309,501,3.206,502,2.737,503,3.309,504,3.309,505,4.16,506,4.313,507,3.014,508,2.017,509,3.53,510,4.798,511,2.313,512,2.629,513,3.309,514,3.309,515,3.014,516,3.309,517,2.313,518,2.708,519,4.798,520,2.708,521,2.708,522,3.53,523,4.798,524,2.629,525,3.53,526,3.53,527,3.309,528,2.313,529,3.014,530,3.309,531,3.53,532,3.309,533,3.309,534,3.309,535,3.309,536,2.708,537,3.309,538,3.309,539,1.781,540,3.309,541,3.309,542,3.309,543,3.309,544,2.017,545,3.309,546,2.313,547,2.313,548,3.309,549,3.309,550,2.708,551,3.309,552,4.313,553,2.708,554,3.309,555,3.309,556,2.708,557,3.309,558,3.309,559,3.309,560,2.708,561,3.309,562,3.309,563,3.309,564,2.708,565,2.017,566,3.309,567,2.708,568,2.708,569,3.309,570,2.708,571,3.309,572,3.309,573,3.309,574,2.313,575,2.708,576,2.258,577,2.708,578,3.309,579,3.309,580,3.309,581,2.708,582,3.53,583,3.309,584,3.309,585,3.309,586,2.258,587,2.258,588,2.258,589,2.258,590,1.848,591,2.258,592,2.258]],["title/classes/MirrorInterceptor.html",[115,0.157,593,2.045]],["body/classes/MirrorInterceptor.html",[2,1.571,3,0.492,4,0.357,5,0.235,7,0.566,13,2.074,14,2.64,18,2.074,20,1.302,33,0.357,34,0.949,39,0.949,50,1.853,58,1.067,59,0.043,60,0.566,61,0.382,62,0.73,63,1.146,64,2.331,66,1.954,67,1.116,68,0.866,74,1.49,82,0.61,102,2.64,103,0.646,105,1.595,106,0.422,109,0.024,110,0.031,111,0.024,115,0.258,117,1.661,123,2.64,126,2.074,127,3.363,130,1.853,145,3.106,149,0.92,150,0.839,153,2.074,165,0.919,166,3.561,189,1.853,197,2.074,211,1.335,214,2.64,232,3.106,235,0.919,237,0.949,244,1.753,245,2.06,274,1.067,484,3.545,499,2.726,501,2.726,507,3.027,508,2.64,522,3.545,524,2.64,570,3.545,574,3.027,575,3.545,577,3.545,593,3.949,594,2.726,595,4.331,596,4.331,597,4.331,598,3.106,599,4.331,600,4.331,601,3.545,602,4.331,603,3.545,604,3.027,605,4.331,606,4.331,607,4.331,608,3.027,609,4.813,610,5.096,611,3.331,612,3.331,613,3.027,614,3.545,615,3.331,616,4.331,617,2.726,618,3.331,619,3.331,620,3.331,621,3.331,622,3.331,623,3.331,624,3.331]],["title/interfaces/NlpAdapter.html",[0,0.258,118,0.902]],["body/interfaces/NlpAdapter.html",[0,0.353,2,0.721,3,0.345,4,0.25,5,0.369,7,0.791,8,2.457,14,2.672,20,0.836,29,1.167,33,0.25,34,0.743,39,0.96,41,0.937,42,2.068,56,1.625,58,1.08,59,0.044,60,0.941,61,0.411,62,0.96,65,2.457,66,1.968,67,1.124,68,0.872,75,2.372,80,2.274,82,0.74,90,2.372,91,2.372,93,0.721,98,2.777,103,0.43,106,0.43,108,3.714,109,0.017,110,0.024,111,0.017,117,2.123,118,1.046,121,1.374,130,2.196,131,3.587,134,2.777,136,2.196,146,1.625,149,0.872,150,0.994,161,1.913,182,3.128,190,2.372,199,2.359,204,1.374,209,2.762,235,0.937,237,0.743,240,0.836,274,0.576,295,2.099,296,1.374,297,1.374,298,1.532,299,1.913,304,2.304,305,2.687,307,1.258,311,2.447,314,2.399,317,1.258,322,2.505,323,1.258,357,1.425,359,3.588,361,1.425,362,3.588,364,1.913,387,1.913,392,2.372,401,1.913,407,1.634,409,1.452,481,2.068,491,1.913,507,2.372,512,2.068,517,3.394,526,2.777,565,2.837,581,4.201,625,1.913,626,3.394,627,2.359,628,4.384,629,3.394,630,2.777,631,3.394,632,2.777,633,3.394,634,2.777,635,2.372,636,2.777,637,1.826,638,2.338,639,4.384,640,4.384,641,4.201,642,5.132,643,4.201,644,4.856,645,5.538,646,4.856,647,2.338,648,4.856,649,3.588,650,2.338,651,3.394,652,2.338,653,2.777,654,2.777,655,3.394,656,2.792,657,2.338,658,2.338,659,1.425,660,2.338,661,1.913]],["title/classes/RasaAdapter.html",[115,0.157,662,1.784]],["body/classes/RasaAdapter.html",[0,0.369,3,0.465,4,0.337,5,0.222,7,0.535,11,1.287,28,1.287,33,0.337,34,0.914,39,1.136,41,0.869,58,1.229,59,0.044,60,0.847,61,0.458,62,1.092,67,1.092,68,0.938,82,0.758,93,1.287,103,0.676,106,0.399,109,0.023,110,0.03,111,0.023,115,0.169,117,1.208,118,1.538,121,1.083,149,0.709,150,0.808,165,0.869,188,1.999,189,1.787,199,1.695,204,1.083,211,1.444,216,1.601,235,0.869,237,0.914,240,1.029,244,2,245,2.392,274,1.229,293,2.247,294,1.787,295,2.242,296,1.715,297,1.784,298,1.912,299,2.242,300,1.208,301,1.508,304,2.328,305,2.795,307,1.695,308,3.485,311,2.22,313,1.92,314,2.605,316,1.92,317,1.695,318,1.92,320,1.348,321,1.92,322,1.508,323,1.695,357,2.545,361,2.545,419,2.247,627,1.695,656,2.201,662,3.162,663,2.578,664,3.273,665,2.578,666,3.15,667,3.15,668,3.15,669,3.15,670,3.15,671,2.578,672,3.15,673,1.92,674,2.578,675,2.578]],["title/classes/SlackAdapter.html",[115,0.157,676,1.575]],["body/classes/SlackAdapter.html",[1,1.484,3,0.492,4,0.357,5,0.235,20,1.186,21,2.843,33,0.357,34,0.949,35,2.074,36,3.106,37,2.59,38,3.027,39,1.157,57,1.027,58,1.067,59,0.044,60,0.736,61,0.425,62,0.949,63,1.655,67,1.054,68,0.937,79,2.03,81,2.03,82,0.646,83,2.03,92,2.933,93,1.027,103,0.739,104,2.304,105,1.595,106,0.422,107,1.595,109,0.024,110,0.031,111,0.024,115,0.179,116,2.304,211,1.335,223,1.793,235,0.919,240,1.067,244,1.862,245,2.439,260,2.328,261,1.793,262,2.328,263,2.328,274,1.067,275,2.726,324,1.793,325,2.328,346,2.933,436,2.726,463,2.726,676,2.331,677,2.726,678,4.813,679,4.331,680,4.813,681,3.331,682,3.331,683,3.331,684,3.545,685,3.331,686,3.331,687,2.726,688,2.726,689,4.331,690,3.331,691,4.331,692,3.331,693,3.545,694,3.331,695,3.027,696,2.328,697,3.331,698,3.331,699,3.331,700,3.331,701,3.331,702,4.171,703,3.331,704,3.331,705,3.331,706,4.813,707,3.331,708,3.331,709,3.331,710,3.331,711,3.331]],["title/interfaces/SlackConfig.html",[0,0.258,712,1.784]],["body/interfaces/SlackConfig.html",[0,0.496,2,1.183,3,0.567,4,0.411,5,0.271,7,0.652,8,2.268,11,1.461,29,1.629,33,0.411,41,1.308,42,2.887,57,1.461,59,0.043,61,0.339,74,1.629,82,0.652,103,0.601,106,0.486,109,0.028,110,0.034,111,0.028,149,0.805,150,0.917,159,1.471,178,3.423,179,2.887,180,2.681,221,3.132,223,2.55,233,1.817,237,1.038,238,2.766,240,1.167,267,2.339,294,2.027,331,3.311,333,2.681,427,2.57,459,2.55,471,3.311,472,2.887,474,2.887,475,3.877,476,2.268,477,3.311,479,3.311,480,3.311,676,2.888,712,3.271,713,3.14,714,4.737,715,3.311,716,4.737,717,4.737,718,3.751,719,4.737,720,3.837]],["title/classes/SnipsAdapter.html",[115,0.157,721,1.784]],["body/classes/SnipsAdapter.html",[0,0.329,3,0.394,4,0.285,5,0.188,7,0.453,11,1.149,13,1.785,16,2.006,28,1.149,33,0.285,34,0.816,39,1.072,41,0.736,58,1.146,59,0.044,60,0.791,61,0.432,62,1.019,66,1.429,67,1.019,68,0.903,74,1.282,80,1.595,82,0.748,89,1.991,93,1.149,95,3.051,103,0.643,106,0.338,109,0.035,110,0.027,111,0.019,115,0.143,117,1.023,118,1.435,121,0.917,138,3.252,149,0.633,150,0.722,151,3.051,165,0.736,188,1.785,189,1.595,199,1.435,204,0.917,211,1.325,215,2.272,216,1.429,235,0.736,237,0.816,240,0.918,244,1.956,245,2.31,274,1.146,293,2.006,294,1.595,295,2.058,296,1.6,297,1.684,298,1.784,299,2.058,300,1.023,301,2.493,304,2.31,305,2.738,307,1.435,308,3.252,311,2.228,313,1.625,314,2.493,316,1.625,317,1.435,318,1.625,320,1.141,321,1.625,322,1.277,323,1.435,357,2.272,361,2.272,406,3.051,419,2.006,480,2.605,494,2.272,539,2.006,544,2.836,627,1.435,656,1.864,659,2.272,665,3.517,671,2.183,673,1.625,674,2.183,675,2.183,721,2.984,722,2.183,723,3.545,724,3.727,725,3.727,726,3.727,727,4.653,728,2.667,729,3.727,730,3.051,731,3.051,732,3.051,733,3.727,734,3.727,735,3.727,736,3.727,737,3.727,738,4.653,739,3.727,740,2.605,741,3.727,742,3.727,743,3.727,744,3.727,745,3.727,746,3.727,747,3.727,748,3.727,749,3.727,750,4.653,751,3.727,752,3.727,753,3.727,754,2.667,755,2.667,756,2.667,757,2.667,758,2.667,759,2.667,760,2.667,761,2.667]],["title/coverage.html",[762,3.252]],["body/coverage.html",[0,0.397,1,0.525,5,0.12,6,1.394,28,0.525,30,0.815,59,0.044,61,0.15,72,0.916,89,0.729,93,1.863,109,0.012,110,0.019,111,0.012,112,1.19,113,1.394,115,0.257,118,0.525,123,0.815,126,0.815,167,0.729,182,1.038,192,0.916,225,1.19,227,1.19,228,1.038,229,1.038,230,1.038,231,2.608,233,1.024,234,1.038,236,1.394,261,1.774,263,1.867,280,0.916,281,1.394,288,0.916,296,1.133,297,1.133,298,1.264,320,1.597,324,0.916,329,0.916,330,1.394,336,1.394,351,1.038,352,2.303,369,1.19,373,1.19,419,3.245,423,1.19,426,2.186,435,1.394,439,1.394,446,1.394,464,1.038,465,1.394,483,1.394,539,1.437,574,1.19,593,1.19,594,1.394,617,1.394,625,2.186,637,0.916,661,1.394,662,1.038,663,1.394,676,0.916,677,1.394,687,1.394,688,1.394,693,1.394,695,1.867,696,1.19,712,1.038,713,1.394,715,1.867,721,1.038,722,1.394,762,1.394,763,1.703,764,2.671,765,1.703,766,6.024,767,1.703,768,5.929,769,1.703,770,2.671,771,2.671,772,1.703,773,5.921,774,1.703,775,1.703,776,1.703,777,2.671,778,1.703,779,4.054,780,1.703,781,1.703,782,1.703,783,1.703,784,1.703,785,3.732,786,4.497,787,1.703,788,1.703,789,4.301,790,1.703,791,1.703,792,1.703,793,1.703,794,1.703,795,1.703,796,1.703,797,1.703,798,1.703,799,1.703,800,4.054,801,2.186,802,2.671,803,2.671,804,1.703,805,1.703,806,1.394,807,4.786,808,1.394,809,1.394,810,1.394,811,1.394,812,1.394,813,1.394,814,1.394,815,1.394,816,1.394,817,1.394,818,1.394,819,1.394,820,1.394,821,1.394,822,1.394,823,1.394,824,1.394,825,1.394,826,2.697,827,1.703,828,1.394,829,2.697,830,1.703,831,1.394,832,2.697,833,1.703,834,1.703,835,1.703,836,1.703,837,1.394,838,2.697,839,1.703,840,2.697,841,4.054,842,1.703,843,1.703,844,1.394,845,1.394,846,1.703,847,3.054,848,1.703,849,1.394,850,1.394,851,1.703,852,1.703,853,1.394,854,2.671,855,1.703,856,4.301,857,1.703,858,1.703,859,1.703,860,1.703,861,1.703,862,1.703,863,1.703,864,1.703,865,2.186,866,1.19,867,1.703,868,3.732,869,2.671,870,2.671,871,2.671,872,3.295,873,1.703,874,1.703,875,3.732,876,3.732,877,3.732,878,2.671,879,3.295,880,2.186,881,2.671,882,3.732,883,2.671,884,2.671,885,1.703,886,1.703,887,2.671,888,3.732,889,1.703,890,2.671,891,1.703,892,1.703,893,2.671,894,2.671,895,3.295,896,1.703,897,2.671,898,2.671,899,4.009,900,1.703,901,1.703,902,1.703,903,1.703,904,1.394,905,1.394,906,1.19,907,1.703,908,3.318,909,2.671,910,2.186,911,3.318,912,1.703,913,1.703,914,1.703,915,1.394,916,3.318,917,1.703,918,3.318,919,1.703,920,1.703,921,1.394,922,1.394,923,1.703,924,1.703]],["title/dependencies.html",[925,2.454,926,2.456]],["body/dependencies.html",[57,1.337,59,0.043,68,0.737,80,2.183,109,0.031,110,0.037,111,0.031,159,1.663,254,2.644,256,3.031,257,3.031,283,2.334,372,3.55,590,3.55,684,3.55,926,3.031,927,4.337,928,4.337,929,4.337,930,4.337,931,4.337,932,4.337,933,4.337,934,4.337,935,4.337,936,4.337,937,4.337,938,4.337,939,4.337,940,4.337,941,4.337,942,4.337,943,4.337,944,4.337,945,4.337,946,4.337,947,4.337,948,3.031,949,4.337]],["title/miscellaneous/enumerations.html",[950,1.495,951,2.876]],["body/miscellaneous/enumerations.html",[33,0.494,59,0.038,109,0.033,110,0.038,111,0.033,409,1.975,950,2.814,951,3.778,952,5.288,953,4.616,954,4.616,955,4.616,956,4.616,957,3.778,958,4.616]],["title/index.html",[33,0.263,959,2.008,960,2.008]],["body/index.html",[1,0.7,4,0.243,5,0.325,7,0.386,9,2.024,11,0.7,13,1.59,15,1.383,16,1.221,18,1.59,20,0.818,22,1.787,27,1.858,28,1.211,29,1.351,34,0.497,41,1.193,43,2.024,47,2.718,50,1.85,53,2.114,56,1.59,57,0.7,59,0.028,61,0.293,62,0.497,66,1.506,72,1.221,74,1.487,89,0.971,94,1.858,97,3.538,109,0.016,110,0.024,111,0.016,117,1.843,130,1.969,131,3.359,133,2.321,136,0.971,137,1.858,144,2.321,145,2.394,146,2.07,149,0.735,150,0.643,153,2.07,157,2.718,165,0.626,167,0.971,176,1.383,179,1.383,187,3.215,190,1.586,192,1.221,194,1.858,197,2.377,198,2.718,199,1.787,203,2.024,208,2.718,209,2.327,212,2.321,214,2.394,216,1.952,220,2.635,233,1.274,237,0.947,238,2.912,239,3.215,283,1.787,286,1.858,292,1.586,296,0.781,297,0.781,298,0.87,300,1.506,320,0.971,383,2.321,409,1.681,427,1.881,459,1.221,468,1.858,472,2.024,476,1.881,481,2.394,487,1.586,494,1.383,502,2.321,508,1.383,511,1.586,512,2.635,515,2.745,520,1.858,524,1.383,529,2.321,539,2.114,544,1.383,546,1.586,547,1.586,550,1.858,564,1.858,565,2.024,568,1.858,598,1.383,601,1.858,603,1.858,608,2.745,613,2.321,627,1.787,635,3.021,636,2.718,637,2.114,653,1.858,654,1.858,659,2.024,664,2.745,702,1.858,718,3.021,723,2.745,807,1.858,866,2.321,906,2.321,926,1.586,948,1.586,957,3.215,961,1.858,962,2.27,963,1.858,964,3.321,965,3.321,966,3.928,967,3.321,968,3.321,969,2.27,970,2.27,971,3.321,972,2.27,973,3.321,974,2.27,975,3.928,976,2.27,977,2.27,978,2.27,979,2.27,980,3.928,981,1.858,982,3.321,983,2.27,984,2.27,985,2.27,986,1.858,987,1.858,988,2.27,989,2.27,990,2.27,991,2.27,992,3.765,993,2.27,994,2.27,995,2.27,996,3.321,997,2.27,998,2.27,999,2.27,1000,1.858,1001,2.27,1002,2.27,1003,2.27,1004,2.27,1005,2.27,1006,2.27,1007,3.321,1008,2.27,1009,2.27,1010,2.27,1011,1.858,1012,2.27,1013,2.27,1014,2.27,1015,2.27,1016,2.27,1017,2.27,1018,2.27,1019,2.27,1020,2.27,1021,2.27,1022,1.858,1023,3.321,1024,2.27,1025,3.215,1026,2.27,1027,1.858,1028,2.27,1029,2.27,1030,2.27,1031,3.538,1032,2.27,1033,1.858,1034,2.27,1035,2.27,1036,2.27,1037,2.27,1038,1.858,1039,2.27,1040,2.27,1041,2.27,1042,2.27,1043,2.27,1044,2.27,1045,2.27,1046,2.27,1047,2.27,1048,2.27,1049,2.27,1050,1.858,1051,3.321,1052,2.27,1053,2.27,1054,1.858,1055,2.27,1056,2.27,1057,3.321,1058,3.321,1059,3.928,1060,3.321,1061,5.091,1062,4.063,1063,3.321,1064,3.321,1065,4.806,1066,2.27,1067,4.323,1068,2.27,1069,2.27,1070,1.858,1071,3.321,1072,2.27,1073,1.858,1074,2.718,1075,2.27,1076,2.27,1077,2.27,1078,1.858,1079,3.321,1080,2.27,1081,3.321,1082,2.27,1083,1.586,1084,3.928,1085,1.586,1086,1.858,1087,2.27,1088,2.321,1089,2.718,1090,3.321,1091,2.27,1092,2.27,1093,2.27,1094,3.928,1095,2.27,1096,5.987,1097,4.965,1098,2.27,1099,2.27,1100,1.858,1101,1.858,1102,2.27,1103,1.858,1104,3.321,1105,2.27,1106,1.858,1107,2.718,1108,2.718,1109,3.321,1110,3.321,1111,2.27,1112,2.27,1113,2.27,1114,3.321,1115,1.858,1116,2.27,1117,2.27,1118,1.858,1119,2.27,1120,2.27,1121,4.323,1122,2.27,1123,2.27,1124,2.27,1125,4.323,1126,2.27,1127,3.928,1128,2.27,1129,2.27,1130,2.27,1131,2.27,1132,2.27,1133,2.27,1134,2.27,1135,2.27,1136,2.27,1137,1.858,1138,2.27,1139,2.718,1140,1.858,1141,2.27,1142,2.27,1143,2.27,1144,1.858,1145,1.858,1146,2.27,1147,2.27,1148,2.27,1149,2.27,1150,1.858,1151,2.27,1152,2.321,1153,2.27,1154,1.858,1155,1.858,1156,1.858,1157,1.858,1158,2.27,1159,2.27,1160,2.27,1161,2.27,1162,2.27,1163,2.27,1164,2.27,1165,2.27,1166,2.27,1167,2.27,1168,2.27,1169,2.27]],["title/license.html",[959,2.008,960,2.008,1152,1.715]],["body/license.html",[2,0.57,4,0.554,5,0.338,7,0.314,8,0.886,16,1.869,23,1.127,24,0.995,29,0.636,39,0.405,41,1.077,50,2.145,59,0.025,60,0.484,64,0.995,65,0.886,90,3.74,100,1.293,103,0.234,109,0.02,110,0.02,111,0.013,115,0.099,130,0.791,138,3.503,145,2.568,147,2.331,149,0.314,150,0.358,153,0.886,159,0.709,165,0.51,170,2.331,197,0.886,203,1.127,209,0.995,213,3.193,237,0.405,254,1.736,284,1.869,293,1.869,294,1.669,338,2.568,409,1.669,474,1.127,476,0.886,477,1.99,479,2.427,489,1.293,505,1.514,508,1.127,509,1.514,515,2.427,528,1.293,531,1.514,544,1.736,556,3.642,560,1.514,598,2.568,604,1.293,627,0.995,632,1.514,634,4.018,637,1.869,649,2.331,659,3.337,673,1.127,731,4.291,740,1.99,801,1.514,961,1.514,963,2.331,1011,1.514,1022,1.514,1025,2.331,1027,2.331,1033,1.514,1050,3.193,1073,4.509,1074,1.514,1083,1.293,1085,1.293,1086,1.514,1088,1.293,1101,1.514,1106,2.842,1107,2.331,1108,2.842,1137,1.514,1140,1.514,1150,3.448,1152,4.038,1154,1.514,1155,4.018,1156,3.193,1157,2.842,1170,1.85,1171,1.85,1172,1.85,1173,5.243,1174,3.901,1175,4.213,1176,5.013,1177,1.85,1178,1.514,1179,1.85,1180,5.013,1181,5.177,1182,4.213,1183,2.848,1184,1.85,1185,4.213,1186,1.85,1187,1.85,1188,1.85,1189,2.848,1190,1.85,1191,3.473,1192,2.848,1193,2.848,1194,1.85,1195,1.85,1196,3.901,1197,2.848,1198,1.85,1199,2.848,1200,1.85,1201,1.85,1202,1.85,1203,1.85,1204,1.85,1205,1.85,1206,3.473,1207,1.85,1208,3.473,1209,2.848,1210,1.85,1211,3.642,1212,4.909,1213,3.901,1214,2.848,1215,3.642,1216,1.85,1217,1.85,1218,1.514,1219,1.85,1220,1.85,1221,1.85,1222,1.85,1223,4.739,1224,3.473,1225,2.848,1226,1.85,1227,1.85,1228,4.909,1229,1.85,1230,2.848,1231,5.476,1232,1.85,1233,1.85,1234,1.85,1235,1.85,1236,1.85,1237,1.85,1238,1.85,1239,2.848,1240,2.848,1241,1.85,1242,1.85,1243,1.85,1244,1.85,1245,1.85,1246,3.901,1247,1.85,1248,2.848,1249,3.901,1250,2.848,1251,1.85,1252,4.213,1253,2.848,1254,1.85,1255,1.85,1256,1.85,1257,1.85,1258,1.85,1259,1.85,1260,1.85,1261,1.85,1262,3.473,1263,1.85,1264,1.85,1265,1.85,1266,3.901,1267,5.013,1268,1.85,1269,2.848,1270,4.786,1271,3.473,1272,2.848,1273,2.848,1274,2.848,1275,2.848,1276,2.848,1277,3.473,1278,2.848,1279,3.473,1280,2.848,1281,2.848,1282,2.848,1283,2.848,1284,1.85,1285,2.848,1286,2.848,1287,1.85,1288,4.213,1289,4.636,1290,3.473,1291,2.848,1292,2.848,1293,1.85,1294,1.85,1295,2.848,1296,1.85,1297,1.85,1298,1.85,1299,3.473,1300,1.85,1301,1.85,1302,1.85,1303,2.848,1304,2.848,1305,1.85,1306,1.85,1307,1.85,1308,1.85,1309,1.85,1310,1.85,1311,1.85,1312,2.848,1313,1.85,1314,1.85,1315,1.85,1316,1.85,1317,1.85,1318,1.85,1319,1.85,1320,1.85,1321,2.842,1322,1.85,1323,1.85,1324,3.473,1325,1.85,1326,1.85,1327,1.85,1328,1.85,1329,4.786,1330,1.85,1331,1.85,1332,1.85,1333,1.85,1334,3.901,1335,2.848,1336,3.901,1337,1.85,1338,1.85,1339,1.85,1340,1.85,1341,3.473,1342,1.85,1343,1.85,1344,2.848,1345,1.85,1346,1.85,1347,1.85,1348,1.85,1349,2.848,1350,1.85,1351,1.85,1352,1.85,1353,1.85,1354,1.85,1355,1.85,1356,1.85,1357,1.85,1358,3.473,1359,3.901,1360,1.85,1361,1.85,1362,1.514,1363,1.85,1364,1.85,1365,1.85,1366,1.85,1367,1.85,1368,2.848,1369,1.85,1370,1.85,1371,1.85,1372,1.85,1373,1.85,1374,1.85,1375,1.85,1376,1.85,1377,1.85,1378,1.85,1379,3.901,1380,3.473,1381,3.473,1382,3.473,1383,2.848,1384,3.473,1385,2.848,1386,2.848,1387,1.85,1388,1.85,1389,1.85,1390,1.85,1391,1.85,1392,1.85,1393,1.85,1394,2.848,1395,1.85,1396,1.85,1397,1.85,1398,1.85,1399,4.213,1400,1.514,1401,1.85,1402,1.85,1403,1.85,1404,1.85,1405,1.85,1406,1.85,1407,1.85,1408,1.85,1409,4.213,1410,1.85,1411,1.85,1412,1.85,1413,1.85,1414,1.85,1415,1.85,1416,1.85,1417,1.85,1418,1.85,1419,1.85,1420,1.85,1421,1.85,1422,1.85,1423,1.85,1424,1.85,1425,1.85,1426,1.85,1427,3.473,1428,1.85,1429,1.85,1430,1.85,1431,2.848,1432,1.85,1433,1.85,1434,1.85,1435,1.85,1436,1.85,1437,1.85,1438,1.85,1439,1.85,1440,1.85,1441,1.85,1442,1.85,1443,1.85,1444,1.85,1445,1.85,1446,1.85,1447,2.848,1448,1.85,1449,1.85,1450,1.85,1451,2.848,1452,2.848,1453,1.85,1454,1.85,1455,1.85,1456,1.85,1457,1.85,1458,1.85,1459,1.85,1460,1.85,1461,1.85,1462,1.85,1463,1.85,1464,1.85,1465,1.85,1466,1.85,1467,1.85,1468,1.85,1469,1.85]],["title/modules.html",[1470,3.252]],["body/modules.html",[59,0.038,109,0.034,110,0.038,111,0.034,1470,3.85]],["title/overview.html",[1471,3.252]],["body/overview.html",[2,1.44,59,0.038,109,0.034,110,0.038,111,0.034,235,1.289,1178,3.823,1471,3.823,1472,4.671]],["title/miscellaneous/variables.html",[950,1.495,1473,2.876]],["body/miscellaneous/variables.html",[1,0.862,5,0.229,9,0.813,11,0.677,12,1.796,13,0.638,18,1.339,20,1.191,21,0.718,22,1.744,23,0.813,24,0.718,26,1.091,28,1.464,29,0.961,30,0.638,33,0.143,35,0.638,37,0.718,41,1.216,42,0.813,43,1.704,50,1.386,51,2.288,53,0.718,55,1.091,56,1.339,57,0.862,59,0.044,60,0.723,61,0.5,63,1.325,64,0.718,65,1.051,66,1.373,68,0.475,72,2.289,74,0.961,75,2.692,76,1.091,80,1.648,82,0.488,88,2.288,89,1.532,102,0.813,106,0.169,107,0.638,109,0.01,110,0.016,111,0.01,116,2.036,117,1.477,118,0.677,121,0.459,123,1.051,126,2.11,130,0.571,136,1.648,140,1.533,146,0.638,149,0.79,150,0.258,152,0.932,153,1.051,156,2.503,159,1.242,160,2.972,167,1.82,172,1.844,173,2.972,176,0.813,178,2.765,181,2.264,188,1.949,189,1.742,192,2.743,196,1.796,197,2.11,201,2.972,203,0.813,204,0.755,205,2.264,209,2.795,212,0.932,214,0.813,215,2.481,216,1.242,221,0.813,222,2.288,223,1.505,224,1.704,225,2.692,226,2.931,227,2.692,228,1.704,229,1.704,230,1.704,231,3.523,232,2.592,233,1.74,234,0.813,237,0.71,239,2.692,261,0.718,274,0.689,280,1.505,283,2.371,284,1.927,285,1.091,288,1.505,289,0.813,291,1.091,296,0.459,297,0.459,300,2.184,301,2.71,311,1.386,320,0.939,329,1.181,338,2.592,346,1.704,351,1.337,352,0.932,355,2.931,369,1.533,373,1.533,383,0.932,391,1.796,392,0.932,403,1.091,407,1.954,408,1.091,409,0.939,419,2.191,421,1.091,423,1.533,424,2.651,425,1.091,427,2.172,459,1.181,464,0.813,471,0.932,472,1.337,474,1.337,476,1.339,478,1.091,481,2.686,487,1.533,489,1.533,494,0.813,496,1.091,498,1.091,502,1.533,511,0.932,512,1.337,517,3.079,518,1.091,521,2.288,524,2.183,525,3.332,528,1.954,529,1.533,536,1.091,539,1.744,546,0.932,547,0.932,553,2.288,565,0.813,567,1.091,582,1.796,598,0.813,604,0.932,608,2.264,613,0.932,614,1.091,630,1.796,635,1.954,637,2.289,641,1.091,643,1.091,662,1.704,664,2.264,673,0.813,676,0.718,695,2.845,696,1.533,712,0.813,715,2.264,718,3.079,721,0.813,723,1.954,730,1.091,732,1.091,740,0.932,806,1.091,808,1.091,809,1.091,810,1.091,811,1.091,812,1.796,813,1.091,814,2.651,815,1.091,816,2.288,817,1.091,818,1.796,819,1.091,820,2.651,821,1.091,822,2.288,823,1.091,824,1.796,825,1.091,826,1.091,828,2.288,829,1.091,831,2.288,832,1.091,837,1.091,838,1.091,840,1.091,844,1.091,845,1.796,847,1.091,849,1.796,850,1.796,853,1.091,865,1.091,866,2.264,880,1.091,899,1.091,904,1.796,905,1.796,906,1.533,908,1.091,910,2.651,911,1.091,915,1.796,916,1.091,918,1.091,921,1.796,922,1.796,948,0.932,950,0.813,981,2.288,986,1.091,987,2.288,992,1.091,1000,1.091,1031,1.796,1038,1.091,1054,2.288,1062,1.091,1070,1.091,1078,1.091,1083,2.845,1085,0.932,1088,0.932,1089,1.091,1100,1.091,1103,2.288,1115,1.796,1118,1.091,1139,1.796,1144,2.288,1145,1.796,1211,1.091,1215,2.288,1218,1.091,1223,1.091,1321,2.288,1362,1.796,1400,1.796,1473,1.091,1474,1.333,1475,2.796,1476,1.333,1477,2.796,1478,3.581,1479,1.333,1480,1.333,1481,1.333,1482,1.333,1483,2.194,1484,2.194,1485,2.194,1486,1.333,1487,2.194,1488,2.796,1489,2.796,1490,2.194,1491,1.333,1492,1.333,1493,1.333,1494,1.333,1495,1.333,1496,1.333,1497,1.333,1498,2.796,1499,1.333,1500,1.333,1501,1.333,1502,1.333,1503,2.194,1504,1.333,1505,1.333,1506,1.333,1507,2.194,1508,1.333,1509,1.333,1510,1.333,1511,1.333,1512,1.333,1513,2.796,1514,1.333,1515,1.333,1516,1.333,1517,1.333,1518,1.333,1519,1.333,1520,1.333,1521,1.333,1522,1.333,1523,1.333,1524,1.333,1525,1.333,1526,1.333,1527,1.333,1528,1.333,1529,4.65,1530,2.796,1531,2.796,1532,1.333,1533,1.333,1534,1.333,1535,1.333,1536,1.333,1537,2.796,1538,1.333,1539,1.333,1540,1.333,1541,1.333,1542,1.333,1543,1.333,1544,1.333,1545,2.194,1546,1.333,1547,1.333,1548,1.333,1549,1.333,1550,1.333,1551,1.333,1552,2.194,1553,1.333,1554,1.333,1555,1.333,1556,1.333,1557,1.333,1558,1.333,1559,1.333,1560,1.333,1561,1.333,1562,2.796,1563,1.333,1564,1.333,1565,1.333,1566,1.333,1567,1.333,1568,1.333,1569,1.333,1570,1.333,1571,1.333,1572,1.333,1573,1.333,1574,2.796,1575,1.333,1576,1.333,1577,1.333,1578,1.333,1579,1.333,1580,1.333,1581,2.796,1582,1.333,1583,1.333,1584,1.333,1585,1.333,1586,1.333,1587,1.333,1588,1.333,1589,2.194,1590,2.194,1591,1.333,1592,1.333,1593,1.333,1594,1.333,1595,1.333,1596,1.333,1597,1.333,1598,1.333,1599,1.333,1600,1.333,1601,2.194,1602,1.333,1603,1.333,1604,1.333,1605,1.333,1606,1.333,1607,1.333,1608,1.333,1609,2.194,1610,1.333,1611,2.194,1612,1.333,1613,2.194,1614,1.333,1615,1.333,1616,1.333,1617,1.333,1618,1.333,1619,1.333,1620,1.333,1621,1.333,1622,1.333,1623,1.333,1624,1.333,1625,2.194,1626,1.333,1627,1.333,1628,1.333,1629,2.796,1630,1.333,1631,1.333,1632,1.333,1633,1.333,1634,1.333,1635,1.333,1636,1.333,1637,1.333,1638,1.333,1639,1.333,1640,1.333,1641,1.333,1642,2.796,1643,1.333,1644,1.333,1645,1.333,1646,1.333,1647,1.333,1648,1.333,1649,2.194,1650,2.194,1651,2.194,1652,2.194,1653,1.333,1654,1.333,1655,2.194,1656,1.333,1657,2.194,1658,2.194,1659,2.194,1660,4.071,1661,1.333,1662,1.333,1663,1.333,1664,1.333,1665,1.333,1666,1.333,1667,1.333,1668,1.333,1669,1.333,1670,1.333,1671,2.194,1672,2.194,1673,2.194,1674,3.852,1675,2.194,1676,1.333,1677,2.194,1678,1.333,1679,2.194,1680,1.333,1681,1.333,1682,1.333,1683,1.333,1684,1.333,1685,2.194,1686,2.194,1687,1.333,1688,1.333,1689,2.194,1690,1.333,1691,1.333,1692,1.333,1693,1.333,1694,1.333,1695,1.333,1696,1.333,1697,1.333,1698,1.333,1699,1.333,1700,1.333,1701,1.333,1702,2.194,1703,1.333,1704,1.333,1705,1.333]]],"invertedIndex":[["",{"_index":59,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":419,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.1",{"_index":422,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["0.3.0",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.75",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.8",{"_index":424,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["0.9",{"_index":411,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["0.95",{"_index":735,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["0/1",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":797,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":907,"title":{},"body":{"coverage.html":{}}}],["00:00",{"_index":746,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["02",{"_index":743,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["08",{"_index":744,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["1",{"_index":159,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/SlackConfig.html":{},"dependencies.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["1.0.10",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["1.0.8",{"_index":946,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":796,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":172,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["2,3,1",{"_index":169,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["2.0",{"_index":1157,"title":{},"body":{"index.html":{},"license.html":{}}}],["2.3.2",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["2.88.0",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":624,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["2004",{"_index":1171,"title":{},"body":{"license.html":{}}}],["2018",{"_index":742,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["2020",{"_index":1463,"title":{},"body":{"license.html":{}}}],["20:00:00",{"_index":745,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["25",{"_index":795,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":177,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{}}}],["3.0.0",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["3.1.9",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["3.2.1",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["3.7.4",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":180,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{}}}],["4.17.1",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["4000",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":191,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{}}}],["50",{"_index":801,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["6",{"_index":200,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["6/6",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1472,"title":{},"body":{"overview.html":{}}}],["9",{"_index":1178,"title":{},"body":{"license.html":{},"overview.html":{}}}],["9pm",{"_index":761,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["9pm?snips",{"_index":728,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["_",{"_index":251,"title":{},"body":{"classes/CliAdapter.html":{}}}],["_agents_",{"_index":135,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["_build/html/chat_adapter/cli_messenger.html",{"_index":268,"title":{},"body":{"classes/CliAdapter.html":{}}}],["_build/html/chat_adapter/facebook_messenger.html",{"_index":456,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{}}}],["_build/html/chat_adapter/slack.html",{"_index":720,"title":{},"body":{"interfaces/SlackConfig.html":{}}}],["_build/html/nlp_adapter/custom_nlp_adapter.html",{"_index":658,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["_res",{"_index":448,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["above",{"_index":1362,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["accept",{"_index":562,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["acceptance",{"_index":1429,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1427,"title":{},"body":{"license.html":{}}}],["access",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessed",{"_index":549,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["act",{"_index":1435,"title":{},"body":{"license.html":{}}}],["acting",{"_index":1187,"title":{},"body":{"license.html":{}}}],["action",{"_index":407,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":102,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["acts",{"_index":1407,"title":{},"body":{"license.html":{}}}],["adapt",{"_index":1034,"title":{},"body":{"index.html":{}}}],["adapter",{"_index":28,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["adapters",{"_index":190,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{}}}],["add",{"_index":544,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["added",{"_index":547,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["addendum",{"_index":1351,"title":{},"body":{"license.html":{}}}],["additional",{"_index":145,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"license.html":{}}}],["additions",{"_index":1247,"title":{},"body":{"license.html":{}}}],["advised",{"_index":1425,"title":{},"body":{"license.html":{}}}],["after_action",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterwards",{"_index":585,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["again",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["against",{"_index":1304,"title":{},"body":{"license.html":{}}}],["agent",{"_index":136,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["agent`s",{"_index":206,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["agentindex",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agentname",{"_index":305,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["agentnames",{"_index":376,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["agentnames.foreach(agentname",{"_index":378,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["agents",{"_index":167,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["agents[agentindex].minscore",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agree",{"_index":1438,"title":{},"body":{"license.html":{}}}],["agreed",{"_index":1382,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1366,"title":{},"body":{"license.html":{}}}],["aims",{"_index":962,"title":{},"body":{"index.html":{}}}],["alleging",{"_index":1309,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":52,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["allowing",{"_index":972,"title":{},"body":{"index.html":{}}}],["allows",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alone",{"_index":1300,"title":{},"body":{"license.html":{}}}],["along",{"_index":1342,"title":{},"body":{"license.html":{}}}],["alongside",{"_index":1350,"title":{},"body":{"license.html":{}}}],["already",{"_index":567,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["alternative",{"_index":495,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["and(b",{"_index":1325,"title":{},"body":{"license.html":{}}}],["and(c",{"_index":1331,"title":{},"body":{"license.html":{}}}],["and(d",{"_index":1337,"title":{},"body":{"license.html":{}}}],["and/or",{"_index":1432,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":1236,"title":{},"body":{"license.html":{}}}],["another",{"_index":144,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{}}}],["answer",{"_index":730,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["answered",{"_index":985,"title":{},"body":{"index.html":{}}}],["apache",{"_index":1156,"title":{},"body":{"index.html":{},"license.html":{}}}],["api",{"_index":57,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api/dist/adapter",{"_index":685,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["app",{"_index":243,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{}}}],["app_secret",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appear",{"_index":1346,"title":{},"body":{"license.html":{}}}],["appendix",{"_index":1230,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1380,"title":{},"body":{"license.html":{}}}],["application",{"_index":472,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["applies",{"_index":1294,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1447,"title":{},"body":{"license.html":{}}}],["appropriate",{"_index":1456,"title":{},"body":{"license.html":{}}}],["appropriateness",{"_index":1393,"title":{},"body":{"license.html":{}}}],["appsecret",{"_index":223,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"miscellaneous/variables.html":{}}}],["apt",{"_index":1122,"title":{},"body":{"index.html":{}}}],["arbitrarily",{"_index":643,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["architecture",{"_index":1051,"title":{},"body":{"index.html":{}}}],["archives",{"_index":1462,"title":{},"body":{"license.html":{}}}],["argparse",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["arias",{"_index":1167,"title":{},"body":{"index.html":{}}}],["arising",{"_index":1414,"title":{},"body":{"license.html":{}}}],["array",{"_index":648,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["asked",{"_index":162,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["asserted",{"_index":1444,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1397,"title":{},"body":{"license.html":{}}}],["assume",{"_index":1395,"title":{},"body":{"license.html":{}}}],["async",{"_index":245,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["attach",{"_index":1448,"title":{},"body":{"license.html":{}}}],["attached",{"_index":1229,"title":{},"body":{"license.html":{}}}],["attachment",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attachments",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attribution",{"_index":1334,"title":{},"body":{"license.html":{}}}],["audio",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticate",{"_index":292,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"index.html":{}}}],["authentication",{"_index":179,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"index.html":{}}}],["authorized",{"_index":1183,"title":{},"body":{"license.html":{}}}],["authors",{"_index":1159,"title":{},"body":{"index.html":{}}}],["authorship",{"_index":1224,"title":{},"body":{"license.html":{}}}],["automated",{"_index":1001,"title":{},"body":{"index.html":{}}}],["available",{"_index":1226,"title":{},"body":{"license.html":{}}}],["avoid",{"_index":532,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["await",{"_index":702,"title":{},"body":{"classes/SlackAdapter.html":{},"index.html":{}}}],["awaits",{"_index":87,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["awesome",{"_index":1149,"title":{},"body":{"index.html":{}}}],["background",{"_index":990,"title":{},"body":{"index.html":{}}}],["base",{"_index":595,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["based",{"_index":1232,"title":{},"body":{"license.html":{}}}],["basic",{"_index":208,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{}}}],["basis",{"_index":1383,"title":{},"body":{"license.html":{}}}],["bastian",{"_index":1164,"title":{},"body":{"index.html":{}}}],["before",{"_index":506,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["behalf",{"_index":1252,"title":{},"body":{"license.html":{}}}],["below",{"_index":1085,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["beneficial",{"_index":1205,"title":{},"body":{"license.html":{}}}],["between",{"_index":480,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{}}}],["bind",{"_index":1245,"title":{},"body":{"license.html":{}}}],["bloated",{"_index":533,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["body",{"_index":256,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"dependencies.html":{}}}],["bodyparser",{"_index":255,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["bodyparser.json",{"_index":458,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["boilerplate",{"_index":1449,"title":{},"body":{"license.html":{}}}],["boolean",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bot",{"_index":131,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{}}}],["botframework",{"_index":78,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["botframeworkinterfacemessage",{"_index":616,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["both",{"_index":1008,"title":{},"body":{"index.html":{}}}],["botresponse",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["botresponse.textrequestresult",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brackets",{"_index":1452,"title":{},"body":{"license.html":{}}}],["budget",{"_index":1048,"title":{},"body":{"index.html":{}}}],["buf",{"_index":449,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["buf.tostring(encoding",{"_index":454,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["buf?.length",{"_index":452,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["buffer",{"_index":450,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["build",{"_index":979,"title":{},"body":{"index.html":{}}}],["buildbutton",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["buildquickreply",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["built",{"_index":1112,"title":{},"body":{"index.html":{}}}],["button",{"_index":1100,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["buttons",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["called",{"_index":134,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{}}}],["cards",{"_index":955,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["carry",{"_index":1327,"title":{},"body":{"license.html":{}}}],["case",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cases",{"_index":519,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["cause",{"_index":1193,"title":{},"body":{"license.html":{}}}],["certain",{"_index":141,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["certainty",{"_index":155,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["certificate",{"_index":1056,"title":{},"body":{"index.html":{}}}],["chalk",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["chalk.bold.green",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["challenge",{"_index":717,"title":{},"body":{"interfaces/SlackConfig.html":{}}}],["change",{"_index":992,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["changed",{"_index":509,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{}}}],["changing",{"_index":601,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{}}}],["channel",{"_index":706,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["character",{"_index":1413,"title":{},"body":{"license.html":{}}}],["charge",{"_index":1279,"title":{},"body":{"license.html":{}}}],["chat",{"_index":72,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chat)bot",{"_index":128,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["chat.postmessage",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["chat_adapter/chatadapterrequest",{"_index":125,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["chat_adapter/ichatadapter",{"_index":120,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["chatadapter",{"_index":1,"title":{"interfaces/ChatAdapter.html":{}},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["chatadapterrequest",{"_index":104,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{}}}],["chatadapterrequest,messengeruserid",{"_index":81,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["chatadapterresponse",{"_index":21,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["chatbot",{"_index":980,"title":{},"body":{"index.html":{}}}],["chatbots",{"_index":967,"title":{},"body":{"index.html":{}}}],["chatconfig",{"_index":221,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"miscellaneous/variables.html":{}}}],["chattocore",{"_index":228,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":1071,"title":{},"body":{"index.html":{}}}],["checks",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["choice",{"_index":1080,"title":{},"body":{"index.html":{}}}],["choose",{"_index":1086,"title":{},"body":{"index.html":{},"license.html":{}}}],["chose",{"_index":1091,"title":{},"body":{"index.html":{}}}],["chosen",{"_index":642,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["claim",{"_index":1306,"title":{},"body":{"license.html":{}}}],["claims",{"_index":1295,"title":{},"body":{"license.html":{}}}],["class",{"_index":115,"title":{"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"license.html":{}}}],["classconstructor",{"_index":112,"title":{"interfaces/ClassConstructor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{}}}],["classes",{"_index":235,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"overview.html":{}}}],["classified",{"_index":654,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{}}}],["clear",{"_index":633,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["cli",{"_index":239,"title":{},"body":{"classes/CliAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cliadapter",{"_index":234,"title":{"classes/CliAdapter.html":{}},"body":{"classes/CliAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cliclientrequest",{"_index":265,"title":{},"body":{"classes/CliAdapter.html":{}}}],["client",{"_index":43,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["close",{"_index":77,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["cloud",{"_index":184,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{}}}],["cms",{"_index":605,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["code",{"_index":515,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"license.html":{}}}],["coherent",{"_index":137,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{}}}],["colorizesuccess",{"_index":904,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["combination",{"_index":1301,"title":{},"body":{"license.html":{}}}],["combine",{"_index":1010,"title":{},"body":{"index.html":{}}}],["combined",{"_index":1015,"title":{},"body":{"index.html":{}}}],["comes",{"_index":1036,"title":{},"body":{"index.html":{}}}],["commands",{"_index":1117,"title":{},"body":{"index.html":{}}}],["comment",{"_index":1457,"title":{},"body":{"license.html":{}}}],["commercial",{"_index":1422,"title":{},"body":{"license.html":{}}}],["common",{"_index":505,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{}}}],["communicate",{"_index":214,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["communication",{"_index":479,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"license.html":{}}}],["communication/convertcliclientrequest",{"_index":264,"title":{},"body":{"classes/CliAdapter.html":{}}}],["communication/convertrequest",{"_index":436,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["communication/convertresponse",{"_index":694,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["communication/deletecontexts",{"_index":318,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["communication/postcontexts",{"_index":671,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["communication/postcontextsfromserver",{"_index":319,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["communication/sendresponses",{"_index":440,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["communication/sendtextrequest",{"_index":321,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["communication/webhook",{"_index":262,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["companies",{"_index":1046,"title":{},"body":{"index.html":{}}}],["compile",{"_index":1064,"title":{},"body":{"index.html":{}}}],["compiled",{"_index":1220,"title":{},"body":{"license.html":{}}}],["complex",{"_index":1038,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["compliance",{"_index":1465,"title":{},"body":{"license.html":{}}}],["complies",{"_index":1356,"title":{},"body":{"license.html":{}}}],["compodoc",{"_index":1113,"title":{},"body":{"index.html":{}}}],["component",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["components",{"_index":971,"title":{},"body":{"index.html":{}}}],["computer",{"_index":1419,"title":{},"body":{"license.html":{}}}],["concepts",{"_index":628,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["concerns",{"_index":998,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1173,"title":{},"body":{"license.html":{}}}],["confidence",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confidentiality",{"_index":469,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["config",{"_index":231,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configuration",{"_index":209,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["configuration/configtypes",{"_index":333,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{}}}],["connect",{"_index":1078,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["connected",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connection",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connections",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectionundefined",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consequential",{"_index":1412,"title":{},"body":{"license.html":{}}}],["consider",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consist",{"_index":132,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["consistent",{"_index":1434,"title":{},"body":{"license.html":{}}}],["console",{"_index":1053,"title":{},"body":{"index.html":{}}}],["console.log",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conspicuously",{"_index":1263,"title":{},"body":{"license.html":{}}}],["const",{"_index":346,"title":{},"body":{"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["constants/logmessages",{"_index":697,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["constitutes",{"_index":1310,"title":{},"body":{"license.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["construed",{"_index":1352,"title":{},"body":{"license.html":{}}}],["consult",{"_index":636,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{}}}],["contact",{"_index":496,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["contactclient",{"_index":35,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["contactclient(_",{"_index":249,"title":{},"body":{"classes/CliAdapter.html":{}}}],["contactclient(response",{"_index":38,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["contacted",{"_index":171,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["contained",{"_index":1339,"title":{},"body":{"license.html":{}}}],["containing",{"_index":210,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["content",{"_index":64,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["contents",{"_index":1347,"title":{},"body":{"license.html":{}}}],["context",{"_index":565,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["contextarray",{"_index":395,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextarray.includes(context",{"_index":398,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextarray.splice(contextarray.indexof(context",{"_index":399,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextcreated",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contextmap",{"_index":381,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextmap.delete(internaluserid",{"_index":388,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextmap.get(internaluserid",{"_index":396,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextmap.set(internaluserid",{"_index":400,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contexts",{"_index":311,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["contextstodelete",{"_index":359,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["contextstodelete.foreach((context",{"_index":397,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["contextstopost",{"_index":362,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["contexttodelete",{"_index":308,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["contract",{"_index":1197,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":1110,"title":{},"body":{"index.html":{}}}],["contributing",{"_index":1148,"title":{},"body":{"index.html":{}}}],["contribution",{"_index":1150,"title":{},"body":{"index.html":{},"license.html":{}}}],["contribution(s",{"_index":1299,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1358,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":1267,"title":{},"body":{"license.html":{}}}],["contributory",{"_index":1311,"title":{},"body":{"license.html":{}}}],["control",{"_index":1050,"title":{},"body":{"index.html":{},"license.html":{}}}],["controlled",{"_index":1137,"title":{},"body":{"index.html":{},"license.html":{}}}],["convenience",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversions",{"_index":1221,"title":{},"body":{"license.html":{}}}],["convertfacebookrequest",{"_index":435,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["convertfacebookrequest(message",{"_index":460,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["convertintochatadapterrequest",{"_index":263,"title":{},"body":{"classes/CliAdapter.html":{},"classes/SlackAdapter.html":{},"coverage.html":{}}}],["convertintochatadapterrequest(message",{"_index":275,"title":{},"body":{"classes/CliAdapter.html":{},"classes/SlackAdapter.html":{}}}],["convertintocliclientresponse",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["convertstringarraytonlpcontexts",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["converttobuttons",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["converttofacebookresponse",{"_index":781,"title":{},"body":{"coverage.html":{}}}],["converttoimage",{"_index":782,"title":{},"body":{"coverage.html":{}}}],["converttonlpparams",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["converttoquickreply",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["converttoslackresponse",{"_index":693,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["converttotext",{"_index":784,"title":{},"body":{"coverage.html":{}}}],["converttourlbutton",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copies",{"_index":1318,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1324,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1181,"title":{},"body":{"license.html":{}}}],["core",{"_index":75,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["core/getconfig",{"_index":325,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/SlackAdapter.html":{}}}],["core/model/response",{"_index":105,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SlackAdapter.html":{}}}],["core/utils/responseutils",{"_index":618,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["correct",{"_index":1090,"title":{},"body":{"index.html":{}}}],["cors",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["couldnotstopcore",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["counterclaim",{"_index":1307,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":762,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":613,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["created",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdialogflowrequestconfiguration",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["createdocs",{"_index":1133,"title":{},"body":{"index.html":{}}}],["createeventadapter",{"_index":686,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["createeventadapter(slack_signing_secret",{"_index":701,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["createfacebookadapter",{"_index":912,"title":{},"body":{"coverage.html":{}}}],["createfacebookserver",{"_index":913,"title":{},"body":{"coverage.html":{}}}],["createnoresponse",{"_index":855,"title":{},"body":{"coverage.html":{}}}],["createpostrequestconfiguration",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["createrequestconfiguration",{"_index":786,"title":{},"body":{"coverage.html":{}}}],["createrequestconfigurationallcontexts",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["createrequestconfigurationselectedcontexts",{"_index":870,"title":{},"body":{"coverage.html":{}}}],["createrequestconfigurationtextmessage",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["createresponse",{"_index":617,"title":{},"body":{"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["createserver",{"_index":258,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["createserver(this.app",{"_index":273,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["createslackadapter",{"_index":919,"title":{},"body":{"coverage.html":{}}}],["createslackserver",{"_index":920,"title":{},"body":{"coverage.html":{}}}],["credentials",{"_index":1081,"title":{},"body":{"index.html":{}}}],["cross",{"_index":1305,"title":{},"body":{"license.html":{}}}],["crypto",{"_index":372,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"dependencies.html":{}}}],["current",{"_index":550,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["currentcontextmap",{"_index":353,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["currently",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom",{"_index":514,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["customary",{"_index":1374,"title":{},"body":{"license.html":{}}}],["customchatadapter",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custompayload",{"_index":958,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["damages",{"_index":1409,"title":{},"body":{"license.html":{}}}],["data",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":524,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":1315,"title":{},"body":{"license.html":{}}}],["decision",{"_index":559,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["decrypt",{"_index":467,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["default",{"_index":300,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/Interceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_log_messages",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_messages",{"_index":831,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultconfiguration",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultlifespan",{"_index":205,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"miscellaneous/variables.html":{}}}],["defend",{"_index":1440,"title":{},"body":{"license.html":{}}}],["defined",{"_index":39,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"license.html":{}}}],["defines",{"_index":484,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["definition",{"_index":1189,"title":{},"body":{"license.html":{}}}],["definitions",{"_index":632,"title":{},"body":{"interfaces/NlpAdapter.html":{},"license.html":{}}}],["degree",{"_index":973,"title":{},"body":{"index.html":{}}}],["deinit",{"_index":36,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["deinitcore",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["delete/add",{"_index":566,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["deleteallcontexts",{"_index":296,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["deleteallcontexts(internaluserid",{"_index":357,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["deleteallcontexts(this",{"_index":303,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["deleted",{"_index":645,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["deletes",{"_index":639,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["deleteselectedcontexts",{"_index":297,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["deleteselectedcontexts(internaluserid",{"_index":307,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["deleteselectedcontexts(this",{"_index":342,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["deleting",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deliberate",{"_index":1404,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":926,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["dependency",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["depending",{"_index":564,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["depends",{"_index":583,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["deploy",{"_index":966,"title":{},"body":{"index.html":{}}}],["deployed",{"_index":129,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["deprecated",{"_index":285,"title":{},"body":{"classes/DialogflowAdapter.html":{},"miscellaneous/variables.html":{}}}],["depseudonymize",{"_index":573,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["depseudonymized",{"_index":578,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["derivative",{"_index":1231,"title":{},"body":{"license.html":{}}}],["derived",{"_index":1233,"title":{},"body":{"license.html":{}}}],["describing",{"_index":1375,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["designated",{"_index":1265,"title":{},"body":{"license.html":{}}}],["desired",{"_index":752,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["detailed",{"_index":1093,"title":{},"body":{"index.html":{}}}],["details",{"_index":1109,"title":{},"body":{"index.html":{}}}],["determination",{"_index":554,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["determined",{"_index":568,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["determines",{"_index":94,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["determining",{"_index":1392,"title":{},"body":{"license.html":{}}}],["develop",{"_index":965,"title":{},"body":{"index.html":{}}}],["developer",{"_index":290,"title":{},"body":{"classes/DialogflowAdapter.html":{},"interfaces/FacebookChatConfig.html":{}}}],["developers",{"_index":978,"title":{},"body":{"index.html":{}}}],["dialogflow",{"_index":283,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["dialogflow/dialogflowadapter",{"_index":334,"title":{},"body":{"interfaces/DialogflowConfig.html":{}}}],["dialogflow](https://dialogflow.com",{"_index":326,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["dialogflowadapter",{"_index":280,"title":{"classes/DialogflowAdapter.html":{}},"body":{"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dialogflowagent",{"_index":335,"title":{},"body":{"interfaces/DialogflowConfig.html":{}}}],["dialogflowagents",{"_index":332,"title":{},"body":{"interfaces/DialogflowConfig.html":{}}}],["dialogflowconfig",{"_index":329,"title":{"interfaces/DialogflowConfig.html":{}},"body":{"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dialogflowconfig.agents[agentname",{"_index":350,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["dialogflowconfig.agents[agentname].project_id",{"_index":348,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["dialogflowconfig.agents[agentname].token",{"_index":349,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["dialogflowmessagetypes",{"_index":952,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dialogflowv2",{"_index":1103,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["dialogflowv2adapter",{"_index":288,"title":{"classes/DialogflowV2Adapter.html":{}},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":476,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/SlackConfig.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["differentiate",{"_index":753,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["direct",{"_index":1191,"title":{},"body":{"license.html":{}}}],["direction",{"_index":1194,"title":{},"body":{"license.html":{}}}],["directly",{"_index":54,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["disable",{"_index":588,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["disclaimer",{"_index":1378,"title":{},"body":{"license.html":{}}}],["discussing",{"_index":1261,"title":{},"body":{"license.html":{}}}],["display",{"_index":1286,"title":{},"body":{"license.html":{}}}],["distinctive",{"_index":27,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["distribute",{"_index":1288,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1341,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1175,"title":{},"body":{"license.html":{}}}],["docs",{"_index":1084,"title":{},"body":{"index.html":{}}}],["document",{"_index":1179,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":637,"title":{},"body":{"interfaces/NlpAdapter.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["doesresponsepassscoringthreshold",{"_index":849,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dolgich",{"_index":1163,"title":{},"body":{"index.html":{}}}],["don't",{"_index":1455,"title":{},"body":{"license.html":{}}}],["done",{"_index":1096,"title":{},"body":{"index.html":{}}}],["down",{"_index":71,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["dummyhandlemessage",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["dummynlpadapter",{"_index":351,"title":{"classes/DummyNlpAdapter.html":{}},"body":{"classes/DummyNlpAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":553,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["e.g",{"_index":18,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["e.g.export",{"_index":1146,"title":{},"body":{"index.html":{}}}],["each",{"_index":294,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"license.html":{}}}],["early",{"_index":561,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["easier",{"_index":1460,"title":{},"body":{"license.html":{}}}],["easiest",{"_index":1052,"title":{},"body":{"index.html":{}}}],["easy",{"_index":964,"title":{},"body":{"index.html":{}}}],["editorial",{"_index":1234,"title":{},"body":{"license.html":{}}}],["elaborations",{"_index":1237,"title":{},"body":{"license.html":{}}}],["electronic",{"_index":1253,"title":{},"body":{"license.html":{}}}],["elements",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["empty",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["emubot",{"_index":494,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["emundo",{"_index":961,"title":{},"body":{"index.html":{},"license.html":{}}}],["en",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enabled",{"_index":1028,"title":{},"body":{"index.html":{}}}],["enables",{"_index":975,"title":{},"body":{"index.html":{}}}],["enclosed",{"_index":1451,"title":{},"body":{"license.html":{}}}],["encoding",{"_index":451,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["end",{"_index":1446,"title":{},"body":{"license.html":{}}}],["endpoint",{"_index":196,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/variables.html":{}}}],["enough",{"_index":158,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["enter",{"_index":1070,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":1188,"title":{},"body":{"license.html":{}}}],["entity",{"_index":138,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SnipsAdapter.html":{},"license.html":{}}}],["entry",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enumerations",{"_index":951,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":1127,"title":{},"body":{"index.html":{}}}],["equal",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":517,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["error('method",{"_index":279,"title":{},"body":{"classes/CliAdapter.html":{}}}],["error('this",{"_index":384,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["error.log",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["errordetails",{"_index":390,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["errors",{"_index":1143,"title":{},"body":{"index.html":{}}}],["errortype",{"_index":393,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["eslint",{"_index":587,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["eslint/interface",{"_index":591,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["especially",{"_index":194,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{}}}],["established",{"_index":99,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["even",{"_index":1424,"title":{},"body":{"license.html":{}}}],["event",{"_index":1400,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["everything",{"_index":1072,"title":{},"body":{"index.html":{}}}],["examine",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":165,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["examples",{"_index":499,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["examples](https://github.com/emundo/emubot",{"_index":619,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["exceeds",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["except",{"_index":1290,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exchangeability",{"_index":974,"title":{},"body":{"index.html":{}}}],["excluding",{"_index":1262,"title":{},"body":{"license.html":{}}}],["exclusive",{"_index":1278,"title":{},"body":{"license.html":{}}}],["execute",{"_index":572,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["executed",{"_index":1367,"title":{},"body":{"license.html":{}}}],["executionindex",{"_index":160,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["executionindices",{"_index":168,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["exemplar",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exemplary",{"_index":31,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["exercise",{"_index":1398,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1207,"title":{},"body":{"license.html":{}}}],["exist",{"_index":607,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["existing",{"_index":1079,"title":{},"body":{"index.html":{}}}],["experienced",{"_index":977,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":1360,"title":{},"body":{"license.html":{}}}],["export",{"_index":106,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["express",{"_index":254,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"dependencies.html":{},"license.html":{}}}],["express().use",{"_index":457,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["express().use(bodyparser.json",{"_index":270,"title":{},"body":{"classes/CliAdapter.html":{}}}],["express.express",{"_index":247,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["extended",{"_index":501,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["extendedincomingmessage",{"_index":441,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["extends",{"_index":331,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{}}}],["extensive",{"_index":1035,"title":{},"body":{"index.html":{}}}],["external",{"_index":507,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["facebook",{"_index":427,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/SlackConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["facebookadapter",{"_index":30,"title":{"classes/FacebookAdapter.html":{}},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookchatconfig",{"_index":464,"title":{"interfaces/FacebookChatConfig.html":{}},"body":{"interfaces/FacebookChatConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookmessageroute",{"_index":915,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["facebookmessaging",{"_index":437,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["failed",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failedtoconnect",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failure",{"_index":1420,"title":{},"body":{"license.html":{}}}],["fallback",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fallbacks",{"_index":563,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["false",{"_index":389,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["fashion",{"_index":1105,"title":{},"body":{"index.html":{}}}],["faster",{"_index":164,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["fastest",{"_index":540,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["feature",{"_index":1094,"title":{},"body":{"index.html":{}}}],["fee",{"_index":1428,"title":{},"body":{"license.html":{}}}],["feedback",{"_index":490,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["few",{"_index":994,"title":{},"body":{"index.html":{}}}],["field",{"_index":750,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["fields",{"_index":1450,"title":{},"body":{"license.html":{}}}],["fiete",{"_index":1160,"title":{},"body":{"index.html":{}}}],["fifty",{"_index":1200,"title":{},"body":{"license.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["filed",{"_index":1316,"title":{},"body":{"license.html":{}}}],["filename",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["files",{"_index":1108,"title":{},"body":{"index.html":{},"license.html":{}}}],["final",{"_index":569,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["find",{"_index":500,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["findbestnlpanswerfortextrequest",{"_index":848,"title":{},"body":{"coverage.html":{}}}],["first",{"_index":152,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["first_agent",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fitness",{"_index":1388,"title":{},"body":{"license.html":{}}}],["fixed",{"_index":195,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["flag",{"_index":1132,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1059,"title":{},"body":{"index.html":{}}}],["following",{"_index":1321,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["forecastlocality",{"_index":739,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["forecaststartdatetime",{"_index":748,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["fork",{"_index":542,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["form",{"_index":731,"title":{},"body":{"classes/SnipsAdapter.html":{},"license.html":{}}}],["format",{"_index":24,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["found",{"_index":608,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":216,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["free",{"_index":1281,"title":{},"body":{"license.html":{}}}],["from/to",{"_index":580,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["function",{"_index":93,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["functionality",{"_index":146,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":17,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["further",{"_index":512,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["furthermore",{"_index":1092,"title":{},"body":{"index.html":{}}}],["future",{"_index":548,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["gcp",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["general",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generateappsecretproof",{"_index":914,"title":{},"body":{"coverage.html":{}}}],["generated",{"_index":477,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"license.html":{}}}],["generateid",{"_index":369,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["generateuserid",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["generic",{"_index":545,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["getallcontexts",{"_index":886,"title":{},"body":{"coverage.html":{}}}],["getappsecretproof",{"_index":787,"title":{},"body":{"coverage.html":{}}}],["getconfig",{"_index":324,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/SlackAdapter.html":{},"coverage.html":{}}}],["getconfig().interceptors.chattocore",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().interceptors.nlptocore",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().interceptors.nlptonlp",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().platform.chat",{"_index":699,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["getconfig().platform.chat.constructor",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getconfig().platform.nlp",{"_index":347,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["getconfig().platform.nlp.agents",{"_index":375,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["getconfig().platform.nlp.agents[agentname].token",{"_index":327,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["getconfig().platform.nlp.agents[agentname].url",{"_index":328,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["getconfig().platform.nlp.constructor",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getcontext",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["getinstance",{"_index":610,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["getorderedagents",{"_index":853,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":959,"title":{"index.html":{},"license.html":{}},"body":{}}],["give",{"_index":1322,"title":{},"body":{"license.html":{}}}],["given",{"_index":724,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["gmbh",{"_index":1464,"title":{},"body":{"license.html":{}}}],["goal",{"_index":1018,"title":{},"body":{"index.html":{}}}],["goodwill",{"_index":1417,"title":{},"body":{"license.html":{}}}],["google",{"_index":183,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{}}}],["gorholt",{"_index":1165,"title":{},"body":{"index.html":{}}}],["governing",{"_index":1468,"title":{},"body":{"license.html":{}}}],["gracefully",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grant",{"_index":1271,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1209,"title":{},"body":{"license.html":{}}}],["granting",{"_index":1184,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1274,"title":{},"body":{"license.html":{}}}],["graph",{"_index":470,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["grossly",{"_index":1405,"title":{},"body":{"license.html":{}}}],["group",{"_index":538,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["guidelines",{"_index":1151,"title":{},"body":{"index.html":{}}}],["handle",{"_index":95,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["handlecustompayload",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["handled",{"_index":25,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{}}}],["handlemessage",{"_index":574,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["handlemessage(userid",{"_index":575,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["handlemessageafterthirdinterceptor",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["handlemessagedependingonmessagetype",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["handlereceivedmessage",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlereceivedmessageincore",{"_index":844,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handlerequest",{"_index":92,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["handlerequests",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["handleresponses",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["handles",{"_index":503,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["handletextrequest",{"_index":845,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":521,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["handlingbetweencoreandchatadapter",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["happen",{"_index":386,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["harmless",{"_index":1442,"title":{},"body":{"license.html":{}}}],["hash",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hash_mismatch",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hello",{"_index":410,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["here",{"_index":502,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["here](https://github.com/emundo/emubot",{"_index":586,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["hereby",{"_index":1273,"title":{},"body":{"license.html":{}}}],["herein",{"_index":1364,"title":{},"body":{"license.html":{}}}],["high",{"_index":157,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{}}}],["higher",{"_index":163,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["highly",{"_index":1032,"title":{},"body":{"index.html":{}}}],["hit",{"_index":1069,"title":{},"body":{"index.html":{}}}],["hold",{"_index":1441,"title":{},"body":{"license.html":{}}}],["hopefully",{"_index":1042,"title":{},"body":{"index.html":{}}}],["host",{"_index":1009,"title":{},"body":{"index.html":{}}}],["http",{"_index":259,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["http://localhost:5005",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://www.apache.org/licenses",{"_index":1172,"title":{},"body":{"license.html":{}}}],["http://www.apache.org/licenses/license",{"_index":1467,"title":{},"body":{"license.html":{}}}],["https",{"_index":1058,"title":{},"body":{"index.html":{}}}],["https://api.dialogflow.com/v1/query?v=20150910",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://developers.facebook.com/docs/messenger",{"_index":444,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["https://graph.facebook.com",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://slack.com/api",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.npmjs.com/package/winston#logging",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.url",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["i.e",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ichatadapter",{"_index":260,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["id",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identification",{"_index":1461,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":182,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"coverage.html":{}}}],["identifiers",{"_index":1040,"title":{},"body":{"index.html":{}}}],["identifying",{"_index":1454,"title":{},"body":{"license.html":{}}}],["ifacebookchatconfig",{"_index":466,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["ii",{"_index":1198,"title":{},"body":{"license.html":{}}}],["iii",{"_index":1204,"title":{},"body":{"license.html":{}}}],["im.open",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["image",{"_index":957,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["images",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immediately",{"_index":597,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["implement",{"_index":14,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["implementated",{"_index":48,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["implementation",{"_index":32,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{}}}],["implemented",{"_index":11,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["implementing",{"_index":626,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["implements",{"_index":211,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["implied",{"_index":1385,"title":{},"body":{"license.html":{}}}],["import",{"_index":103,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"license.html":{}}}],["important",{"_index":12,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["improving",{"_index":1022,"title":{},"body":{"index.html":{},"license.html":{}}}],["inability",{"_index":1415,"title":{},"body":{"license.html":{}}}],["incidental",{"_index":1411,"title":{},"body":{"license.html":{}}}],["include",{"_index":16,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["included",{"_index":1027,"title":{},"body":{"index.html":{},"license.html":{}}}],["includes",{"_index":8,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"interfaces/SlackConfig.html":{},"license.html":{}}}],["including",{"_index":1212,"title":{},"body":{"license.html":{}}}],["inclusion",{"_index":1250,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":88,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["incominggetrequest",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incomingmessage",{"_index":433,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["incomingpostrequest",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incomplete",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["incorporated",{"_index":1269,"title":{},"body":{"license.html":{}}}],["incorporating",{"_index":1024,"title":{},"body":{"index.html":{}}}],["incurred",{"_index":1443,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1439,"title":{},"body":{"license.html":{}}}],["indemnity",{"_index":1430,"title":{},"body":{"license.html":{}}}],["index",{"_index":33,"title":{"index.html":{}},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["indicated",{"_index":1227,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":1192,"title":{},"body":{"license.html":{}}}],["individual",{"_index":1206,"title":{},"body":{"license.html":{}}}],["individually",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["individuals",{"_index":1044,"title":{},"body":{"index.html":{}}}],["influence",{"_index":988,"title":{},"body":{"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{}}}],["information",{"_index":149,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["informational",{"_index":1348,"title":{},"body":{"license.html":{}}}],["infringed",{"_index":1298,"title":{},"body":{"license.html":{}}}],["infringement",{"_index":1312,"title":{},"body":{"license.html":{}}}],["init",{"_index":37,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["init(handlerequest",{"_index":79,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["initcore",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["initial",{"_index":1098,"title":{},"body":{"index.html":{}}}],["initialize",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initialized",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializelogging",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["initializes",{"_index":85,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["initwebhook",{"_index":261,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["initwebhook(this.slackevents",{"_index":703,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["inlpadapter",{"_index":316,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["input",{"_index":571,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["inside",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["install",{"_index":1061,"title":{},"body":{"index.html":{}}}],["instance",{"_index":614,"title":{},"body":{"classes/MirrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["instanttime",{"_index":741,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["instead",{"_index":1054,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["institute",{"_index":1302,"title":{},"body":{"license.html":{}}}],["insufficient",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["integrated",{"_index":475,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{}}}],["intent",{"_index":732,"title":{},"body":{"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["intentionally",{"_index":1248,"title":{},"body":{"license.html":{}}}],["intentname",{"_index":406,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["interceptor",{"_index":123,"title":{"interfaces/Interceptor.html":{}},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["interceptor]{@link",{"_index":620,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["interceptorconfig",{"_index":227,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["interceptors",{"_index":232,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"miscellaneous/variables.html":{}}}],["interceptors/interceptor",{"_index":124,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["intercepts",{"_index":552,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["interchangeably",{"_index":984,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"interfaces/SlackConfig.html":{}},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"interfaces/SlackConfig.html":{},"license.html":{},"overview.html":{}}}],["interfaces/interceptor.html",{"_index":621,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["internal",{"_index":217,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{}}}],["internally",{"_index":26,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["internaluserid",{"_index":304,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["invalid",{"_index":510,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["irrevocable",{"_index":1282,"title":{},"body":{"license.html":{}}}],["isattachmentrequest",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["isfallbackintent",{"_index":408,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["isfromadmin",{"_index":1099,"title":{},"body":{"index.html":{}}}],["issue",{"_index":1258,"title":{},"body":{"license.html":{}}}],["istextrequest",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["iswebhookauthenticated",{"_index":792,"title":{},"body":{"coverage.html":{}}}],["itself",{"_index":1115,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["january",{"_index":1170,"title":{},"body":{"license.html":{}}}],["jpg",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["js",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["jsons",{"_index":337,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["keep",{"_index":631,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["key",{"_index":207,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{}}}],["kind",{"_index":740,"title":{},"body":{"classes/SnipsAdapter.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["knowledge",{"_index":1021,"title":{},"body":{"index.html":{}}}],["language",{"_index":203,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["languagecode",{"_index":201,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["large",{"_index":537,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["law",{"_index":1381,"title":{},"body":{"license.html":{}}}],["lawsuit",{"_index":1308,"title":{},"body":{"license.html":{}}}],["left",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legal",{"_index":1185,"title":{},"body":{"license.html":{}}}],["less",{"_index":976,"title":{},"body":{"index.html":{}}}],["level",{"_index":1144,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["levels",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liability",{"_index":1399,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1408,"title":{},"body":{"license.html":{}}}],["licensable",{"_index":1296,"title":{},"body":{"license.html":{}}}],["license",{"_index":1152,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["license.md",{"_index":1158,"title":{},"body":{"index.html":{}}}],["license.you",{"_index":1354,"title":{},"body":{"license.html":{}}}],["licensed",{"_index":1154,"title":{},"body":{"index.html":{},"license.html":{}}}],["licenses",{"_index":1313,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1180,"title":{},"body":{"license.html":{}}}],["lifespan",{"_index":656,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["lifespan]{@link",{"_index":657,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["lifespaninminutes",{"_index":295,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["limitation",{"_index":1386,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1469,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1213,"title":{},"body":{"license.html":{}}}],["line",{"_index":589,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["lines",{"_index":995,"title":{},"body":{"index.html":{}}}],["link",{"_index":1244,"title":{},"body":{"license.html":{}}}],["list",{"_index":1095,"title":{},"body":{"index.html":{}}}],["listening",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lists",{"_index":1257,"title":{},"body":{"license.html":{}}}],["litigation",{"_index":1303,"title":{},"body":{"license.html":{}}}],["locality",{"_index":737,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["location",{"_index":527,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["lodash",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["log",{"_index":511,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["log_messages",{"_index":696,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["log_messages.chat.unknownclient}\\n${response.messengeruserid",{"_index":709,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["logger",{"_index":695,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.warn",{"_index":708,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["logging",{"_index":212,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["logic",{"_index":989,"title":{},"body":{"index.html":{}}}],["logically",{"_index":1012,"title":{},"body":{"index.html":{}}}],["loglevel",{"_index":866,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["loglevel=\"error",{"_index":1147,"title":{},"body":{"index.html":{}}}],["logs",{"_index":1139,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["look",{"_index":189,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["loss",{"_index":1416,"title":{},"body":{"license.html":{}}}],["losses",{"_index":1423,"title":{},"body":{"license.html":{}}}],["lower",{"_index":175,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["lüer",{"_index":1161,"title":{},"body":{"index.html":{}}}],["made",{"_index":1225,"title":{},"body":{"license.html":{}}}],["mailing",{"_index":1256,"title":{},"body":{"license.html":{}}}],["main",{"_index":900,"title":{},"body":{"coverage.html":{}}}],["main.ts",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mainly",{"_index":555,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["maintaining",{"_index":996,"title":{},"body":{"index.html":{}}}],["make",{"_index":1088,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["makerequest",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["makes",{"_index":999,"title":{},"body":{"index.html":{}}}],["makesuccess",{"_index":661,"title":{},"body":{"interfaces/NlpAdapter.html":{},"coverage.html":{}}}],["making",{"_index":560,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{}}}],["malfunction",{"_index":1421,"title":{},"body":{"license.html":{}}}],["managed",{"_index":1260,"title":{},"body":{"license.html":{}}}],["management",{"_index":1195,"title":{},"body":{"license.html":{}}}],["manipulate",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many",{"_index":1043,"title":{},"body":{"index.html":{}}}],["map",{"_index":355,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["mapped",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapserialized",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["mark",{"_index":174,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["markdown",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["marked",{"_index":1264,"title":{},"body":{"license.html":{}}}],["marks",{"_index":1371,"title":{},"body":{"license.html":{}}}],["markup",{"_index":1136,"title":{},"body":{"index.html":{}}}],["match",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":110,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxim",{"_index":1162,"title":{},"body":{"index.html":{}}}],["me/messages",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mean",{"_index":1176,"title":{},"body":{"license.html":{}}}],["meaning",{"_index":991,"title":{},"body":{"index.html":{}}}],["means",{"_index":1025,"title":{},"body":{"index.html":{},"license.html":{}}}],["mechanical",{"_index":1217,"title":{},"body":{"license.html":{}}}],["media",{"_index":1222,"title":{},"body":{"license.html":{}}}],["medium",{"_index":1319,"title":{},"body":{"license.html":{}}}],["meet",{"_index":1320,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1387,"title":{},"body":{"license.html":{}}}],["merely",{"_index":1243,"title":{},"body":{"license.html":{}}}],["message",{"_index":20,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/SlackAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["message.id",{"_index":276,"title":{},"body":{"classes/CliAdapter.html":{}}}],["message.map((randommessage",{"_index":415,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["message.sender.id",{"_index":461,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["message.user",{"_index":704,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["messagehandlingincore",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messagemap",{"_index":910,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":89,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messaging",{"_index":53,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["messenger",{"_index":981,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["messengeruserid",{"_index":107,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":73,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{}}}],["methods",{"_index":34,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["mid",{"_index":1016,"title":{},"body":{"index.html":{}}}],["migrate",{"_index":287,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["minimal",{"_index":9,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["minimalacceptablescore",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["minscore",{"_index":173,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["miracle",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mirror",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mirrorinterceptor",{"_index":593,"title":{"classes/MirrorInterceptor.html":{}},"body":{"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["mirrorinterceptor.getinstance",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mirrorinterceptors",{"_index":596,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["mirrorinterface",{"_index":557,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["miscellaneous",{"_index":950,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["missingappsecret",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["missingpageaccesstoken",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["missingverifytoken",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model/cliclientrequest",{"_index":266,"title":{},"body":{"classes/CliAdapter.html":{}}}],["model/facebookpostrequest",{"_index":438,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["model/nlpadapterresponse",{"_index":323,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["model/slackrequest",{"_index":690,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["model/slackresponse",{"_index":692,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["model/textrequest",{"_index":317,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["modifications",{"_index":1211,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["modified",{"_index":1326,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1349,"title":{},"body":{"license.html":{}}}],["modifying",{"_index":1353,"title":{},"body":{"license.html":{}}}],["modules",{"_index":1470,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":237,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["morethanoneresponse",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multiple",{"_index":133,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{}}}],["multipleresponses",{"_index":417,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["my_first_agent",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["my_second_agent",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":60,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["names",{"_index":649,"title":{},"body":{"interfaces/NlpAdapter.html":{},"license.html":{}}}],["naming",{"_index":629,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["native",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["natural",{"_index":986,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["necessarily",{"_index":1297,"title":{},"body":{"license.html":{}}}],["need",{"_index":987,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["negligence",{"_index":1403,"title":{},"body":{"license.html":{}}}],["negligent",{"_index":1406,"title":{},"body":{"license.html":{}}}],["never",{"_index":385,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["new",{"_index":126,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/MirrorInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":176,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nlp",{"_index":117,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["nlp_adapter/inlpadapter",{"_index":119,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["nlp_adapter/model/nlpadapterresponse",{"_index":122,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["nlpadapter",{"_index":118,"title":{"interfaces/NlpAdapter.html":{}},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlpconfig",{"_index":224,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["nlpmessage",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nlpmessagemap",{"_index":373,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlpmessagemap.set",{"_index":413,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["nlpresponse",{"_index":121,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["nlpstatus",{"_index":322,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["nlptext",{"_index":367,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["nlptocore",{"_index":229,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlptonlp",{"_index":230,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nlu",{"_index":665,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["nlu.readthedocs.io/en/latest",{"_index":760,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["nlu](https://rasa.com/docs/rasa",{"_index":672,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["nlu](https://snips",{"_index":759,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["no_agents",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noagent",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noconfigurationfileprovided",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["non",{"_index":1277,"title":{},"body":{"license.html":{}}}],["nopagesubscriptionevent",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["noresponse",{"_index":488,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["noresponsenotpossible",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normally",{"_index":1345,"title":{},"body":{"license.html":{}}}],["nothing",{"_index":1363,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1228,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1329,"title":{},"body":{"license.html":{}}}],["notion",{"_index":674,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["notwithstanding",{"_index":1361,"title":{},"body":{"license.html":{}}}],["nourlprovided",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["now",{"_index":1068,"title":{},"body":{"index.html":{}}}],["nowebsocketerror",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["npm",{"_index":1062,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":204,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":1215,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["object.keys(agents",{"_index":377,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["obligations",{"_index":1431,"title":{},"body":{"license.html":{}}}],["obtain",{"_index":1466,"title":{},"body":{"license.html":{}}}],["occur",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occured",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":963,"title":{},"body":{"index.html":{},"license.html":{}}}],["offering",{"_index":1041,"title":{},"body":{"index.html":{}}}],["one",{"_index":153,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["oneresponse",{"_index":412,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["open",{"_index":198,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{}}}],["openchannel",{"_index":688,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["openchannel(response.messengeruserid",{"_index":707,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["operating",{"_index":1120,"title":{},"body":{"index.html":{}}}],["operations",{"_index":600,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["optional",{"_index":62,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["order",{"_index":76,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["origin",{"_index":1376,"title":{},"body":{"license.html":{}}}],["original",{"_index":1240,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":556,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{}}}],["out",{"_index":1074,"title":{},"body":{"index.html":{},"license.html":{}}}],["outside",{"_index":44,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["outstanding",{"_index":1202,"title":{},"body":{"license.html":{}}}],["over",{"_index":1057,"title":{},"body":{"index.html":{}}}],["overhead",{"_index":969,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1471,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1182,"title":{},"body":{"license.html":{}}}],["ownership",{"_index":1199,"title":{},"body":{"license.html":{}}}],["package",{"_index":925,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":474,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["page_access_token",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pageaccesstoken",{"_index":471,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"miscellaneous/variables.html":{}}}],["pagesubscriptionevent",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":108,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["parameters",{"_index":58,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["paris",{"_index":727,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["parse",{"_index":729,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["parsed",{"_index":751,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["parser",{"_index":257,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"dependencies.html":{}}}],["part",{"_index":1336,"title":{},"body":{"license.html":{}}}],["particular",{"_index":1389,"title":{},"body":{"license.html":{}}}],["parts",{"_index":1116,"title":{},"body":{"index.html":{}}}],["party",{"_index":1344,"title":{},"body":{"license.html":{}}}],["passed",{"_index":96,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["passes",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paste",{"_index":1082,"title":{},"body":{"index.html":{}}}],["patent",{"_index":1289,"title":{},"body":{"license.html":{}}}],["path",{"_index":218,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["path/to/your/dialogflowapitoken1.json",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path/to/your/dialogflowapitoken2.json",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":546,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["payload.type",{"_index":513,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["payloadnotverified",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["per",{"_index":1026,"title":{},"body":{"index.html":{}}}],["percent",{"_index":1201,"title":{},"body":{"license.html":{}}}],["perform",{"_index":604,"title":{},"body":{"classes/MirrorInterceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["performing",{"_index":599,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["permission",{"_index":1369,"title":{},"body":{"license.html":{}}}],["permissions",{"_index":1208,"title":{},"body":{"license.html":{}}}],["perpetual",{"_index":1275,"title":{},"body":{"license.html":{}}}],["personal",{"_index":982,"title":{},"body":{"index.html":{}}}],["pertain",{"_index":1335,"title":{},"body":{"license.html":{}}}],["phrase",{"_index":725,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["pip",{"_index":1121,"title":{},"body":{"index.html":{}}}],["pipeline",{"_index":486,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["places",{"_index":1340,"title":{},"body":{"license.html":{}}}],["planned",{"_index":1097,"title":{},"body":{"index.html":{}}}],["platform",{"_index":22,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["platform/webhook/#security",{"_index":445,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["platformchatcli",{"_index":812,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformchatfacebook",{"_index":814,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformchatslack",{"_index":816,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformdummyadapter",{"_index":423,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlpdialogflow",{"_index":818,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlpdialogflowv2",{"_index":820,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlprasa",{"_index":822,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platformnlpsnips",{"_index":824,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["platforms",{"_index":187,"title":{},"body":{"interfaces/ClassConstructor.html":{},"index.html":{}}}],["please",{"_index":635,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":641,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["pointing",{"_index":193,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["port",{"_index":226,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/variables.html":{}}}],["portal",{"_index":473,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["possibility",{"_index":1426,"title":{},"body":{"license.html":{}}}],["possible",{"_index":526,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["post",{"_index":55,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["postcontexts",{"_index":298,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{}}}],["postcontexts(internaluserid",{"_index":361,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["postcontexts(this",{"_index":310,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{}}}],["posting",{"_index":660,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["posts",{"_index":651,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["power",{"_index":1190,"title":{},"body":{"license.html":{}}}],["predefined",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preferred",{"_index":1210,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":592,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["prepare",{"_index":1284,"title":{},"body":{"license.html":{}}}],["preprocessed",{"_index":655,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["present",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":468,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"index.html":{}}}],["primary_agent_index",{"_index":850,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["primer",{"_index":1134,"title":{},"body":{"index.html":{}}}],["printed",{"_index":1459,"title":{},"body":{"license.html":{}}}],["privacy",{"_index":1007,"title":{},"body":{"index.html":{}}}],["private",{"_index":241,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["probability",{"_index":734,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["problem",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process",{"_index":140,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["process.env.logginglevel",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.stdin",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":91,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["processing",{"_index":487,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["product",{"_index":1372,"title":{},"body":{"license.html":{}}}],["programming",{"_index":1020,"title":{},"body":{"index.html":{}}}],["project",{"_index":1153,"title":{},"body":{"index.html":{}}}],["project1",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project2",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["project_id",{"_index":181,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/DialogflowConfig.html":{},"miscellaneous/variables.html":{}}}],["projects",{"_index":185,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{}}}],["prominent",{"_index":1328,"title":{},"body":{"license.html":{}}}],["promise",{"_index":68,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["promise.resolve(createresponse(message",{"_index":623,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["promise.resolve(new",{"_index":622,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["prompt",{"_index":901,"title":{},"body":{"coverage.html":{}}}],["properties",{"_index":240,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{}}}],["protect",{"_index":1006,"title":{},"body":{"index.html":{}}}],["protecting",{"_index":1029,"title":{},"body":{"index.html":{}}}],["protection",{"_index":1023,"title":{},"body":{"index.html":{}}}],["provide",{"_index":489,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":338,"title":{},"body":{"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":147,"title":{},"body":{"interfaces/ClassConstructor.html":{},"license.html":{}}}],["proxy",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pseudonymization",{"_index":520,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{}}}],["pseudonymize",{"_index":1039,"title":{},"body":{"index.html":{}}}],["pseudonymized",{"_index":581,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["public",{"_index":244,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/MirrorInterceptor.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["publicly",{"_index":1285,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":293,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"license.html":{}}}],["purposes",{"_index":213,"title":{},"body":{"interfaces/ClassConstructor.html":{},"license.html":{}}}],["python3",{"_index":1123,"title":{},"body":{"index.html":{}}}],["queries",{"_index":142,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["query",{"_index":151,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/SnipsAdapter.html":{}}}],["quickreplies",{"_index":956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["quickreply",{"_index":1102,"title":{},"body":{"index.html":{}}}],["quite",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":1130,"title":{},"body":{"index.html":{}}}],["randommessage.text",{"_index":416,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["randommessages",{"_index":418,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["raphael",{"_index":1166,"title":{},"body":{"index.html":{}}}],["rasa",{"_index":664,"title":{},"body":{"classes/RasaAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rasa_test",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rasaadapter",{"_index":662,"title":{"classes/RasaAdapter.html":{}},"body":{"classes/RasaAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rawbody",{"_index":442,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["readable",{"_index":1338,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":242,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["reason",{"_index":1445,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1373,"title":{},"body":{"license.html":{}}}],["receive",{"_index":1075,"title":{},"body":{"index.html":{}}}],["received",{"_index":528,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["receiving/sending",{"_index":579,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["recipients",{"_index":1323,"title":{},"body":{"license.html":{}}}],["recognition",{"_index":1003,"title":{},"body":{"index.html":{}}}],["recommend",{"_index":1033,"title":{},"body":{"index.html":{},"license.html":{}}}],["recommended",{"_index":1124,"title":{},"body":{"index.html":{}}}],["redistributing",{"_index":1394,"title":{},"body":{"license.html":{}}}],["redistribution",{"_index":1317,"title":{},"body":{"license.html":{}}}],["reduce",{"_index":1019,"title":{},"body":{"index.html":{}}}],["reducing",{"_index":968,"title":{},"body":{"index.html":{}}}],["reference",{"_index":1111,"title":{},"body":{"index.html":{}}}],["regarding",{"_index":150,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["relevant",{"_index":186,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{}}}],["remain",{"_index":1241,"title":{},"body":{"license.html":{}}}],["remains",{"_index":516,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["remove",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["replaced",{"_index":1453,"title":{},"body":{"license.html":{}}}],["repo",{"_index":543,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["repository",{"_index":1030,"title":{},"body":{"index.html":{}}}],["represent",{"_index":1238,"title":{},"body":{"license.html":{}}}],["representatives",{"_index":1255,"title":{},"body":{"license.html":{}}}],["reproduce",{"_index":1283,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1377,"title":{},"body":{"license.html":{}}}],["reproduction",{"_index":1174,"title":{},"body":{"license.html":{}}}],["req",{"_index":447,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["req.rawbody",{"_index":453,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["request",{"_index":80,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/SnipsAdapter.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["requests",{"_index":220,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"index.html":{}}}],["require",{"_index":1055,"title":{},"body":{"index.html":{}}}],["required",{"_index":41,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["requirements.txt",{"_index":1131,"title":{},"body":{"index.html":{}}}],["requirements/functions",{"_index":10,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["resolvedquery",{"_index":404,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["resp",{"_index":710,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["respective",{"_index":56,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["response",{"_index":63,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SlackAdapter.html":{},"miscellaneous/variables.html":{}}}],["response.messengeruserid",{"_index":463,"title":{},"body":{"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["responses",{"_index":97,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["responsetypenotimplemented",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responsibility",{"_index":1437,"title":{},"body":{"license.html":{}}}],["responsible",{"_index":1391,"title":{},"body":{"license.html":{}}}],["restrictive",{"_index":551,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["restructured",{"_index":1135,"title":{},"body":{"index.html":{}}}],["result",{"_index":109,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":1216,"title":{},"body":{"license.html":{}}}],["results",{"_index":111,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retain",{"_index":1332,"title":{},"body":{"license.html":{}}}],["retrieve",{"_index":525,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":274,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":518,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["returnerroraschatadapterresponse",{"_index":846,"title":{},"body":{"coverage.html":{}}}],["returning",{"_index":492,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["returns",{"_index":67,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["revisions",{"_index":1235,"title":{},"body":{"license.html":{}}}],["rights",{"_index":1433,"title":{},"body":{"license.html":{}}}],["risks",{"_index":1396,"title":{},"body":{"license.html":{}}}],["routes",{"_index":497,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["royalty",{"_index":1280,"title":{},"body":{"license.html":{}}}],["run",{"_index":1065,"title":{},"body":{"index.html":{}}}],["runs",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["same",{"_index":627,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["save",{"_index":522,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["saverawbody",{"_index":446,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["score",{"_index":156,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["scorebelowthreshold",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchweatherforecast",{"_index":733,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["second",{"_index":425,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["second_agent",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":715,"title":{},"body":{"interfaces/SlackConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["section",{"_index":1083,"title":{},"body":{"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sections",{"_index":1177,"title":{},"body":{"license.html":{}}}],["see",{"_index":29,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"interfaces/SlackConfig.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["selected",{"_index":392,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["self",{"_index":101,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["sell",{"_index":1292,"title":{},"body":{"license.html":{}}}],["send",{"_index":42,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{},"interfaces/SlackConfig.html":{},"miscellaneous/variables.html":{}}}],["sendhello",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["sending",{"_index":582,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["sendingmessagetouser",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sendmessage",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["sendmultipleresponses",{"_index":439,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["sendmultipleresponses([response",{"_index":462,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["sendresponse",{"_index":788,"title":{},"body":{"coverage.html":{}}}],["sends",{"_index":219,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["sendsingletextrequest",{"_index":299,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["sendsingletextrequest(textrequest",{"_index":364,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["sendsingletextrequest(this",{"_index":313,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["sendtextrequest",{"_index":320,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sendtextrequest(textrequest",{"_index":675,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["sendtextresponse",{"_index":687,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["sendtextresponse(resp",{"_index":711,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["sendtonextagent",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sent",{"_index":65,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["separable",{"_index":1242,"title":{},"body":{"license.html":{}}}],["separate",{"_index":1011,"title":{},"body":{"index.html":{},"license.html":{}}}],["separated",{"_index":1013,"title":{},"body":{"index.html":{}}}],["separating",{"_index":1004,"title":{},"body":{"index.html":{}}}],["separation",{"_index":997,"title":{},"body":{"index.html":{}}}],["server",{"_index":233,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["server.com",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serverconfig",{"_index":225,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["serverresponse",{"_index":434,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["service",{"_index":130,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["services",{"_index":199,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{}}}],["session",{"_index":98,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["set",{"_index":481,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"interfaces/NlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["setconfig",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["setcontexts",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setlogmessages",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["setmessages",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["settings",{"_index":482,"title":{},"body":{"interfaces/FacebookChatConfig.html":{}}}],["setup",{"_index":238,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"index.html":{}}}],["setup]{@link",{"_index":267,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{}}}],["severity",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sha1",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":90,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/NlpAdapter.html":{},"license.html":{}}}],["shares",{"_index":1203,"title":{},"body":{"license.html":{}}}],["shuts",{"_index":70,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["signaling",{"_index":202,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["signals",{"_index":161,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/NlpAdapter.html":{}}}],["signature",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signing",{"_index":714,"title":{},"body":{"interfaces/SlackConfig.html":{}}}],["simple",{"_index":1000,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":653,"title":{},"body":{"interfaces/NlpAdapter.html":{},"index.html":{}}}],["slack",{"_index":718,"title":{},"body":{"interfaces/SlackConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["slack/events",{"_index":684,"title":{},"body":{"classes/SlackAdapter.html":{},"dependencies.html":{}}}],["slack_signing_secret",{"_index":698,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["slackadapter",{"_index":676,"title":{"classes/SlackAdapter.html":{}},"body":{"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slackconfig",{"_index":712,"title":{"interfaces/SlackConfig.html":{}},"body":{"interfaces/SlackConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["slackeventadapter",{"_index":680,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["slackevents",{"_index":678,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["slackmessageroute",{"_index":921,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["slackopenchannelroute",{"_index":922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["slackrequest",{"_index":689,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["slackresponse",{"_index":691,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["sleep",{"_index":917,"title":{},"body":{"coverage.html":{}}}],["slightly",{"_index":1037,"title":{},"body":{"index.html":{}}}],["slotname",{"_index":738,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["slots",{"_index":736,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["small",{"_index":1045,"title":{},"body":{"index.html":{}}}],["smalltalk",{"_index":143,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["snips",{"_index":723,"title":{},"body":{"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["snips/datetime",{"_index":747,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["snips_test",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snipsadapter",{"_index":721,"title":{"classes/SnipsAdapter.html":{}},"body":{"classes/SnipsAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":1214,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1436,"title":{},"body":{"license.html":{}}}],["solely",{"_index":1390,"title":{},"body":{"license.html":{}}}],["solution",{"_index":541,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["solutions",{"_index":534,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["something",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["soon",{"_index":286,"title":{},"body":{"classes/DialogflowAdapter.html":{},"index.html":{}}}],["sorry",{"_index":420,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["spahn",{"_index":1169,"title":{},"body":{"index.html":{}}}],["special",{"_index":1410,"title":{},"body":{"license.html":{}}}],["specialized",{"_index":530,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["specific",{"_index":23,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":640,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["specify",{"_index":114,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["speech",{"_index":1002,"title":{},"body":{"index.html":{}}}],["spent",{"_index":1049,"title":{},"body":{"index.html":{}}}],["sphinx",{"_index":1114,"title":{},"body":{"index.html":{}}}],["sphinxenv",{"_index":1128,"title":{},"body":{"index.html":{}}}],["sphinxenv/bin/activate",{"_index":1129,"title":{},"body":{"index.html":{}}}],["src/.../cli.ts",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../configfacebookdf2.ts",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../configfacebookrasa.ts",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../configslackdf2.ts",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../core.ts",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../dialogflowtextresponse.ts",{"_index":953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../findbestnlpanswerfortextrequest.ts",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getadapter.ts",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getconfig.ts",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../getinterceptors.ts",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../interceptorconfig.ts",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.ts",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logmessages.ts",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../messages.ts",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformchatcli.ts",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformchatfacebook.ts",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformchatslack.ts",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlpdialogflow.ts",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlpdialogflowv2.ts",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlprasa.ts",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../platformnlpsnips.ts",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../serverconfig.ts",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/framework",{"_index":370,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["src/framework/chat_adapter/chatadapterrequest.ts",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/cli/cliadapter.ts",{"_index":236,"title":{},"body":{"classes/CliAdapter.html":{},"coverage.html":{}}}],["src/framework/chat_adapter/cli/cliadapter.ts:20",{"_index":248,"title":{},"body":{"classes/CliAdapter.html":{}}}],["src/framework/chat_adapter/cli/cliadapter.ts:22",{"_index":246,"title":{},"body":{"classes/CliAdapter.html":{}}}],["src/framework/chat_adapter/cli/cliadapter.ts:30",{"_index":253,"title":{},"body":{"classes/CliAdapter.html":{}}}],["src/framework/chat_adapter/cli/cliadapter.ts:48",{"_index":252,"title":{},"body":{"classes/CliAdapter.html":{}}}],["src/framework/chat_adapter/cli/cliadapter.ts:52",{"_index":250,"title":{},"body":{"classes/CliAdapter.html":{}}}],["src/framework/chat_adapter/cli/communication/convertcliclientrequest.ts",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/cli/communication/convertcliclientresponse.ts",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/cli/communication/webhook.ts",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/facebook/communication/convertrequest.ts",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/facebook/communication/convertresponse.ts",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/facebook/communication/sendresponses.ts",{"_index":785,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/facebook/communication/webhook.ts",{"_index":789,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/facebook/facebookadapter.ts",{"_index":426,"title":{},"body":{"classes/FacebookAdapter.html":{},"coverage.html":{}}}],["src/framework/chat_adapter/facebook/facebookadapter.ts:37",{"_index":429,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/framework/chat_adapter/facebook/facebookadapter.ts:39",{"_index":428,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/framework/chat_adapter/facebook/facebookadapter.ts:50",{"_index":432,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/framework/chat_adapter/facebook/facebookadapter.ts:68",{"_index":431,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/framework/chat_adapter/facebook/facebookadapter.ts:72",{"_index":430,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["src/framework/chat_adapter/facebook/facebookconfig.ts",{"_index":465,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"coverage.html":{}}}],["src/framework/chat_adapter/ichatadapter.ts",{"_index":6,"title":{},"body":{"interfaces/ChatAdapter.html":{},"coverage.html":{}}}],["src/framework/chat_adapter/ichatadapter.ts:19",{"_index":84,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["src/framework/chat_adapter/ichatadapter.ts:29",{"_index":69,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["src/framework/chat_adapter/ichatadapter.ts:39",{"_index":40,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["src/framework/chat_adapter/slack/communication/convertrequest.ts",{"_index":798,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/slack/communication/convertresponse.ts",{"_index":799,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/slack/communication/webhook.ts",{"_index":800,"title":{},"body":{"coverage.html":{}}}],["src/framework/chat_adapter/slack/slackadapter.ts",{"_index":677,"title":{},"body":{"classes/SlackAdapter.html":{},"coverage.html":{}}}],["src/framework/chat_adapter/slack/slackadapter.ts:21",{"_index":679,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["src/framework/chat_adapter/slack/slackadapter.ts:30",{"_index":683,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["src/framework/chat_adapter/slack/slackadapter.ts:44",{"_index":682,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["src/framework/chat_adapter/slack/slackadapter.ts:48",{"_index":681,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["src/framework/chat_adapter/slack/slackconfig.ts",{"_index":713,"title":{},"body":{"interfaces/SlackConfig.html":{},"coverage.html":{}}}],["src/framework/chat_adapter/utils.ts",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["src/framework/configuration/configfacebookdf2.ts",{"_index":806,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/configfacebookrasa.ts",{"_index":808,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/configslackdf2.ts",{"_index":809,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/configtypes.ts",{"_index":113,"title":{},"body":{"interfaces/ClassConstructor.html":{},"coverage.html":{}}}],["src/framework/configuration/interceptorconfig.ts",{"_index":810,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformchatcli.ts",{"_index":811,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformchatfacebook.ts",{"_index":813,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformchatslack.ts",{"_index":815,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformnlpdialogflow.ts",{"_index":817,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformnlpdialogflowv2.ts",{"_index":819,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformnlprasa.ts",{"_index":821,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/platformnlpsnips.ts",{"_index":823,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/configuration/serverconfig.ts",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/constants/logmessages.ts",{"_index":826,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/constants/messages.ts",{"_index":829,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/core/core.ts",{"_index":832,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/core/defaultconfig.ts",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["src/framework/core/getadapter.ts",{"_index":837,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/core/getconfig.ts",{"_index":838,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/core/getinterceptors.ts",{"_index":840,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/core/handlereceivedmessage.ts",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["src/framework/core/utils/findbestnlpanswerfortextrequest.ts",{"_index":847,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/core/utils/generateid.ts",{"_index":851,"title":{},"body":{"coverage.html":{}}}],["src/framework/core/utils/getorderedagents.ts",{"_index":852,"title":{},"body":{"coverage.html":{}}}],["src/framework/core/utils/responseutils.ts",{"_index":854,"title":{},"body":{"coverage.html":{}}}],["src/framework/core/utils/transformmessagetype.ts",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["src/framework/interceptors/interceptor.ts",{"_index":483,"title":{},"body":{"interfaces/Interceptor.html":{},"coverage.html":{}}}],["src/framework/interceptors/interceptor.ts:68",{"_index":576,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["src/framework/interceptors/mirrorinterceptor.ts",{"_index":594,"title":{},"body":{"classes/MirrorInterceptor.html":{},"coverage.html":{}}}],["src/framework/interceptors/mirrorinterceptor.ts:24",{"_index":611,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["src/framework/interceptors/mirrorinterceptor.ts:30",{"_index":615,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["src/framework/logger.ts",{"_index":865,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/framework/nlp_adapter/communication/deletecontexts.ts",{"_index":868,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/communication/postcontexts.ts",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/convertstringarraytonlpcontexts.ts",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflow/communication/deletecontexts.ts",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflow/communication/postcontextsfromserver.ts",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflow/communication/responseconverters.ts",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflow/communication/sendtextrequest.ts",{"_index":883,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflow/dialogflowadapter.ts",{"_index":281,"title":{},"body":{"classes/DialogflowAdapter.html":{},"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflow/dialogflowadapter.ts:22",{"_index":302,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/framework/nlp_adapter/dialogflow/dialogflowadapter.ts:24",{"_index":306,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/framework/nlp_adapter/dialogflow/dialogflowadapter.ts:35",{"_index":309,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/framework/nlp_adapter/dialogflow/dialogflowadapter.ts:47",{"_index":312,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/framework/nlp_adapter/dialogflow/dialogflowadapter.ts:60",{"_index":315,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["src/framework/nlp_adapter/dialogflow/model/dialogflowtextresponse.ts",{"_index":954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/communication/deletecontexts.ts",{"_index":884,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/communication/getcontexts.ts",{"_index":885,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/communication/postcontextsfromserver.ts",{"_index":887,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/communication/responseconverters.ts",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/communication/sendtextrequest.ts",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowconfig.ts",{"_index":330,"title":{},"body":{"interfaces/DialogflowConfig.html":{},"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts",{"_index":336,"title":{},"body":{"classes/DialogflowV2Adapter.html":{},"coverage.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:23",{"_index":340,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:25",{"_index":341,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:39",{"_index":343,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:55",{"_index":344,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/framework/nlp_adapter/dialogflowv2/dialogflowv2adapter.ts:70",{"_index":345,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["src/framework/nlp_adapter/inlpadapter",{"_index":366,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["src/framework/nlp_adapter/inlpadapter.ts",{"_index":625,"title":{},"body":{"interfaces/NlpAdapter.html":{},"coverage.html":{}}}],["src/framework/nlp_adapter/inlpadapter.ts:28",{"_index":638,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/framework/nlp_adapter/inlpadapter.ts:44",{"_index":647,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/framework/nlp_adapter/inlpadapter.ts:61",{"_index":650,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/framework/nlp_adapter/inlpadapter.ts:77",{"_index":652,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["src/framework/nlp_adapter/model/nlpadapterresponse",{"_index":368,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["src/framework/nlp_adapter/model/textrequest",{"_index":371,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["src/framework/nlp_adapter/rasa/communication/responseconverters.ts",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/rasa/communication/sendtextrequest.ts",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/rasa/rasaadapter.ts",{"_index":663,"title":{},"body":{"classes/RasaAdapter.html":{},"coverage.html":{}}}],["src/framework/nlp_adapter/rasa/rasaadapter.ts:20",{"_index":666,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/framework/nlp_adapter/rasa/rasaadapter.ts:22",{"_index":667,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/framework/nlp_adapter/rasa/rasaadapter.ts:29",{"_index":668,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/framework/nlp_adapter/rasa/rasaadapter.ts:41",{"_index":669,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/framework/nlp_adapter/rasa/rasaadapter.ts:49",{"_index":670,"title":{},"body":{"classes/RasaAdapter.html":{}}}],["src/framework/nlp_adapter/snips/communication/responseconverters.ts",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/snips/communication/sendtextrequest.ts",{"_index":898,"title":{},"body":{"coverage.html":{}}}],["src/framework/nlp_adapter/snips/snipsadapter.ts",{"_index":722,"title":{},"body":{"classes/SnipsAdapter.html":{},"coverage.html":{}}}],["src/framework/nlp_adapter/snips/snipsadapter.ts:52",{"_index":754,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/framework/nlp_adapter/snips/snipsadapter.ts:54",{"_index":755,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/framework/nlp_adapter/snips/snipsadapter.ts:61",{"_index":756,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/framework/nlp_adapter/snips/snipsadapter.ts:73",{"_index":757,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/framework/nlp_adapter/snips/snipsadapter.ts:81",{"_index":758,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["src/logger.ts",{"_index":1138,"title":{},"body":{"index.html":{}}}],["src/main.ts",{"_index":1087,"title":{},"body":{"index.html":{}}}],["src/tools/cli.ts",{"_index":899,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stage",{"_index":584,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["standardized",{"_index":970,"title":{},"body":{"index.html":{}}}],["start",{"_index":1067,"title":{},"body":{"index.html":{}}}],["started",{"_index":960,"title":{"index.html":{},"license.html":{}},"body":{}}],["starting",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["starts",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state",{"_index":508,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"license.html":{}}}],["stated",{"_index":1291,"title":{},"body":{"license.html":{}}}],["statement",{"_index":1355,"title":{},"body":{"license.html":{}}}],["statements",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":609,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["stating",{"_index":1330,"title":{},"body":{"license.html":{}}}],["status",{"_index":402,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["stdin",{"_index":905,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stdout",{"_index":906,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["steps",{"_index":1060,"title":{},"body":{"index.html":{}}}],["stop",{"_index":485,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["stoppage",{"_index":1418,"title":{},"body":{"license.html":{}}}],["stopped",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stored",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":82,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1272,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1287,"title":{},"body":{"license.html":{}}}],["submission",{"_index":1357,"title":{},"body":{"license.html":{}}}],["submit",{"_index":1251,"title":{},"body":{"license.html":{}}}],["submitted",{"_index":1249,"title":{},"body":{"license.html":{}}}],["subscription",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subsequently",{"_index":1268,"title":{},"body":{"license.html":{}}}],["success",{"_index":387,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["success:false",{"_index":646,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["success:true",{"_index":644,"title":{},"body":{"interfaces/NlpAdapter.html":{}}}],["successful",{"_index":491,"title":{},"body":{"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{}}}],["such",{"_index":659,"title":{},"body":{"interfaces/NlpAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"license.html":{}}}],["suffice",{"_index":558,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["sufficient",{"_index":602,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["suitable",{"_index":493,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["supersede",{"_index":1365,"title":{},"body":{"license.html":{}}}],["supplied",{"_index":749,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["support",{"_index":673,"title":{},"body":{"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["supported",{"_index":529,"title":{},"body":{"interfaces/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["sure",{"_index":1089,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["switching",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["syntax",{"_index":1458,"title":{},"body":{"license.html":{}}}],["system",{"_index":1104,"title":{},"body":{"index.html":{}}}],["systems",{"_index":1107,"title":{},"body":{"index.html":{},"license.html":{}}}],["t",{"_index":127,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["tabea",{"_index":1168,"title":{},"body":{"index.html":{}}}],["table",{"_index":924,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":923,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":188,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["takes",{"_index":570,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["tasked",{"_index":139,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["telling",{"_index":1076,"title":{},"body":{"index.html":{}}}],["term",{"_index":1017,"title":{},"body":{"index.html":{}}}],["terminal",{"_index":1063,"title":{},"body":{"index.html":{}}}],["terminate",{"_index":1314,"title":{},"body":{"license.html":{}}}],["terms",{"_index":634,"title":{},"body":{"interfaces/NlpAdapter.html":{},"license.html":{}}}],["test",{"_index":1031,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test/.../_facebooktestserver.ts",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../_slacktestserver.ts",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../dummynlpadapter.ts",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../facebookadaptertest.ts",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/.../slackadaptertest.ts",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test/_mocks/dummynlpadapter.ts",{"_index":352,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/_mocks/dummynlpadapter.ts:104",{"_index":365,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["test/_mocks/dummynlpadapter.ts:14",{"_index":356,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["test/_mocks/dummynlpadapter.ts:16",{"_index":354,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["test/_mocks/dummynlpadapter.ts:28",{"_index":358,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["test/_mocks/dummynlpadapter.ts:52",{"_index":360,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["test/_mocks/dummynlpadapter.ts:80",{"_index":363,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["test/chat_adapter/facebook/_mocks/_facebooktestserver.ts",{"_index":911,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/chat_adapter/facebook/facebookadaptertest.ts",{"_index":908,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/chat_adapter/slack/_mocks/_slacktestserver.ts",{"_index":918,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["test/chat_adapter/slack/slackadaptertest.ts",{"_index":916,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":409,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/Interceptor.html":{},"interfaces/NlpAdapter.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["text_request",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["texthandlinginit",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textrequest",{"_index":314,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{}}}],["textrequest.internaluserid",{"_index":414,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["textrequest.message",{"_index":405,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["textrequestresult",{"_index":403,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["textrequestresult.score",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["texttoresponse",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["thedetection",{"_index":154,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["theory",{"_index":1401,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1246,"title":{},"body":{"license.html":{}}}],["think",{"_index":535,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["third",{"_index":170,"title":{},"body":{"interfaces/ClassConstructor.html":{},"license.html":{}}}],["this.app",{"_index":269,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["this.app.use(bodyparser.raw",{"_index":271,"title":{},"body":{"classes/CliAdapter.html":{}}}],["this.currentcontextmap.get(agentname",{"_index":382,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["this.currentcontextmap.has(agentname",{"_index":380,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["this.currentcontextmap.set(agentname",{"_index":379,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["this.lifespaninminutes",{"_index":374,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["this.server",{"_index":272,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["this.server.close",{"_index":277,"title":{},"body":{"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{}}}],["this.slackevents",{"_index":700,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["this.slackevents.stop",{"_index":705,"title":{},"body":{"classes/SlackAdapter.html":{}}}],["those",{"_index":1106,"title":{},"body":{"index.html":{},"license.html":{}}}],["three",{"_index":166,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["threshold",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["through",{"_index":100,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"license.html":{}}}],["throw",{"_index":278,"title":{},"body":{"classes/CliAdapter.html":{},"classes/DummyNlpAdapter.html":{}}}],["time",{"_index":1047,"title":{},"body":{"index.html":{}}}],["title",{"_index":1101,"title":{},"body":{"index.html":{},"license.html":{}}}],["token",{"_index":178,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"interfaces/SlackConfig.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":291,"title":{},"body":{"classes/DialogflowAdapter.html":{},"miscellaneous/variables.html":{}}}],["tonlpmessage",{"_index":880,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["tonlpstatus",{"_index":881,"title":{},"body":{"coverage.html":{}}}],["tonlptextresponse",{"_index":882,"title":{},"body":{"coverage.html":{}}}],["tort",{"_index":1402,"title":{},"body":{"license.html":{}}}],["tracking",{"_index":1259,"title":{},"body":{"license.html":{}}}],["trade",{"_index":1370,"title":{},"body":{"license.html":{}}}],["trademark",{"_index":1333,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1368,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":1293,"title":{},"body":{"license.html":{}}}],["transform",{"_index":19,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["transformation",{"_index":1218,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["transformchatadapterrequestresponsetonlpresponse",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["transforming",{"_index":504,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["transformnlpresponsetochatadapterresponse",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["transformtochatadapterresponse",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["transformtochatadapterresponseerror",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["translation",{"_index":1219,"title":{},"body":{"license.html":{}}}],["transports",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tried",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":401,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"interfaces/NlpAdapter.html":{}}}],["try",{"_index":630,"title":{},"body":{"interfaces/NlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":1066,"title":{},"body":{"index.html":{}}}],["two",{"_index":1142,"title":{},"body":{"index.html":{}}}],["type",{"_index":61,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"classes/CliAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/DialogflowConfig.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SlackAdapter.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":531,"title":{},"body":{"interfaces/Interceptor.html":{},"license.html":{}}}],["typescript",{"_index":590,"title":{},"body":{"interfaces/Interceptor.html":{},"dependencies.html":{}}}],["typings",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["u",{"_index":612,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["ubuntu",{"_index":1119,"title":{},"body":{"index.html":{}}}],["unable",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unabletoaddcontexts",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unabletosendresponse",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorized",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":383,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":1155,"title":{},"body":{"index.html":{},"license.html":{}}}],["understand",{"_index":421,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["union",{"_index":1186,"title":{},"body":{"license.html":{}}}],["units",{"_index":1014,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":391,"title":{},"body":{"classes/DummyNlpAdapter.html":{},"miscellaneous/variables.html":{}}}],["unknownagenterror",{"_index":394,"title":{},"body":{"classes/DummyNlpAdapter.html":{}}}],["unknownclient",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unless",{"_index":1359,"title":{},"body":{"license.html":{}}}],["unsupported",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedattachment",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedbuttonerror",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedcustompayloaderror",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedformat",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupportedmessagetype",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsure",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["up",{"_index":1077,"title":{},"body":{"index.html":{}}}],["updated",{"_index":339,"title":{},"body":{"classes/DialogflowV2Adapter.html":{}}}],["url",{"_index":192,"title":{},"body":{"interfaces/ClassConstructor.html":{},"classes/DummyNlpAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["usage",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":50,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["usecases",{"_index":606,"title":{},"body":{"classes/MirrorInterceptor.html":{}}}],["used",{"_index":74,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/SlackConfig.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1005,"title":{},"body":{"index.html":{}}}],["user",{"_index":66,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/DialogflowAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"interfaces/NlpAdapter.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["userconnectedto",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdefinedlogging.log",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":577,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{}}}],["usernotfoundorcreatable",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":539,"title":{},"body":{"interfaces/Interceptor.html":{},"classes/SnipsAdapter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["uses",{"_index":289,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["using",{"_index":197,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["usual",{"_index":45,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["usually",{"_index":15,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/ClassConstructor.html":{},"interfaces/Interceptor.html":{},"index.html":{}}}],["utf8",{"_index":455,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["utility",{"_index":148,"title":{},"body":{"interfaces/ClassConstructor.html":{}}}],["v1",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v2",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v3.3",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["valid",{"_index":1118,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["validatepayload",{"_index":793,"title":{},"body":{"coverage.html":{}}}],["validation",{"_index":443,"title":{},"body":{"classes/FacebookAdapter.html":{}}}],["value",{"_index":301,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"classes/DummyNlpAdapter.html":{},"classes/RasaAdapter.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":523,"title":{},"body":{"interfaces/Interceptor.html":{}}}],["variable",{"_index":807,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["variables",{"_index":1473,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vary",{"_index":49,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["verbal",{"_index":1254,"title":{},"body":{"license.html":{}}}],["verbose",{"_index":1145,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["verified",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":716,"title":{},"body":{"interfaces/SlackConfig.html":{}}}],["verify",{"_index":459,"title":{},"body":{"classes/FacebookAdapter.html":{},"interfaces/FacebookChatConfig.html":{},"interfaces/SlackConfig.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["verify_token",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifyauthentication",{"_index":794,"title":{},"body":{"coverage.html":{}}}],["verifytoken",{"_index":478,"title":{},"body":{"interfaces/FacebookChatConfig.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":284,"title":{},"body":{"classes/DialogflowAdapter.html":{},"classes/DialogflowV2Adapter.html":{},"interfaces/FacebookChatConfig.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["very",{"_index":993,"title":{},"body":{"index.html":{}}}],["via",{"_index":498,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["virtual",{"_index":1126,"title":{},"body":{"index.html":{}}}],["virtualenv",{"_index":1125,"title":{},"body":{"index.html":{}}}],["void",{"_index":83,"title":{},"body":{"interfaces/ChatAdapter.html":{},"classes/CliAdapter.html":{},"classes/FacebookAdapter.html":{},"classes/SlackAdapter.html":{}}}],["want",{"_index":13,"title":{},"body":{"interfaces/ChatAdapter.html":{},"interfaces/Interceptor.html":{},"classes/MirrorInterceptor.html":{},"classes/SnipsAdapter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["warning",{"_index":282,"title":{},"body":{"classes/DialogflowAdapter.html":{}}}],["warnings",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":1384,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1379,"title":{},"body":{"license.html":{}}}],["way",{"_index":47,"title":{},"body":{"interfaces/ChatAdapter.html":{},"index.html":{}}}],["weather",{"_index":726,"title":{},"body":{"classes/SnipsAdapter.html":{}}}],["webhook",{"_index":215,"title":{},"body":{"interfaces/ClassConstructor.html":{},"interfaces/FacebookChatConfig.html":{},"classes/SnipsAdapter.html":{},"miscellaneous/variables.html":{}}}],["webhook_path",{"_index":222,"title":{},"body":{"interfaces/ClassConstructor.html":{},"miscellaneous/variables.html":{}}}],["webhooklistening",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhooknotverfied",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webhookverified",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webserver",{"_index":86,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["website",{"_index":983,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":51,"title":{},"body":{"interfaces/ChatAdapter.html":{},"miscellaneous/variables.html":{}}}],["websocketerror",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["weird",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["welcome",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["well",{"_index":1141,"title":{},"body":{"index.html":{}}}],["went",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wherever",{"_index":1343,"title":{},"body":{"license.html":{}}}],["whether",{"_index":1196,"title":{},"body":{"license.html":{}}}],["whilst",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":1239,"title":{},"body":{"license.html":{}}}],["winston",{"_index":948,"title":{},"body":{"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["winston.createlogger",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.format.json",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["winston.transports.file",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wish",{"_index":603,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{}}}],["within",{"_index":1270,"title":{},"body":{"license.html":{}}}],["without",{"_index":598,"title":{},"body":{"classes/MirrorInterceptor.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["work",{"_index":1223,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["workflow",{"_index":46,"title":{},"body":{"interfaces/ChatAdapter.html":{}}}],["works",{"_index":1073,"title":{},"body":{"index.html":{},"license.html":{}}}],["workspace",{"_index":719,"title":{},"body":{"interfaces/SlackConfig.html":{}}}],["worldwide",{"_index":1276,"title":{},"body":{"license.html":{}}}],["write",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":1266,"title":{},"body":{"license.html":{}}}],["written",{"_index":1140,"title":{},"body":{"index.html":{},"license.html":{}}}],["wrong",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_app_secret",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_dialogflow_token_from_agent_1",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_dialogflow_token_from_agent_2",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_page_access_token",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_secret",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_secret_token",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_slack_oauth_token",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_slack_secret",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["your_verify_token",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yourself",{"_index":536,"title":{},"body":{"interfaces/Interceptor.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ChatAdapter.html":{"url":"interfaces/ChatAdapter.html","title":"interface - ChatAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChatAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/chat_adapter/IChatAdapter.ts\n        \n\n            \n                Description\n            \n            \n                ChatAdapter includes the minimal requirements/functions that have to be implemented by every ChatAdapter. This\ninterface is important if you want to implement your own ChatAdapter.\nUsually you want to include functions to e.g. transform a message from a ChatAdapterResponse to the platform-specific\nformat. This is handled internally by the distinctive adapter. See FacebookAdapter for an exemplary implementation.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    contactClient\n                                \n                                \n                                    deinit\n                                \n                                \n                                    init\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \ncontactClient(response: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/IChatAdapter.ts:39\n                \n            \n\n\n            \n                \n                    Required to send a message to the client outside of the usual workflow.\nThe way this is implementated can vary. You could e.g. use a websocket or, if allowed by the messaging platform,\ndirectly post to the respective API.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A ChatAdapterResponse with the content that should be sent to the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deinit\n                        \n                        \n                    \n                \n            \n            \n                \ndeinit()\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/IChatAdapter.ts:29\n                \n            \n\n\n            \n                \n                    Shuts down the chat adapter. This method is used by the core in order to close the Botframework.\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            init\n                        \n                        \n                    \n                \n            \n            \n                \ninit(handleRequest: (request: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/IChatAdapter.ts:19\n                \n            \n\n\n            \n                \n                    Initializes a webserver and awaits incoming messages that shall be processed. A handleRequest function that\ndetermines how you want to handle incoming messages has to be passed to the init() function. handleRequest\nshould handle responses to the user in a session established by the client through an incoming message.\nUse contactClient if you want to send a message outside of the usual workflow (e.g. self-defined actions)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ChatAdapterRequest } from './ChatAdapterRequest';\nimport { ChatAdapterResponse } from './ChatAdapterResponse';\nimport { Response } from '../core/model/Response';\n\n/**\n * ChatAdapter includes the minimal requirements/functions that have to be implemented by every `ChatAdapter`. This\n * interface is important if you want to implement your own `ChatAdapter`.\n *\n * Usually you want to include functions to e.g. transform a message from a ChatAdapterResponse to the platform-specific\n * format. This is handled internally by the distinctive adapter. See `FacebookAdapter` for an exemplary implementation.\n */\nexport interface ChatAdapter {\n    /**\n     * Initializes a webserver and awaits incoming messages that shall be processed. A `handleRequest` function that\n     * determines how you want to handle incoming messages has to be passed to the `init()` function. `handleRequest`\n     * should handle responses to the user in a session established by the client through an incoming message.\n     * Use `contactClient` if you want to send a message outside of the usual workflow (e.g. self-defined actions)\n     */\n    init(\n        handleRequest: (\n            request: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise;\n\n    /**\n     * Shuts down the chat adapter. This method is used by the core in order to close the Botframework.\n     */\n    deinit(): Promise;\n\n    /**\n     * Required to send a message to the client outside of the usual workflow.\n     *\n     * The way this is implementated can vary. You could e.g. use a websocket or, if allowed by the messaging platform,\n     * directly post to the respective API.\n     *\n     * @param response A `ChatAdapterResponse` with the content that should be sent to the user.\n     */\n    contactClient(response: ChatAdapterResponse): Promise;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ClassConstructor.html":{"url":"interfaces/ClassConstructor.html","title":"interface - ClassConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ClassConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/configuration/configTypes.ts\n        \n\n            \n                Description\n            \n            \n                Used to specify the type of a class constructor (NLP or Chat)\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../nlp_adapter/INlpAdapter';\nimport { ChatAdapter } from '../chat_adapter/IChatAdapter';\nimport { NlpResponse } from '../nlp_adapter/model/NlpAdapterResponse';\nimport { Interceptor } from '../interceptors/Interceptor';\nimport { ChatAdapterRequest } from '../chat_adapter/ChatAdapterRequest';\n\n/**\n * Used to specify the type of a class constructor (NLP or Chat)\n * */\nexport interface ClassConstructor {\n    new (): T;\n}\n\n/**\n * A (chat)bot can be deployed on a messaging service. The bot can consist of multiple so called _agents_.\n * An agent is a coherent entity, usually tasked to process certain queries (e.g. an agent to process smalltalk\n * and another agent with additional functionality that provides utility like information regarding a service).\n * Usually, a query is first sent to one agent, and then to another agent if thedetection certainty (the score)\n * has not been high enough.\n *\n * An `Agent` has:\n * 1. `executionIndex`: signals when an agent will be asked. The higher the `executionIndex`, the faster the agent\n *      will be asked. Example: You have three agents with executionIndices [2,3,1].\n *      The third agent (with the executionIndex 1) will be contacted first.\n * 2. `minScore`: minimal score to mark a response from an agent as `certain`. If the NLP service returns a score\n *      lower than `minScore`, the next agent will be contacted.\n * 3. `token`: authentication token of the NLP service.\n * 4. `project_id`: an identifier for e.g. Google Cloud Projects. Not relevant for all platforms, take a look at the\n *      respective adapters.\n * 5. `url`: url pointing to the NLP service. Especially relevant if the service does not have a fixed endpoint\n *      (e.g. when using open source services)\n * 6. `languageCode`: signaling the language of your agent.\n */\nexport type Agent = {\n    executionIndex: number;\n    minScore: number;\n    token: string;\n    url: string;\n    languageCode: string;\n    defaultLifespan?: number;\n};\n\n/**\n * Includes all `Agent`s relevant to your service.\n */\nexport type Agents = {\n    [key: string]: Agent;\n};\n\n/**\n * A basic configuration for your chat adapter. Your own implementation of a chat adapter should implement this type,\n * containing:\n *\n * 1. `constructor`: Implements the `ChatAdapter` interface.\n * 2. `name`: The name of your messaging platform. Used for logging purposes.\n * 3. `url`: The url of the messaging API with which you communicate.\n * 4. `webhook`: The framework internal webhook path to which a messaging API sends its requests\n */\nexport type ChatConfig = {\n    constructor: ClassConstructor;\n    name: string;\n    url: string;\n    webhook_path: string;\n    appSecret: string;\n};\n\nexport type NlpConfig = {\n    agents: Agents;\n    constructor: ClassConstructor;\n    name: string;\n};\n\nexport type ServerConfig = {\n    port: number;\n};\n\nexport type InterceptorConfig = {\n    chatToCore: () => Promise\n    >;\n    nlpToCore: () => Promise>;\n    nlpToNlp: () => Promise>;\n};\n\nexport type Config = {\n    interceptors: InterceptorConfig;\n    platform: {\n        chat: ChatConfig;\n        nlp: NlpConfig;\n    };\n    server: ServerConfig;\n};\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CliAdapter.html":{"url":"classes/CliAdapter.html","title":"class - CliAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CliAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/chat_adapter/cli/CliAdapter.ts\n        \n\n            \n                Description\n            \n            \n                For more information regarding the setup:\nsee CLI setup.\nFor more information regarding the functionality: see ChatAdapter.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ChatAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                            \n                                    Private\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactClient\n                            \n                            \n                                    Public\n                                    Async\n                                deinit\n                            \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/framework/chat_adapter/cli/CliAdapter.ts:22\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     express.Express\n\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/chat_adapter/cli/CliAdapter.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/chat_adapter/cli/CliAdapter.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    contactClient(_: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/cli/CliAdapter.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deinit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deinit()\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/cli/CliAdapter.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(handleRequest: (message: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/cli/CliAdapter.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport { Server, createServer } from 'http';\nimport { ChatAdapter } from '../IChatAdapter';\nimport { ChatAdapterRequest } from '../ChatAdapterRequest';\nimport { ChatAdapterResponse } from '../ChatAdapterResponse';\nimport { Response } from '../../core/model/Response';\nimport { initWebhook } from './communication/webhook';\nimport { convertIntoChatAdapterRequest } from './communication/convertCliClientRequest';\nimport { CliClientRequest } from './model/CliClientRequest';\n\n/**\n * For more information regarding the setup:\n * see [CLI setup]{@link ../../_build/html/chat_adapter/cli_messenger.html}.\n * For more information regarding the functionality: see `ChatAdapter`.\n *\n * @implements {ChatAdapter}\n */\nexport class CliAdapter implements ChatAdapter {\n    private readonly server: Server;\n\n    private readonly app: express.Express;\n\n    constructor() {\n        this.app = express().use(bodyParser.json());\n        this.app.use(bodyParser.raw());\n        this.server = createServer(this.app);\n    }\n\n    public async init(\n        handleRequest: (\n            message: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise {\n        initWebhook(\n            this.server,\n            this.app,\n            async (message: CliClientRequest) => {\n                return handleRequest(\n                    convertIntoChatAdapterRequest(message),\n                    message.id,\n                );\n            },\n        );\n    }\n\n    public async deinit(): Promise {\n        this.server.close();\n    }\n\n    public contactClient(_: ChatAdapterResponse): Promise {\n        throw new Error('Method not implemented.');\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DialogflowAdapter.html":{"url":"classes/DialogflowAdapter.html","title":"class - DialogflowAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DialogflowAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts\n        \n\n            \n                Description\n            \n            \n                WARNING: The Dialogflow API version 1 will be deprecated soon. Migrate to version 2 and use the DialogflowV2Adapter.\nAdapter for the Dialogflow framework. This is an adapter for the Dialogflow API version 1.\nVersion 1 uses client and developer tokens to authenticate a user.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                postContexts\n                            \n                            \n                                    Public\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts:22\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(this: DialogflowAdapter, internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(this: DialogflowAdapter, internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: DialogflowAdapter, message: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from './communication/deleteContexts';\nimport { postContexts } from './communication/postContextsFromServer';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport { NlpResponse, NlpStatus } from '../model/NlpAdapterResponse';\nimport { getConfig } from '../../core/getConfig';\n\n/**\n * WARNING: The Dialogflow API version 1 will be deprecated soon. Migrate to version 2 and use the `DialogflowV2Adapter`.\n * Adapter for the [Dialogflow](https://dialogflow.com/) framework. This is an adapter for the Dialogflow API version 1.\n * Version 1 uses client and developer tokens to authenticate a user.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class DialogflowAdapter implements NlpAdapter {\n    public lifespanInMinutes = 2;\n\n    public deleteAllContexts(\n        this: DialogflowAdapter,\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        return deleteAllContexts(\n            internalUserId,\n            getConfig().platform.nlp.agents[agentName].token,\n        );\n    }\n\n    public deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextToDelete: string[],\n    ): Promise {\n        return deleteSelectedContexts(\n            internalUserId,\n            agentName,\n            contextToDelete,\n        );\n    }\n\n    public postContexts(\n        this: DialogflowAdapter,\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        return postContexts(\n            internalUserId,\n            contexts,\n            getConfig().platform.nlp.agents[agentName].token,\n        );\n    }\n\n    public sendSingleTextRequest(\n        this: DialogflowAdapter,\n        message: TextRequest,\n        agentName: string,\n    ): Promise {\n        return sendTextRequest(\n            message,\n            agentName,\n            getConfig().platform.nlp.agents[agentName].token,\n            getConfig().platform.nlp.agents[agentName].url,\n        );\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DialogflowConfig.html":{"url":"interfaces/DialogflowConfig.html","title":"interface - DialogflowConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DialogflowConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/nlp_adapter/dialogflowV2/dialogflowConfig.ts\n        \n\n\n            \n                Extends\n            \n            \n                        NlpConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        agents\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        agents\n                                    \n                                \n                                \n                                    \n                                        agents:         DialogflowAgents\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DialogflowAgents\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Agent, NlpConfig } from '../../configuration/configTypes';\nimport { DialogflowAdapter } from '../dialogflow/DialogflowAdapter';\n\nexport type DialogflowAgent = Agent & {\n    project_id: string;\n    defaultLifespan: number;\n};\n\nexport type DialogflowAgents = {\n    [key: string]: DialogflowAgent;\n};\n\nexport interface DialogflowConfig extends NlpConfig {\n    agents: DialogflowAgents;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DialogflowV2Adapter.html":{"url":"classes/DialogflowV2Adapter.html","title":"class - DialogflowV2Adapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DialogflowV2Adapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts\n        \n\n            \n                Description\n            \n            \n                Adapter for the Dialogflow framework. This is an adapter for Dialogflow API version 2.\nVersion 2 uses JSONs provided through Google Cloud Projects to authenticate the requests and has an updated response\nformat.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                postContexts\n                            \n                            \n                                    Public\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 2\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(this: DialogflowV2Adapter, internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(this: DialogflowV2Adapter, internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(this: DialogflowV2Adapter, internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: DialogflowV2Adapter, message: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                DialogflowV2Adapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from './communication/deleteContexts';\nimport { postContexts } from './communication/postContextsFromServer';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport { NlpResponse, NlpStatus } from '../model/NlpAdapterResponse';\nimport { getConfig } from '../../core/getConfig';\nimport { DialogflowConfig } from './dialogflowConfig';\n\n/**\n * Adapter for the [Dialogflow](https://dialogflow.com/) framework. This is an adapter for Dialogflow API version 2.\n * Version 2 uses JSONs provided through Google Cloud Projects to authenticate the requests and has an updated response\n * format.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class DialogflowV2Adapter implements NlpAdapter {\n    public lifespanInMinutes = 2;\n\n    public deleteAllContexts(\n        this: DialogflowV2Adapter,\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return deleteAllContexts(\n            internalUserId,\n            dialogflowConfig.agents[agentName].project_id,\n            dialogflowConfig.agents[agentName].token,\n        );\n    }\n\n    public deleteSelectedContexts(\n        this: DialogflowV2Adapter,\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return deleteSelectedContexts(\n            internalUserId,\n            dialogflowConfig.agents[agentName].project_id,\n            dialogflowConfig.agents[agentName].token,\n            contexts,\n        );\n    }\n\n    public postContexts(\n        this: DialogflowV2Adapter,\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return postContexts(\n            internalUserId,\n            dialogflowConfig.agents[agentName],\n            contexts,\n        );\n    }\n\n    public sendSingleTextRequest(\n        this: DialogflowV2Adapter,\n        message: TextRequest,\n        agentName: string,\n    ): Promise {\n        const dialogflowConfig = getConfig().platform.nlp as DialogflowConfig;\n\n        return sendTextRequest(\n            message,\n            dialogflowConfig.agents[agentName].project_id,\n            dialogflowConfig.agents[agentName].token,\n            agentName,\n        );\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DummyNlpAdapter.html":{"url":"classes/DummyNlpAdapter.html","title":"class - DummyNlpAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DummyNlpAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/_mocks/DummyNlpAdapter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                currentContextMap\n                            \n                            \n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteAllContexts\n                            \n                            \n                                    Async\n                                deleteSelectedContexts\n                            \n                            \n                                    Async\n                                postContexts\n                            \n                            \n                                    Async\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in test/_mocks/DummyNlpAdapter.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            currentContextMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map>()\n                        \n                    \n                        \n                            \n                                    Defined in test/_mocks/DummyNlpAdapter.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in test/_mocks/DummyNlpAdapter.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in test/_mocks/DummyNlpAdapter.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextsToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in test/_mocks/DummyNlpAdapter.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextsToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(internalUserId: string, agentName: string, contextsToPost: string[])\n                \n            \n\n\n            \n                \n                    Defined in test/_mocks/DummyNlpAdapter.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextsToPost\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in test/_mocks/DummyNlpAdapter.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../../src/framework/nlp_adapter/INlpAdapter';\nimport {\n    NlpStatus,\n    NlpResponse,\n    NlpText,\n} from '../../src/framework/nlp_adapter/model/NlpAdapterResponse';\nimport { getConfig, Agents, generateId, NlpConfig } from '../../src/framework';\nimport { TextRequest } from '../../src/framework/nlp_adapter/model/TextRequest';\nimport * as crypto from 'crypto';\n\nexport const nlpMessageMap = new Map();\n\nexport class DummyNlpAdapter implements NlpAdapter {\n    lifespanInMinutes: number;\n\n    public currentContextMap = new Map>();\n\n    constructor() {\n        this.lifespanInMinutes = 5;\n        const agents: Agents = getConfig().platform.nlp.agents;\n        const agentNames: string[] = Object.keys(agents);\n\n        agentNames.forEach(agentName =>\n            this.currentContextMap.set(agentName, new Map()),\n        );\n    }\n\n    async deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        if (this.currentContextMap.has(agentName)) {\n            const contextMap = this.currentContextMap.get(agentName);\n            if (contextMap === undefined) {\n                throw new Error('This can never happen.');\n            }\n\n            const success = contextMap.delete(internalUserId);\n\n            return {\n                success,\n            } as NlpStatus;\n        } else {\n            return {\n                success: false,\n                errorDetails: 'Unknown agent was selected.',\n                errorType: 'UnknownAgentError',\n            };\n        }\n    }\n\n    async deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextsToDelete: string[],\n    ): Promise {\n        const contextMap = this.currentContextMap.get(agentName);\n\n        if (contextMap) {\n            const contextArray = contextMap.get(internalUserId) as string[];\n            contextsToDelete.forEach((context: string) => {\n                if (contextArray.includes(context)) {\n                    contextArray.splice(contextArray.indexOf(context));\n                }\n            });\n            contextMap.set(internalUserId, contextArray);\n\n            return {\n                success: true,\n            } as NlpStatus;\n        }\n\n        return {\n            success: false,\n            errorDetails: 'Unknown agent was selected.',\n            errorType: 'UnknownAgentError',\n        };\n    }\n\n    async postContexts(\n        internalUserId: string,\n        agentName: string,\n        contextsToPost: string[],\n    ): Promise {\n        if (this.currentContextMap.has(agentName)) {\n            const contextMap = this.currentContextMap.get(agentName) as Map;\n            contextMap.set(internalUserId, contextsToPost);\n\n            return {\n                success: true,\n            };\n        }\n\n        return {\n            success: false,\n            errorDetails: 'Unknown agent was selected.',\n            errorType: 'UnknownAgentError',\n        };\n    }\n\n    async sendSingleTextRequest(\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise {\n        if (!this.currentContextMap.has(agentName)) {\n            return {\n                status: {\n                    success: false,\n                    errorDetails: 'Unknown agent was selected.',\n                    errorType: 'UnknownAgentError',\n                },\n                agentName,\n                textRequestResult: {\n                    resolvedQuery: textRequest.message,\n                    intentname: generateId(),\n                    action: generateId(),\n                    isFallbackIntent: false,\n                    parameters: {},\n                    message: [\n                        {\n                            type: 'text',\n                            text: 'Hello!',\n                        },\n                    ],\n                    score: 0.9,\n                },\n            };\n        }\n\n        if (textRequest.message === 'oneResponse') {\n            const message: NlpText[] = [\n                {\n                    type: 'text',\n                    text: 'Hello!',\n                },\n            ];\n            nlpMessageMap.set(\n                textRequest.internalUserId,\n                message.map((randomMessage: NlpText) => randomMessage.text),\n            );\n\n            return {\n                status: {\n                    success: true,\n                },\n                agentName,\n                textRequestResult: {\n                    resolvedQuery: textRequest.message,\n                    intentname: generateId(),\n                    action: generateId(),\n                    isFallbackIntent: false,\n                    parameters: {},\n                    message: message,\n                    score: 0.9,\n                },\n            };\n        }\n\n        if (textRequest.message === 'multipleResponses') {\n            const randomMessages: NlpText[] = [];\n\n            for (let i = 0; i  randomMessage.text,\n                ),\n            );\n\n            return {\n                status: {\n                    success: true,\n                },\n                agentName,\n                textRequestResult: {\n                    resolvedQuery: textRequest.message,\n                    intentname: generateId(),\n                    action: generateId(),\n                    isFallbackIntent: false,\n                    parameters: {},\n                    message: randomMessages,\n                    score: 0.9,\n                },\n            };\n        }\n\n        return {\n            status: {\n                success: true,\n            },\n            agentName,\n            textRequestResult: {\n                resolvedQuery: textRequest.message,\n                intentname: generateId(),\n                action: generateId(),\n                isFallbackIntent: true,\n                parameters: {},\n                message: [\n                    {\n                        type: 'text',\n                        text: 'Sorry, I did not understand this!',\n                    },\n                ],\n                score: 0.1,\n            },\n        };\n    }\n}\n\nexport const platformDummyAdapter: NlpConfig = {\n    agents: {\n        first: {\n            executionIndex: 0,\n            minScore: 0.8,\n            token: '',\n            url: '',\n            languageCode: '',\n        },\n        second: {\n            executionIndex: 0,\n            minScore: 0.8,\n            token: '',\n            url: '',\n            languageCode: '',\n        },\n    },\n    constructor: DummyNlpAdapter,\n    name: 'dummyNlpAdapter',\n};\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FacebookAdapter.html":{"url":"classes/FacebookAdapter.html","title":"class - FacebookAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FacebookAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/chat_adapter/facebook/FacebookAdapter.ts\n        \n\n            \n                Description\n            \n            \n                For more information regarding the setup:\nsee Facebook setup.\nFor more information regarding the functionality: see ChatAdapter.\n\n            \n\n\n            \n                Implements\n            \n            \n                            ChatAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                app\n                            \n                            \n                                    Private\n                                    Readonly\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                contactClient\n                            \n                            \n                                    Async\n                                deinit\n                            \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/framework/chat_adapter/facebook/FacebookAdapter.ts:39\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            app\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     express.Express\n\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/chat_adapter/facebook/FacebookAdapter.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/chat_adapter/facebook/FacebookAdapter.ts:37\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    contactClient(response: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/facebook/FacebookAdapter.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deinit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deinit()\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/facebook/FacebookAdapter.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(handleRequest: (message: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/facebook/FacebookAdapter.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as express from 'express';\nimport * as bodyParser from 'body-parser';\nimport { Server, createServer, IncomingMessage, ServerResponse } from 'http';\nimport { ChatAdapter } from '../IChatAdapter';\nimport { ChatAdapterResponse } from '../ChatAdapterResponse';\nimport { initWebhook } from './communication/webhook';\nimport { ChatAdapterRequest } from '../ChatAdapterRequest';\nimport { convertFacebookRequest } from './communication/convertRequest';\nimport { FacebookMessaging } from './model/FacebookPostRequest';\nimport { Response } from '../../core/model/Response';\nimport { sendMultipleResponses } from './communication/sendResponses';\n\ntype ExtendedIncomingMessage = IncomingMessage & { rawBody: string };\n\n/**\n * Required for message validation (https://developers.facebook.com/docs/messenger-platform/webhook/#security).\n */\nfunction saveRawBody(\n    req: ExtendedIncomingMessage,\n    _res: ServerResponse,\n    buf: Buffer,\n    encoding: string,\n): void {\n    if (buf?.length) {\n        req.rawBody = buf.toString(encoding ?? 'utf8');\n    }\n}\n\n/**\n * For more information regarding the setup:\n * see [Facebook setup]{@link ../../_build/html/chat_adapter/facebook_messenger.html}.\n * For more information regarding the functionality: see `ChatAdapter`.\n *\n * @implements {ChatAdapter}\n */\nexport class FacebookAdapter implements ChatAdapter {\n    private readonly server: Server;\n\n    private readonly app: express.Express;\n\n    constructor() {\n        this.app = express().use(\n            bodyParser.json({\n                verify: saveRawBody,\n            }),\n        );\n        this.server = createServer(this.app);\n    }\n\n    public async init(\n        handleRequest: (\n            message: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise {\n        initWebhook(\n            this.server,\n            this.app,\n            async (message: FacebookMessaging) => {\n                return handleRequest(\n                    convertFacebookRequest(message),\n                    message.sender.id,\n                );\n            },\n        );\n    }\n\n    async deinit(): Promise {\n        this.server.close();\n    }\n\n    public contactClient(response: ChatAdapterResponse): Promise {\n        return sendMultipleResponses([response], response.messengerUserId);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacebookChatConfig.html":{"url":"interfaces/FacebookChatConfig.html","title":"interface - FacebookChatConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FacebookChatConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/chat_adapter/facebook/facebookConfig.ts\n        \n\n            \n                Description\n            \n            \n                The IFacebookChatConfig interface is required for authentication with Facebook. It includes:\n\nappSecret: used to decrypt messages from Facebook to preserve the confidentiality.\nversion: Version of the Facebook Graph API to which the request is sent to.\npageAccessToken: Required for each application in the Facebook Developer Portal.\n  For each page the application is integrated in, a different pageAccessToken has to be generated.\nverifyToken: Used to verify the communication between your server and a Facebook App.\n  Set in the \"Webhook\" settings of the Facebook Developer Portal.\n\nThe interface has to be implemented by the FacebookAdapter. For more information regarding the setup,\nsee Facebook setup.\n\n            \n\n            \n                Extends\n            \n            \n                        ChatConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        pageAccessToken\n                                \n                                \n                                        verifyToken\n                                \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        pageAccessToken\n                                    \n                                \n                                \n                                    \n                                        pageAccessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        verifyToken\n                                    \n                                \n                                \n                                    \n                                        verifyToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChatConfig } from '../../configuration/configTypes';\nimport { FacebookAdapter } from './FacebookAdapter';\n\n/**\n * The `IFacebookChatConfig` interface is required for authentication with Facebook. It includes:\n *\n * 1. `appSecret`: used to decrypt messages from Facebook to preserve the confidentiality.\n * 2. `version`: Version of the Facebook Graph API to which the request is sent to.\n * 3. `pageAccessToken`: Required for each application in the Facebook Developer Portal.\n *     For each page the application is integrated in, a different `pageAccessToken` has to be generated.\n * 4. `verifyToken`: Used to verify the communication between your server and a Facebook App.\n *     Set in the \"Webhook\" settings of the Facebook Developer Portal.\n *\n * The interface has to be implemented by the `FacebookAdapter`. For more information regarding the setup,\n * see [Facebook setup]{@link ../../_build/html/chat_adapter/facebook_messenger.html}.\n *\n * @interface\n */\nexport interface FacebookChatConfig extends ChatConfig {\n    version: string;\n    pageAccessToken: string;\n    verifyToken: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Interceptor.html":{"url":"interfaces/Interceptor.html","title":"interface - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Interceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/interceptors/Interceptor.ts\n        \n\n            \n                Description\n            \n            \n                Interface that defines an Interceptor.\nWhile you can stop the pipeline processing in your interceptor and return a NoResponse, you should\nprovide some feedback to the user that the request was successful (or not). You can do that by either returning\na suitable message to the emubot framework or using one of the alternative contact routes provided by the used\nChatAdapter via the contactClient method.\nThe emubot framework has some examples for different interceptors that you can find in our extended example\nhere.\nemubot uses three interceptors:\n\nInterceptor chatToCore,\nInterceptor nlpToNlp and\nInterceptor nlpToCore.\n\nInterceptor chatToCore handles the message after transforming it into a common format and before any internal or\nexternal state is changed. Invalid requests should be handled here (log or further process them). The payload.type\nshould be changed in your custom code if you want to further process the message. If the type remains 'invalid',\nan error message is returned to the user.\nCommon use cases include:\n\nPseudonymization of the messengerUserId.\nHandling messages which are no text messages.\nSave values in a database or retrieve them.\n\nPossible invalid messages are e.g. 'Location' which can be received from Facebook, but which are not supported yet.\nSpecialized and platform-specific types will most likely not be supported by this framework to avoid bloated code.\nPossible solutions:\n\nContact us if you think that a type required by yourself will be required by a large group of users.\n(Fastest solution) Fork the repo and add the types to the relevant Adapter and ChatAdapterRequest.\nA generic payload type might be added in the future, where most information from the message could be accessed,\nif the current type is too restrictive.\n\nInterceptor nlpToNlp intercepts the message during the determination which agent should be used. Mainly required if\nmultiple agents are used (otherwise a default MirrorInterface should suffice).\nCommon use cases are:\n\nStop the decision making early: Accept messages (e.g. fallbacks depending on the context).\nDelete/Add contexts if the message of a specific agent is not used in the user response.\n\nInterceptor nlpToCore intercepts the already determined, final message from the NLP service. Takes an NlpResponse as\ninput and returns another NlpResponse.\nCommon use cases are:\n\nExecute external actions.\nSave values in a database or retrieve values.\nDepseudonymize the internalUserId.\n\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    handleMessage\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \nhandleMessage(userId: string, message: T)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/interceptors/Interceptor.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A user identifier required to process the message. Should be depseudonymized when\nreceiving/sending a text from/to the messaging platform and pseudonymized when\nsending it to an NLP service.\n\n                                    \n                                \n                                \n                                    message\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The respective message. The type and content of the message depends on the stage where the message\nis processed (e.g. before sending it to the NLP service or afterwards)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A (usually user-defined) Response.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Response } from '../core/model/Response';\n\n/**\n * Interface that defines an `Interceptor`.\n *\n * While you can stop the pipeline processing in your interceptor and return a `NoResponse`, you should\n * provide some feedback to the user that the request was successful (or not). You can do that by either returning\n * a suitable message to the emubot framework or using one of the alternative contact routes provided by the used\n * `ChatAdapter` via the `contactClient` method.\n *\n * The emubot framework has some examples for different interceptors that you can find in our extended example\n * [here](https://github.com/emundo/emubot-extended-example/).\n *\n * emubot uses three interceptors:\n *\n * 1. Interceptor `chatToCore`,\n * 2. Interceptor `nlpToNlp` and\n * 3. Interceptor `nlpToCore`.\n *\n * Interceptor `chatToCore` handles the message after transforming it into a common format and before any internal or\n * external state is changed. Invalid requests should be handled here (log or further process them). The `payload.type`\n * should be changed in your custom code if you want to further process the message. If the type remains 'invalid',\n * an error message is returned to the user.\n *\n * Common use cases include:\n * 1. Pseudonymization of the messengerUserId.\n * 2. Handling messages which are no text messages.\n * 3. Save values in a database or retrieve them.\n *\n * Possible invalid messages are e.g. 'Location' which can be received from Facebook, but which are not supported yet.\n * Specialized and platform-specific types will most likely not be supported by this framework to avoid bloated code.\n *\n * Possible solutions:\n * 1. Contact us if you think that a type required by yourself will be required by a large group of users.\n * 2. (Fastest solution) Fork the repo and add the types to the relevant Adapter and ChatAdapterRequest.\n * 3. A generic payload type might be added in the future, where most information from the message could be accessed,\n * if the current type is too restrictive.\n *\n *\n * Interceptor `nlpToNlp` intercepts the message during the determination which agent should be used. Mainly required if\n * multiple agents are used (otherwise a default `MirrorInterface` should suffice).\n *\n * Common use cases are:\n * 1. Stop the decision making early: Accept messages (e.g. fallbacks depending on the context).\n * 2. Delete/Add contexts if the message of a specific agent is not used in the user response.\n *\n *\n * Interceptor `nlpToCore` intercepts the already determined, final message from the NLP service. Takes an NlpResponse as\n * input and returns another NlpResponse.\n *\n * Common use cases are:\n * 1. Execute external actions.\n * 2. Save values in a database or retrieve values.\n * 3. Depseudonymize the internalUserId.\n *\n */\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\nexport interface Interceptor {\n    /**\n     *\n     * @param userId A user identifier required to process the message. Should be depseudonymized when\n     *               receiving/sending a text from/to the messaging platform and pseudonymized when\n     *               sending it to an NLP service.\n     * @param message The respective message. The type and content of the message depends on the stage where the message\n     *                is processed (e.g. before sending it to the NLP service or afterwards)\n     * @returns A (usually user-defined) `Response`.\n     */\n    handleMessage(userId: string, message: T): Promise>;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MirrorInterceptor.html":{"url":"classes/MirrorInterceptor.html","title":"class - MirrorInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MirrorInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/interceptors/MirrorInterceptor.ts\n        \n\n            \n                Description\n            \n            \n                Defines the base class of MirrorInterceptors. A MirrorInterceptor takes a message from one of the three interfaces\nand immediately returns it to the user without performing any additional operations and without changing the content\nor any other external state.\nUsing the MirrorInterceptor for all three interfaces is sufficient if you only want to let a user communicate with\nyour NLP Service. If you wish to perform additional actions (e.g. save information in a database or use information\nfrom your CMS), you should implement your own interceptor. You can also have a look at some\nexamples of interceptors.\nMore information regarding the usecases and which interceptors exist can be found at\nInterceptor.\n\n            \n\n\n            \n                Implements\n            \n            \n                            Interceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Async\n                                getInstance\n                            \n                            \n                                    Public\n                                handleMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            Async\n                            getInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInstance()\n                \n            \n\n\n            \n                \n                    Defined in src/framework/interceptors/MirrorInterceptor.ts:24\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        U\n                    \n                \n            \n\n            \n                \n                    Used to create a new MirrorInterceptor-instance.\n\n\n                    \n                        Returns :         Promise>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            handleMessage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(userId: string, message: T)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/interceptors/MirrorInterceptor.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BotFrameworkInterfaceMessage } from './BotFrameworkInterfaceMessage';\nimport { createResponse } from '../core/utils/responseUtils';\nimport { Response } from '../core/model/Response';\nimport { Interceptor } from './Interceptor';\n\n/**\n * Defines the base class of MirrorInterceptors. A `MirrorInterceptor` takes a message from one of the three interfaces\n * and immediately returns it to the user without performing any additional operations and without changing the content\n * or any other external state.\n *\n * Using the `MirrorInterceptor` for all three interfaces is sufficient if you only want to let a user communicate with\n * your NLP Service. If you wish to perform additional actions (e.g. save information in a database or use information\n * from your CMS), you should implement your own interceptor. You can also have a look at some\n * [examples](https://github.com/emundo/emubot-extended-example/) of interceptors.\n *\n * More information regarding the usecases and which interceptors exist can be found at\n * [Interceptor]{@link ../interfaces/Interceptor.html}.\n */\nexport class MirrorInterceptor\n    implements Interceptor {\n    /**\n     * Used to create a new `MirrorInterceptor`-instance.\n     */\n    public static async getInstance(): Promise> {\n        return Promise.resolve(new MirrorInterceptor());\n    }\n\n    public handleMessage(userId: string, message: T): Promise> {\n        return Promise.resolve(createResponse(message, 200, userId));\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NlpAdapter.html":{"url":"interfaces/NlpAdapter.html","title":"interface - NlpAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NlpAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/nlp_adapter/INlpAdapter.ts\n        \n\n            \n                Description\n            \n            \n                Implementing this interface is required by all classes that implement the functionality of NLP\nservices (also called NLP adapters).\nNot all NLP services implement the same concepts with the same naming, we will try to keep our\ndefinitions as clear as possible. For more information regarding the concepts in terms of the\nrespective NLP service, please consult our external documentation.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lifespanInMinutes\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    deleteAllContexts\n                                \n                                \n                                    deleteSelectedContexts\n                                \n                                \n                                    postContexts\n                                \n                                \n                                    sendSingleTextRequest\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/INlpAdapter.ts:28\n                \n            \n\n\n            \n                \n                    Deletes ALL contexts of a session specified by internalUserId.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User identifier. Should be pseudonymized at this point.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An NlpStatus that includes success:true, if all contexts have been deleted,\nsuccess:false and information regarding the error, if not all contexts were deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteSelectedContexts(internalUserId: string, agentName: string, contextsToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/INlpAdapter.ts:44\n                \n            \n\n\n            \n                \n                    Deletes selected contexts, specified by their name.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User identifier. Should be pseudonymized at this point.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                                \n                                    contextsToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An array of context names that shall be deleted.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An NlpStatus that includes success:true, if all contexts have been deleted,\nsuccess:false and information regarding the error, if not all contexts were deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \npostContexts(internalUserId: string, agentName: string, contextsToPost: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/INlpAdapter.ts:61\n                \n            \n\n\n            \n                \n                    Posts an array of contexts to an NLP service.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User identifier. Should be pseudonymized at this point.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                                \n                                    contextsToPost\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Array of names of contexts that should be set.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An NlpStatus that includes success:true, if all contexts have been deleted,\nsuccess:false and information regarding the error, if not all contexts were deleted.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \nsendSingleTextRequest(textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/INlpAdapter.ts:77\n                \n            \n\n\n            \n                \n                    Send a single text request to an NLP service.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Includes the user identifier (should be pseudonymized at this point) and\nthe message that should be classified by the NLP service.\n\n                                    \n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the agent (\"bot\") your request should be sent to.\nCan be chosen arbitrarily in your configuration file.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        An NlpResponse which is preprocessed to be further processed by the core.\n\n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lifespanInMinutes\n                                    \n                                \n                                \n                                    \n                                        lifespanInMinutes:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Lifespan of a context (see Lifespan).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { NlpResponse, NlpStatus } from './model/NlpAdapterResponse';\nimport { TextRequest } from './model/TextRequest';\n\n/**\n * Implementing this interface is required by all classes that implement the functionality of NLP\n * services (also called NLP adapters).\n *\n * Not all NLP services implement the same concepts with the same naming, we will try to keep our\n * definitions as clear as possible. For more information regarding the concepts in terms of the\n * respective NLP service, please consult our external documentation.\n */\nexport interface NlpAdapter {\n    /**\n     * Lifespan of a context (see [Lifespan]{@link ../../_build/html/nlp_adapter/custom_nlp_adapter.html}).\n     */\n    lifespanInMinutes: number;\n\n    /**\n     * Deletes **ALL** contexts of a session specified by `internalUserId`.\n     *\n     * @param internalUserId User identifier. Should be pseudonymized at this point.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     *\n     * @returns An NlpStatus that includes `success:true`, if all contexts have been deleted,\n     *          `success:false` and information regarding the error, if not all contexts were deleted.\n     */\n    deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise;\n\n    /**\n     * Deletes selected contexts, specified by their name.\n     *\n     * @param internalUserId User identifier. Should be pseudonymized at this point.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     * @param contextsToDelete An array of context names that shall be deleted.\n     *\n     * @returns An NlpStatus that includes `success:true`, if all contexts have been deleted,\n     *          `success:false` and information regarding the error, if not all contexts were deleted.\n     */\n    deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextsToDelete: string[],\n    ): Promise;\n\n    /**\n     * Posts an array of contexts to an NLP service.\n     *\n     * @param internalUserId User identifier. Should be pseudonymized at this point.\n     * @param contextsToPost Array of names of contexts that should be set.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     *\n     * @returns An NlpStatus that includes `success:true`, if all contexts have been deleted,\n     *          `success:false` and information regarding the error, if not all contexts were deleted.\n     */\n    postContexts(\n        internalUserId: string,\n        agentName: string,\n        contextsToPost: string[],\n    ): Promise;\n\n    /**\n     * Send a single text request to an NLP service.\n     *\n     * @param textRequest Includes the user identifier (should be pseudonymized at this point) and\n     *                    the message that should be classified by the NLP service.\n     * @param agentName Name of the agent (\"bot\") your request should be sent to.\n     *                  Can be chosen arbitrarily in your configuration file.\n     *\n     * @returns An NlpResponse which is preprocessed to be further processed by the core.\n     */\n    sendSingleTextRequest(\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise;\n}\n\n/**\n * Signals that an action, such as posting a context, has been successful.\n */\nexport function makeSuccess(): NlpStatus {\n    return {\n        success: true,\n    } as NlpStatus;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RasaAdapter.html":{"url":"classes/RasaAdapter.html","title":"class - RasaAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RasaAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/nlp_adapter/rasa/RasaAdapter.ts\n        \n\n            \n                Description\n            \n            \n                Adapter for the Rasa NLU framework.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                    Async\n                                postContexts\n                            \n                            \n                                    Public\n                                    Async\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/nlp_adapter/rasa/RasaAdapter.ts:20\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/rasa/RasaAdapter.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/rasa/RasaAdapter.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/rasa/RasaAdapter.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: RasaAdapter, textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/rasa/RasaAdapter.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                RasaAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport { NlpStatus, NlpResponse } from '../model/NlpAdapterResponse';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from '../communication/deleteContexts';\nimport { postContexts } from '../communication/postContexts';\n\n/**\n * Adapter for the [Rasa NLU](https://rasa.com/docs/rasa/) framework.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class RasaAdapter implements NlpAdapter {\n    // Lifespan not required. Rasa does not support the same notion of contexts as other NLP services\n    public lifespanInMinutes = 0;\n\n    public async deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        return deleteAllContexts(internalUserId, agentName);\n    }\n\n    public deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextToDelete: string[],\n    ): Promise {\n        return deleteSelectedContexts(\n            internalUserId,\n            agentName,\n            contextToDelete,\n        );\n    }\n\n    public async postContexts(\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        return postContexts(internalUserId, agentName, contexts);\n    }\n\n    public async sendSingleTextRequest(\n        this: RasaAdapter,\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise {\n        return sendTextRequest(textRequest, agentName);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SlackAdapter.html":{"url":"classes/SlackAdapter.html","title":"class - SlackAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SlackAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/chat_adapter/slack/SlackAdapter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            ChatAdapter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                slackEvents\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                contactClient\n                            \n                            \n                                    Async\n                                deinit\n                            \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/framework/chat_adapter/slack/SlackAdapter.ts:21\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            slackEvents\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SlackEventAdapter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/chat_adapter/slack/SlackAdapter.ts:21\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            contactClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    contactClient(response: ChatAdapterResponse)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/slack/SlackAdapter.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                ChatAdapterResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deinit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deinit()\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/slack/SlackAdapter.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            init\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    init(handleRequest: (message: ChatAdapterRequest,messengerUserId: string) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/chat_adapter/slack/SlackAdapter.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handleRequest\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import SlackEventAdapter from '@slack/events-api/dist/adapter';\nimport { createEventAdapter } from '@slack/events-api';\nimport { ChatAdapter } from '../IChatAdapter';\nimport { ChatAdapterRequest } from '../ChatAdapterRequest';\nimport { ChatAdapterResponse } from '../ChatAdapterResponse';\nimport { Response } from '../../core/model/Response';\nimport {\n    initWebhook,\n    sendTextResponse,\n    openChannel,\n} from './communication/webhook';\nimport { convertIntoChatAdapterRequest } from './communication/convertRequest';\nimport { SlackRequest } from './model/SlackRequest';\nimport { SlackResponse } from './model/SlackResponse';\nimport { convertToSlackResponse } from './communication/convertResponse';\nimport { logger } from '../../logger';\nimport { LOG_MESSAGES } from '../../constants/logMessages';\nimport { getConfig } from '../../core/getConfig';\n\nexport class SlackAdapter implements ChatAdapter {\n    public slackEvents: SlackEventAdapter;\n\n    constructor() {\n        const SLACK_SIGNING_SECRET: string = getConfig().platform.chat\n            .appSecret;\n\n        this.slackEvents = createEventAdapter(SLACK_SIGNING_SECRET);\n    }\n\n    public async init(\n        handleRequest: (\n            message: ChatAdapterRequest,\n            messengerUserId: string,\n        ) => Promise>,\n    ): Promise {\n        await initWebhook(this.slackEvents, async (message: SlackRequest) => {\n            return handleRequest(\n                convertIntoChatAdapterRequest(message),\n                message.user,\n            );\n        });\n    }\n\n    async deinit(): Promise {\n        await this.slackEvents.stop();\n    }\n\n    async contactClient(response: ChatAdapterResponse): Promise {\n        const channel: string = await openChannel(response.messengerUserId);\n        if (channel === '') {\n            logger.warn(\n                `${LOG_MESSAGES.chat.unknownClient}\\n${response.messengerUserId}`,\n            );\n\n            return;\n        }\n        const resp: SlackResponse = convertToSlackResponse(\n            response,\n            response.messengerUserId,\n            channel,\n        );\n\n        await sendTextResponse(resp);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SlackConfig.html":{"url":"interfaces/SlackConfig.html","title":"interface - SlackConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SlackConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/chat_adapter/slack/slackConfig.ts\n        \n\n            \n                Description\n            \n            \n                The SlackConfig interface is required for authentication with Facebook. It includes:\n\nappSecret: A signing secret which verifies the challenge send by the Slack API\n  For each page the application is integrated in, a different pageAccessToken has to be generated.\ntoken: Used to verify the communication between your server and your Slack workspace.\n\nThe interface has to be implemented by the SlackAdapter. For more information regarding the setup,\nsee Facebook setup.\n\n            \n\n            \n                Extends\n            \n            \n                        ChatConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        token\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { SlackAdapter } from './SlackAdapter';\nimport { ChatConfig } from '../../configuration/configTypes';\n\n/**\n * The `SlackConfig` interface is required for authentication with Facebook. It includes:\n *\n * 1. `appSecret`: A signing secret which verifies the challenge send by the Slack API\n *     For each page the application is integrated in, a different `pageAccessToken` has to be generated.\n * 4. `token`: Used to verify the communication between your server and your Slack workspace.\n *\n * The interface has to be implemented by the `SlackAdapter`. For more information regarding the setup,\n * see [Facebook setup]{@link ../../_build/html/chat_adapter/slack.html}.\n *\n * @interface\n */\n\nexport interface SlackConfig extends ChatConfig {\n    token: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnipsAdapter.html":{"url":"classes/SnipsAdapter.html","title":"class - SnipsAdapter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnipsAdapter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/framework/nlp_adapter/snips/SnipsAdapter.ts\n        \n\n            \n                Description\n            \n            \n                Adapter for the Snips NLU framework.\nGiven a phrase such as\n       What will the weather be like in paris at 9pm?Snips NLU will parse the query and answer with a result of the form:\n  {\n  \"intent\": {\n     \"intentName\": \"searchWeatherForecast\",\n     \"probability\": 0.95\n  },\n  \"slots\": [\n     {\n         \"value\": \"paris\",\n         \"entity\": \"locality\",\n         \"slotName\": \"forecastLocality\"\n     },\n     {\n         \"value\": {\n         \"kind\": \"InstantTime\",\n         \"value\": \"2018-02-08 20:00:00 +00:00\"\n         },\n         \"entity\": \"snips/datetime\",\n         \"slotName\": \"forecastStartDatetime\"\n     }\n   ]\n  }If you want emubot to handle the messages which should be supplied to the user, you should add a messages\nfield into the parsed result. You can also add a contexts field if desired. The request to the Snips webhook\nwill also include an internalUserID which can be used to differentiate between users.\nFor more information regarding the purpose of each function, take a look at the implemented interface.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NlpAdapter\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                lifespanInMinutes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                deleteAllContexts\n                            \n                            \n                                    Public\n                                deleteSelectedContexts\n                            \n                            \n                                    Public\n                                    Async\n                                postContexts\n                            \n                            \n                                    Public\n                                    Async\n                                sendSingleTextRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            lifespanInMinutes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/framework/nlp_adapter/snips/SnipsAdapter.ts:52\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAllContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAllContexts(internalUserId: string, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/snips/SnipsAdapter.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deleteSelectedContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSelectedContexts(internalUserId: string, agentName: string, contextToDelete: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/snips/SnipsAdapter.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contextToDelete\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            postContexts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    postContexts(internalUserId: string, agentName: string, contexts: string[])\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/snips/SnipsAdapter.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    internalUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    contexts\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            sendSingleTextRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sendSingleTextRequest(this: SnipsAdapter, textRequest: TextRequest, agentName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/framework/nlp_adapter/snips/SnipsAdapter.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    this\n                                    \n                                                SnipsAdapter\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    textRequest\n                                    \n                                                TextRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    agentName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { NlpAdapter } from '../INlpAdapter';\nimport { TextRequest } from '../model/TextRequest';\nimport {\n    deleteAllContexts,\n    deleteSelectedContexts,\n} from '../communication/deleteContexts';\nimport { NlpStatus, NlpResponse } from '../model/NlpAdapterResponse';\nimport { sendTextRequest } from './communication/sendTextRequest';\nimport { postContexts } from '../communication/postContexts';\n\n/**\n * Adapter for the [Snips NLU](https://snips-nlu.readthedocs.io/en/latest/) framework.\n *\n * Given a phrase such as\n  ```\n       What will the weather be like in paris at 9pm?\n  ```\n * Snips NLU will parse the query and answer with a result of the form:\n  ```\n  {\n  \"intent\": {\n     \"intentName\": \"searchWeatherForecast\",\n     \"probability\": 0.95\n  },\n  \"slots\": [\n     {\n         \"value\": \"paris\",\n         \"entity\": \"locality\",\n         \"slotName\": \"forecastLocality\"\n     },\n     {\n         \"value\": {\n         \"kind\": \"InstantTime\",\n         \"value\": \"2018-02-08 20:00:00 +00:00\"\n         },\n         \"entity\": \"snips/datetime\",\n         \"slotName\": \"forecastStartDatetime\"\n     }\n   ]\n  }\n  ```\n * If you want emubot to handle the messages which should be supplied to the user, you should add a `messages`\n * field into the parsed result. You can also add a `contexts` field if desired. The request to the Snips webhook\n * will also include an internalUserID which can be used to differentiate between users.\n *\n * For more information regarding the purpose of each function, take a look at the implemented interface.\n *\n * @implements {NlpAdapter}\n */\nexport class SnipsAdapter implements NlpAdapter {\n    // Lifespan not required. Snips does not support the same notion of contexts as other NLP services.\n    public lifespanInMinutes = 0;\n\n    public async deleteAllContexts(\n        internalUserId: string,\n        agentName: string,\n    ): Promise {\n        return deleteAllContexts(internalUserId, agentName);\n    }\n\n    public deleteSelectedContexts(\n        internalUserId: string,\n        agentName: string,\n        contextToDelete: string[],\n    ): Promise {\n        return deleteSelectedContexts(\n            internalUserId,\n            agentName,\n            contextToDelete,\n        );\n    }\n\n    public async postContexts(\n        internalUserId: string,\n        agentName: string,\n        contexts: string[],\n    ): Promise {\n        return postContexts(internalUserId, agentName, contexts);\n    }\n\n    public async sendSingleTextRequest(\n        this: SnipsAdapter,\n        textRequest: TextRequest,\n        agentName: string,\n    ): Promise {\n        return sendTextRequest(textRequest, agentName);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/framework/chat_adapter/ChatAdapterRequest.ts\n            \n            function\n            isAttachmentRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/ChatAdapterRequest.ts\n            \n            function\n            isTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/IChatAdapter.ts\n            \n            interface\n            ChatAdapter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/cli/CliAdapter.ts\n            \n            class\n            CliAdapter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/cli/communication/convertCliClientRequest.ts\n            \n            function\n            convertIntoChatAdapterRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/cli/communication/convertCliClientResponse.ts\n            \n            function\n            convertIntoCliClientResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/cli/communication/webhook.ts\n            \n            function\n            initWebhook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/FacebookAdapter.ts\n            \n            class\n            FacebookAdapter\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/FacebookAdapter.ts\n            \n            function\n            saveRawBody\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertRequest.ts\n            \n            function\n            convertFacebookRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertRequest.ts\n            \n            function\n            makeRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToButtons\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToFacebookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToImage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToQuickReply\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/convertResponse.ts\n            \n            function\n            convertToText\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            getAppSecretProof\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            sendMultipleResponses\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/sendResponses.ts\n            \n            function\n            sendResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            handleRequests\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            handleResponses\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            initWebhook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            isWebhookAuthenticated\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            validatePayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/communication/webhook.ts\n            \n            function\n            verifyAuthentication\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/facebook/facebookConfig.ts\n            \n            interface\n            FacebookChatConfig\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/SlackAdapter.ts\n            \n            class\n            SlackAdapter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/convertRequest.ts\n            \n            function\n            convertIntoChatAdapterRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/convertResponse.ts\n            \n            function\n            convertToSlackResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            handleMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            initWebhook\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            openChannel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/communication/webhook.ts\n            \n            function\n            sendTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/slack/slackConfig.ts\n            \n            interface\n            SlackConfig\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/utils.ts\n            \n            function\n            mapSerialized\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/chat_adapter/utils.ts\n            \n            function\n            textToResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/configFacebookDf2.ts\n            \n            variable\n            config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/configFacebookRasa.ts\n            \n            variable\n            config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/configSlackDf2.ts\n            \n            variable\n            config\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/configTypes.ts\n            \n            interface\n            ClassConstructor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/interceptorConfig.ts\n            \n            variable\n            interceptorConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformChatCli.ts\n            \n            variable\n            platformChatCli\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformChatFacebook.ts\n            \n            variable\n            platformChatFacebook\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformChatSlack.ts\n            \n            variable\n            platformChatSlack\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformNlpDialogflow.ts\n            \n            variable\n            platformNlpDialogflow\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformNlpDialogflowV2.ts\n            \n            variable\n            platformNlpDialogflowV2\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformNlpRasa.ts\n            \n            variable\n            platformNlpRasa\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/platformNlpSnips.ts\n            \n            variable\n            platformNlpSnips\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/configuration/serverConfig.ts\n            \n            variable\n            serverConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/constants/logMessages.ts\n            \n            function\n            setLogMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/constants/logMessages.ts\n            \n            variable\n            DEFAULT_LOG_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/constants/logMessages.ts\n            \n            variable\n            LOG_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/constants/messages.ts\n            \n            function\n            setMessages\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/constants/messages.ts\n            \n            variable\n            DEFAULT_MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/constants/messages.ts\n            \n            variable\n            MESSAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/core.ts\n            \n            function\n            deinitCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/core.ts\n            \n            function\n            initCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/core.ts\n            \n            variable\n            chat\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/defaultConfig.ts\n            \n            function\n            dummyHandleMessage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/getAdapter.ts\n            \n            variable\n            adapter\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/getConfig.ts\n            \n            function\n            getConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/getConfig.ts\n            \n            function\n            setConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/getConfig.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/getInterceptors.ts\n            \n            variable\n            chatToCore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/getInterceptors.ts\n            \n            variable\n            nlpToCore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/getInterceptors.ts\n            \n            variable\n            nlpToNlp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/handleReceivedMessage.ts\n            \n            function\n            handleMessageAfterThirdInterceptor\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/handleReceivedMessage.ts\n            \n            function\n            handleMessageDependingOnMessageType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/handleReceivedMessage.ts\n            \n            function\n            handleReceivedMessageInCore\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/handleReceivedMessage.ts\n            \n            function\n            handleTextRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/handleReceivedMessage.ts\n            \n            function\n            returnErrorAsChatAdapterResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            function\n            findBestNlpAnswerForTextRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            variable\n            agents\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            variable\n            doesResponsePassScoringThreshold\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/findBestNlpAnswerForTextRequest.ts\n            \n            variable\n            PRIMARY_AGENT_INDEX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/generateId.ts\n            \n            function\n            generateId\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/getOrderedAgents.ts\n            \n            function\n            getOrderedAgents\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/responseUtils.ts\n            \n            function\n            createNoResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/responseUtils.ts\n            \n            function\n            createResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/transformMessageType.ts\n            \n            function\n            buildButton\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/transformMessageType.ts\n            \n            function\n            buildQuickreply\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/transformMessageType.ts\n            \n            function\n            handleCustomPayload\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/transformMessageType.ts\n            \n            function\n            transformChatAdapterRequestResponseToNlpResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/transformMessageType.ts\n            \n            function\n            transformNlpResponseToChatAdapterResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/core/utils/transformMessageType.ts\n            \n            function\n            transformToChatAdapterResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/interceptors/Interceptor.ts\n            \n            interface\n            Interceptor\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/framework/interceptors/MirrorInterceptor.ts\n            \n            class\n            MirrorInterceptor\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/framework/logger.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/logger.ts\n            \n            variable\n            logLevel\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/INlpAdapter.ts\n            \n            interface\n            NlpAdapter\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/INlpAdapter.ts\n            \n            function\n            makeSuccess\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            deleteAllContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/communication/deleteContexts.ts\n            \n            function\n            deleteSelectedContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/communication/postContexts.ts\n            \n            function\n            createPostRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/communication/postContexts.ts\n            \n            function\n            postContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/convertStringArrayToNlpContexts.ts\n            \n            function\n            convertStringArrayToNlpContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/DialogflowAdapter.ts\n            \n            class\n            DialogflowAdapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            createRequestConfigurationSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            deleteAllContexts\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/deleteContexts.ts\n            \n            function\n            deleteSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/postContextsFromServer.ts\n            \n            function\n            createPostRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/postContextsFromServer.ts\n            \n            function\n            postContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/responseConverters.ts\n            \n            function\n            toNlpMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/responseConverters.ts\n            \n            function\n            toNlpStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflow/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/DialogflowV2Adapter.ts\n            \n            class\n            DialogflowV2Adapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/deleteContexts.ts\n            \n            function\n            deleteAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/deleteContexts.ts\n            \n            function\n            deleteSelectedContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/getContexts.ts\n            \n            function\n            getAllContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/postContextsFromServer.ts\n            \n            function\n            createPostRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/postContextsFromServer.ts\n            \n            function\n            postContexts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            getContext\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            toNlpMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            toNlpStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/sendTextRequest.ts\n            \n            function\n            createDialogflowRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/dialogflowV2/dialogflowConfig.ts\n            \n            interface\n            DialogflowConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/rasa/RasaAdapter.ts\n            \n            class\n            RasaAdapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/rasa/communication/responseConverters.ts\n            \n            function\n            convertToNlpParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/rasa/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/rasa/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/rasa/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfigurationTextMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/rasa/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/snips/SnipsAdapter.ts\n            \n            class\n            SnipsAdapter\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/snips/communication/responseConverters.ts\n            \n            function\n            convertToNlpParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/snips/communication/responseConverters.ts\n            \n            function\n            toNlpTextResponse\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/snips/communication/sendTextRequest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/framework/nlp_adapter/snips/communication/sendTextRequest.ts\n            \n            function\n            sendTextRequest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            function\n            prompt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            function\n            sendHello\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            function\n            sendMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            variable\n            colorizeSuccess\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            variable\n            stdin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            variable\n            stdout\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tools/cli.ts\n            \n            variable\n            url\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/_mocks/DummyNlpAdapter.ts\n            \n            class\n            DummyNlpAdapter\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                test/_mocks/DummyNlpAdapter.ts\n            \n            variable\n            nlpMessageMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/_mocks/DummyNlpAdapter.ts\n            \n            variable\n            platformDummyAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/FacebookAdapterTest.ts\n            \n            function\n            createRequestConfiguration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/FacebookAdapterTest.ts\n            \n            function\n            generateUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/FacebookAdapterTest.ts\n            \n            variable\n            messageMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/FacebookAdapterTest.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/FacebookAdapterTest.ts\n            \n            variable\n            users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/_mocks/_FacebookTestServer.ts\n            \n            function\n            createFacebookAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/_mocks/_FacebookTestServer.ts\n            \n            function\n            createFacebookServer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/_mocks/_FacebookTestServer.ts\n            \n            function\n            generateAppSecretProof\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/_mocks/_FacebookTestServer.ts\n            \n            variable\n            facebookMessageRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/facebook/_mocks/_FacebookTestServer.ts\n            \n            variable\n            SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/SlackAdapterTest.ts\n            \n            function\n            generateUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/SlackAdapterTest.ts\n            \n            function\n            sleep\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/SlackAdapterTest.ts\n            \n            variable\n            messageMap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/SlackAdapterTest.ts\n            \n            variable\n            server\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/SlackAdapterTest.ts\n            \n            variable\n            users\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/_mocks/_SlackTestServer.ts\n            \n            function\n            createSlackAdapter\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/_mocks/_SlackTestServer.ts\n            \n            function\n            createSlackServer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/_mocks/_SlackTestServer.ts\n            \n            variable\n            SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/_mocks/_SlackTestServer.ts\n            \n            variable\n            slackMessageRoute\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/chat_adapter/slack/_mocks/_SlackTestServer.ts\n            \n            variable\n            slackOpenChannelRoute\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @slack/events-api : 2.3.2\n        \n            argparse : 1.0.10\n        \n            body-parser : 1.19.0\n        \n            chalk : 3.0.0\n        \n            cors : 2.8.5\n        \n            crypto-js : 3.1.9-1\n        \n            dialogflow : 1.2.0\n        \n            express : 4.17.1\n        \n            lodash : 4.17.15\n        \n            remove-markdown : 0.3.0\n        \n            request : 2.88.0\n        \n            request-promise-native : 1.0.8\n        \n            typescript : 3.7.4\n        \n            winston : 3.2.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DialogflowMessageTypes   (src/.../DialogflowTextResponse.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/framework/nlp_adapter/dialogflow/model/DialogflowTextResponse.ts\n    \n        \n            \n                \n                    \n                        \n                        DialogflowMessageTypes\n                    \n                \n                        \n                            \n                                 text\n                            \n                        \n                        \n                            \n                                 cards\n                            \n                        \n                        \n                            \n                                 quickreplies\n                            \n                        \n                        \n                            \n                                 image\n                            \n                        \n                        \n                            \n                                 customPayload\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nemubot - eMundo Bot Framework\nThis framework aims to offer an easy way to develop and deploy chatbots, reducing the overhead in code by using standardized components, allowing a high degree of exchangeability. The easy setup also enables less experienced developers to build and deploy a chatbot. Different messaging platforms (like Facebook Messenger, Slack or your personal website) can be used interchangeably to communicate with a user, and requests can be classified and answered using different natural language processing (NLP) services like Dialogflow, Snips or Rasa, depending on your personal need. Changing a platform does not influence the logic in the background, meaning that you only have to change very few lines of code to change from one platform to another while maintaining the same functionality. Further, the separation of concerns makes it simple to include further functionality like automated speech recognition.\nSeparating the different components is especially useful to preserve and protect the privacy of both, the user and the host of a chatbot. You can also combine multiple agents (chatbots) in a single application to separate the functionality of a bot into multiple logically separated units which are combined to one coherent bot.\nThe mid-term goal is to further reduce the required programming knowledge to setup a bot, and improving the protection of the users' privacy by incorporating additional means of protection, like the pseudonymization of users, per default.\nThese means can also be included at the current state, but are not enabled by default.\nFor a minimal setup, without these protecting means, please consult this repository.\nThe minimal setup should only be used to get to test the basic functionality of the framework.\nWe highly recommend to adapt our more extensive example, which comes with a slightly more complex setup but enables you to e.g. use a database and pseudonymize users identifiers.\nOffering this framework hopefully enables many individuals and (also small) companies, reducing the time and budget that has to be spent to develop a chatbot, while maintaining a high degree of control.\nArchitecture\n\nSetup\nTest the framework\nThe easiest way to test the framework is by using your console instead of a chat application like Facebook or Slack, since these platforms \nrequire you to setup a server with a certificate to communicate over https.\nTo just test the basic setup, you can follow these steps:\n\nInstall the dependencies (npm required): open a terminal and type npm install.\nCompile the code (npm run tsc) and run your bot (npm run start). The framework will now await messages.\nOpen another terminal and start the CLI client: npm run start-cli. Just type a message and hit enter to check if everything works out.\n\nYou will receive a message telling you that you did not set up a NLP service yet. If you want to connect your CLI to an existing NLP service:\n\nCreate an agent using a supported NLP service of your choice, get the required credentials and paste them into the configuration file (more information on these can be found at the distinctive section in our docs (see below).\nChoose the configuration in your src/main.ts. Make sure to use the correct configuration file with the correct adapters (the CLI adapter and the adapter for the NLP service you just chose to use).\n\nSetup On Existing Messaging Services\nIf you want to deploy your bot to a messaging service such as Slack, you have to get the respective credentials (see docs) required to authenticate. Furthermore, you usually have to setup a server and communicate over https.\nA detailed setup will follow soon.\nFeature List\nChatadapter\n\n\n\nFeature\nFacebook\nSlack\nCLI Client\n\n\n\n\nAuthentication\ndone\ndone\ndone\n\n\nVerify payload\ndone\ndone\nnot done, not planned\n\n\nText requests\ndone\ndone\ndone\n\n\nImage requests\ndone\nnot done\nnot done, not planned\n\n\ninitial requests\ndone\ndone\ndone\n\n\nisFromAdmin\ndone\nnot done\nnot done, not planned\n\n\nundefined\ndone\ndone\ndone\n\n\nText responses\ndone\ndone\ndone\n\n\nURL button responses\ndone\nnot done\nnot done, not planned\n\n\nImage responses\ndone\nnot done\nnot done, not planned\n\n\nImage with title responses\ndone\nnot done\nnot done, not planned\n\n\nQuickreply\ndone\ndone\nnot done\n\n\nUndefined\ndone\ndone\nnot done, not planned\n\n\n\nNLP adapter\n\n\n\nFeature\nDialogflowV2\nSnips\nRasa\n\n\n\n\nsendTextRequest\ndone\ndone\ndone\n\n\ndeleteSelectedContexts\ndone\ndone*\ndone*\n\n\ndeleteAllContexts\ndone\ndone*\ndone*\n\n\npostContexts\ndone\ndone*\ndone*\n\n\n\n* Snips and Rasa have no context system in the same fashion as Dialogflow. As such the methods are implemented to be used when an additional context system is added to those systems.\nDocumentation\nPlease consult the docs for further information regarding the setup, supported platforms, configuration files or details regarding the architecture.\nContribute To The Documentation\nOur API reference is built using compodoc, while we use sphinx for the description of the framework itself. You can follow the next steps if you would like to compile and change parts of the documentation (commands are valid for Ubuntu and might change across operating systems):\n\nInstall pip (e.g. apt-get install python3-pip).\nOptional, but recommended: install virtualenv pip install virtualenv, create a virtual environment (virtualenv sphinxenv) and start the environment using source sphinxenv/bin/activate.\npip install -r requirements.txt (add the --user flag if you are not in a virtualenv).\nMake sure to install npm and run npm run createDocs.\n\nA primer for restructured text (which is the markup language used by Sphinx) can be found here.\nLogging\nLogging is controlled in ./src/logger.ts using winston. Logs are written to stdout as well as two files: One file for errors only and one file with additional information, determined by your loglevel, which also determines the logs for stdout.\nThe default log level is set to \"verbose\" (more information can be found here). Please set the respective environment variable if you wish to change the loglevel (e.g.export LOGLEVEL=\"error\").\nContributing\nYou would like to contribute? Awesome! Please check out our Contribution Guidelines.\nLicense\nThis project is licensed under the Apache 2.0 License - see the LICENSE.md file for details.\nAuthors\n\nFiete Lüer\nMaxim Dolgich\nBastian Gorholt\nRaphael Arias\nTabea Spahn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\nDefinitions.\n\"License\" shall mean the terms and conditions for use, reproduction,\nand distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by\nthe copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all\nother entities that control, are controlled by, or are under common\ncontrol with that entity. For the purposes of this definition,\n\"control\" means (i) the power, direct or indirect, to cause the\ndirection or management of such entity, whether by contract or\notherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\nexercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications,\nincluding but not limited to software source code, documentation\nsource, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical\ntransformation or translation of a Source form, including but\nnot limited to compiled object code, generated documentation,\nand conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or\nObject form, made available under the License, as indicated by a\ncopyright notice that is included in or attached to the work\n(an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object\nform, that is based on (or derived from) the Work and for which the\neditorial revisions, annotations, elaborations, or other modifications\nrepresent, as a whole, an original work of authorship. For the purposes\nof this License, Derivative Works shall not include works that remain\nseparable from, or merely link (or bind by name) to the interfaces of,\nthe Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including\nthe original version of the Work and any modifications or additions\nto that Work or Derivative Works thereof, that is intentionally\nsubmitted to Licensor for inclusion in the Work by the copyright owner\nor by an individual or Legal Entity authorized to submit on behalf of\nthe copyright owner. For the purposes of this definition, \"submitted\"\nmeans any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems,\nand issue tracking systems that are managed by, or on behalf of, the\nLicensor for the purpose of discussing and improving the Work, but\nexcluding communication that is conspicuously marked or otherwise\ndesignated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\non behalf of whom a Contribution has been received by Licensor and\nsubsequently incorporated within the Work.\n\nGrant of Copyright License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\ncopyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the\nWork and such Derivative Works in Source or Object form.\n\nGrant of Patent License. Subject to the terms and conditions of\nthis License, each Contributor hereby grants to You a perpetual,\nworldwide, non-exclusive, no-charge, royalty-free, irrevocable\n(except as stated in this section) patent license to make, have made,\nuse, offer to sell, sell, import, and otherwise transfer the Work,\nwhere such license applies only to those patent claims licensable\nby such Contributor that are necessarily infringed by their\nContribution(s) alone or by combination of their Contribution(s)\nwith the Work to which such Contribution(s) was submitted. If You\ninstitute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work\nor a Contribution incorporated within the Work constitutes direct\nor contributory patent infringement, then any patent licenses\ngranted to You under this License for that Work shall terminate\nas of the date such litigation is filed.\n\nRedistribution. You may reproduce and distribute copies of the\nWork or Derivative Works thereof in any medium, with or without\nmodifications, and in Source or Object form, provided that You\nmeet the following conditions:\n(a) You must give any other recipients of the Work or\nDerivative Works a copy of this License; and(b) You must cause any modified files to carry prominent notices\nstating that You changed the files; and(c) You must retain, in the Source form of any Derivative Works\nthat You distribute, all copyright, patent, trademark, and\nattribution notices from the Source form of the Work,\nexcluding those notices that do not pertain to any part of\nthe Derivative Works; and(d) If the Work includes a \"NOTICE\" text file as part of its\ndistribution, then any Derivative Works that You distribute must\ninclude a readable copy of the attribution notices contained\nwithin such NOTICE file, excluding those notices that do not\npertain to any part of the Derivative Works, in at least one\nof the following places: within a NOTICE text file distributed\nas part of the Derivative Works; within the Source form or\ndocumentation, if provided along with the Derivative Works; or,\nwithin a display generated by the Derivative Works, if and\nwherever such third-party notices normally appear. The contents\nof the NOTICE file are for informational purposes only and\ndo not modify the License. You may add Your own attribution\nnotices within Derivative Works that You distribute, alongside\nor as an addendum to the NOTICE text from the Work, provided\nthat such additional attribution notices cannot be construed\nas modifying the License.You may add Your own copyright statement to Your modifications and\nmay provide additional or different license terms and conditions\nfor use, reproduction, or distribution of Your modifications, or\nfor any such Derivative Works as a whole, provided Your use,\nreproduction, and distribution of the Work otherwise complies with\nthe conditions stated in this License.\n\nSubmission of Contributions. Unless You explicitly state otherwise,\nany Contribution intentionally submitted for inclusion in the Work\nby You to the Licensor shall be under the terms and conditions of\nthis License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify\nthe terms of any separate license agreement you may have executed\nwith Licensor regarding such Contributions.\n\nTrademarks. This License does not grant permission to use the trade\nnames, trademarks, service marks, or product names of the Licensor,\nexcept as required for reasonable and customary use in describing the\norigin of the Work and reproducing the content of the NOTICE file.\n\nDisclaimer of Warranty. Unless required by applicable law or\nagreed to in writing, Licensor provides the Work (and each\nContributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\nimplied, including, without limitation, any warranties or conditions\nof TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\nPARTICULAR PURPOSE. You are solely responsible for determining the\nappropriateness of using or redistributing the Work and assume any\nrisks associated with Your exercise of permissions under this License.\n\nLimitation of Liability. In no event and under no legal theory,\nwhether in tort (including negligence), contract, or otherwise,\nunless required by applicable law (such as deliberate and grossly\nnegligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special,\nincidental, or consequential damages of any character arising as a\nresult of this License or out of the use or inability to use the\nWork (including but not limited to damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, or any and all\nother commercial damages or losses), even if such Contributor\nhas been advised of the possibility of such damages.\n\nAccepting Warranty or Additional Liability. While redistributing\nthe Work or Derivative Works thereof, You may choose to offer,\nand charge a fee for, acceptance of support, warranty, indemnity,\nor other liability obligations and/or rights consistent with this\nLicense. However, in accepting such obligations, You may act only\non Your own behalf and on Your sole responsibility, not on behalf\nof any other Contributor, and only if You agree to indemnify,\ndefend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason\nof your accepting any such warranty or additional liability.\nEND OF TERMS AND CONDITIONS\nAPPENDIX: How to apply the Apache License to your work.\nTo apply the Apache License to your work, attach the following\nboilerplate notice, with the fields enclosed by brackets \"{}\"\nreplaced with your own identifying information. (Don't include\nthe brackets!)  The text should be enclosed in the appropriate\ncomment syntax for the file format. We also recommend that a\nfile or class name and description of purpose be included on the\nsame \"printed page\" as the copyright notice for easier\nidentification within third-party archives.\nCopyright 2020 eMundo GmbH\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            adapter   (src/.../getAdapter.ts)\n                        \n                        \n                            agents   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            chat   (src/.../core.ts)\n                        \n                        \n                            chatToCore   (src/.../getInterceptors.ts)\n                        \n                        \n                            colorizeSuccess   (src/.../cli.ts)\n                        \n                        \n                            config   (src/.../configSlackDf2.ts)\n                        \n                        \n                            config   (src/.../configFacebookRasa.ts)\n                        \n                        \n                            config   (src/.../configFacebookDf2.ts)\n                        \n                        \n                            config   (src/.../getConfig.ts)\n                        \n                        \n                            DEFAULT_LOG_MESSAGES   (src/.../logMessages.ts)\n                        \n                        \n                            DEFAULT_MESSAGES   (src/.../messages.ts)\n                        \n                        \n                            doesResponsePassScoringThreshold   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            facebookMessageRoute   (test/.../_FacebookTestServer.ts)\n                        \n                        \n                            interceptorConfig   (src/.../interceptorConfig.ts)\n                        \n                        \n                            LOG_MESSAGES   (src/.../logMessages.ts)\n                        \n                        \n                            logger   (src/.../cli.ts)\n                        \n                        \n                            logger   (src/.../logger.ts)\n                        \n                        \n                            logLevel   (src/.../logger.ts)\n                        \n                        \n                            messageMap   (test/.../SlackAdapterTest.ts)\n                        \n                        \n                            messageMap   (test/.../FacebookAdapterTest.ts)\n                        \n                        \n                            MESSAGES   (src/.../messages.ts)\n                        \n                        \n                            nlpMessageMap   (test/.../DummyNlpAdapter.ts)\n                        \n                        \n                            nlpToCore   (src/.../getInterceptors.ts)\n                        \n                        \n                            nlpToNlp   (src/.../getInterceptors.ts)\n                        \n                        \n                            platformChatCli   (src/.../platformChatCli.ts)\n                        \n                        \n                            platformChatFacebook   (src/.../platformChatFacebook.ts)\n                        \n                        \n                            platformChatSlack   (src/.../platformChatSlack.ts)\n                        \n                        \n                            platformDummyAdapter   (test/.../DummyNlpAdapter.ts)\n                        \n                        \n                            platformNlpDialogflow   (src/.../platformNlpDialogflow.ts)\n                        \n                        \n                            platformNlpDialogflowV2   (src/.../platformNlpDialogflowV2.ts)\n                        \n                        \n                            platformNlpRasa   (src/.../platformNlpRasa.ts)\n                        \n                        \n                            platformNlpSnips   (src/.../platformNlpSnips.ts)\n                        \n                        \n                            PRIMARY_AGENT_INDEX   (src/.../findBestNlpAnswerForTextRequest.ts)\n                        \n                        \n                            SECRET   (test/.../_FacebookTestServer.ts)\n                        \n                        \n                            SECRET   (test/.../_SlackTestServer.ts)\n                        \n                        \n                            server   (test/.../FacebookAdapterTest.ts)\n                        \n                        \n                            server   (test/.../SlackAdapterTest.ts)\n                        \n                        \n                            serverConfig   (src/.../serverConfig.ts)\n                        \n                        \n                            slackMessageRoute   (test/.../_SlackTestServer.ts)\n                        \n                        \n                            slackOpenChannelRoute   (test/.../_SlackTestServer.ts)\n                        \n                        \n                            stdin   (src/.../cli.ts)\n                        \n                        \n                            stdout   (src/.../cli.ts)\n                        \n                        \n                            url   (src/.../cli.ts)\n                        \n                        \n                            users   (test/.../FacebookAdapterTest.ts)\n                        \n                        \n                            users   (test/.../SlackAdapterTest.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/framework/core/getAdapter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            adapter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Adapter\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    get nlp(): NlpAdapter {\n        return new (getConfig().platform.nlp.constructor)();\n    },\n    get chat(): ChatAdapter {\n        return new (getConfig().platform.chat.constructor)();\n    },\n}\n                        \n                    \n\n                \n                    \n                        Convenience object to provide access to the NlpAdapter and ChatAdapter.\n\n                    \n                \n\n            \n        \n\n    src/framework/core/utils/findBestNlpAnswerForTextRequest.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            agents\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : getOrderedAgents()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            doesResponsePassScoringThreshold\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n    botResponse: NlpResponse,\n    agentIndex: number,\n): boolean => {\n    const minimalAcceptableScore = agents[agentIndex].minScore;\n    const textRequestResult = botResponse.textRequestResult;\n    const score = textRequestResult.score;\n\n    return score >= minimalAcceptableScore;\n}\n                        \n                    \n\n                \n                    \n                        Checks if the message passes the agent specific minimal threshold, i.e. the confidence of the NLP service exceeds\nsome predefined and individually set threshold.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PRIMARY_AGENT_INDEX\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n\n\n            \n        \n\n    src/framework/core/core.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            chat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChatAdapter\n\n                        \n                    \n\n                \n                    \n                        Entry point into the framework, starts the server and the message handling.\nIMPORTANT: Make sure that you have already set the config (see ../main.ts)\nMore information can be found at here.\n\n                    \n                \n\n            \n        \n\n    src/framework/core/getInterceptors.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            chatToCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Promise>\n\n                        \n                    \n                    \n                        \n                            Default value : getConfig().interceptors.chatToCore()\n                        \n                    \n\n                \n                    \n                        More information regarding the usage of the interceptors can be found at\nInterceptor\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nlpToCore\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise>\n\n                        \n                    \n                    \n                        \n                            Default value : getConfig().interceptors.nlpToCore()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nlpToNlp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Promise>\n\n                        \n                    \n                    \n                        \n                            Default value : getConfig().interceptors.nlpToNlp()\n                        \n                    \n\n\n            \n        \n\n    src/tools/cli.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            colorizeSuccess\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : chalk.bold.green\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stdin\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.stdin\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            stdout\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : console.log\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n\n\n            \n        \n\n    src/framework/configuration/configSlackDf2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    interceptors: interceptorConfig,\n    platform: {\n        chat: platformChatSlack,\n        nlp: platformNlpDialogflowV2,\n    },\n    server: serverConfig,\n}\n                        \n                    \n\n                \n                    \n                        An exemplar configuration using Slack and DialogflowV2.\nYou can exchange elements (e.g. use Facebook instead of Slack) by using a different respective (messenger) configuration.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/configFacebookRasa.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    interceptors: interceptorConfig,\n    platform: {\n        chat: platformChatFacebook,\n        nlp: platformNlpRasa,\n    },\n    server: serverConfig,\n}\n                        \n                    \n\n                \n                    \n                        An exemplar configuration using Facebook and Rasa.\nYou can exchange elements (e.g. use Slack instead of Facebook) by using a different respective (messenger) configuration.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/configFacebookDf2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    interceptors: interceptorConfig,\n    platform: {\n        chat: platformChatFacebook,\n        nlp: platformNlpDialogflowV2,\n    },\n    server: serverConfig,\n}\n                        \n                    \n\n                \n                    \n                        An exemplar configuration using Facebook and DialogflowV2.\nYou can exchange elements (e.g. use Slack instead of Facebook) by using a different respective (messenger) configuration.\n\n                    \n                \n\n            \n        \n\n    src/framework/core/getConfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            config\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Config\n\n                        \n                    \n\n\n            \n        \n\n    src/framework/constants/logMessages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_LOG_MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    chat: {\n        convertToUrlButton: 'Only URL buttons are implemented as of yet.',\n        cli: 'CLI client',\n        facebook: 'Facebook',\n        slack: 'Slack',\n        incomingGetRequest: 'Received incoming GET request',\n        incomingPostRequest: 'Received incoming POST request.',\n        initWebhook: 'Init webhook for ',\n        missingAppSecret: 'Missing app_secret in config file.',\n        missingPageAccessToken: 'Missing page_access_token in config file.',\n        missingVerifyToken: 'Missing verify_token in config file.',\n        noPageSubscriptionEvent:\n            '404 Not Found - Event is not from a page subscription.',\n        noUrlProvided: 'No URL provided.',\n        noWebsocketError: 'No websocket with the messengerUserID ',\n        pageSubscriptionEvent: 'Page subscription event.',\n        payloadNotVerified: 'The SHA1 signature could not be verified.',\n        responseTypeNotImplemented:\n            'CustomChatAdapter: Not implemented response type: ',\n        sendingMessageToUser: 'Sending message to user ',\n        unableToSendResponse: 'Message could not be sent to user.',\n        defaultConfiguration:\n            'No configuration was set. Starting in default configuration.',\n        webhookListening: 'Webhook is listening on port ',\n        webhookNotVerfied:\n            'Unable to verify webhook. Unauthorized access: Verify tokens not present',\n        webhookVerified: 'Webhook is verified.',\n        websocketError: 'Message could not be sent to user (contactClient).',\n        unknownClient: 'Tried to contact unknown client: ',\n    },\n    connections: {\n        component: {\n            database: 'database',\n            websocket: 'WebSocket',\n        },\n        userConnectedTo: 'User connected to ',\n    },\n    core: {\n        handleReceivedMessage:\n            'Core: Error whilst handling received message in core (handleReceivedMessageInCore) => ',\n        handleTextRequest: 'Core: handleTextRequest => ',\n        isFallbackIntent: 'Is fallback intent.',\n        noResponseNotPossible: 'No Response should not occur in this adapter.',\n        scoreBelowThreshold: 'Score below threshold.',\n        sendToNextAgent: 'Send request to next agent...',\n        transformToChatAdapterResponseError:\n            'An error occured during the transformation of the NlpMessage to ChatAdapterResponse.',\n        unsupportedButtonError: 'This button is not supported.',\n        unsupportedCustomPayloadError: 'This payload is not supported.',\n        couldNotStopCore: 'The core could not be stopped gracefully: ',\n    },\n    database: {\n        connectionUndefined:\n            'Connection to database failed. Connection undefined.',\n        failedToConnect: 'Failed to connect to database: ',\n        userNotFoundOrCreatable:\n            'User not found and provided information is insufficient to create.',\n    },\n    initializeLogging: 'Initialized logger on level: ',\n    nlp: {\n        adapter: {\n            dialogflowAdapter: 'DialogflowAdapter: ',\n            dialogflowV2Adapter: 'DialogflowV2Adapter: ',\n            rasaAdapter: 'RasaAdapter: ',\n        },\n        contextCreated:\n            'Context created. API v2 typings are weird, log response and change framework',\n        deleteAllContexts: 'Error whilst deleting all contexts: ',\n        deleteSelectedContexts: 'Error whilst deleting selected contexts: ',\n        moreThanOneResponse:\n            'Error: A miracle! More than one response returned. Examine me: ',\n        sendTextRequest: 'Error occured in sendTextRequest: ',\n        setContexts: 'Added the following contexts: ',\n        toNlpMessage: 'Unknown message type.',\n        unableToAddContexts:\n            'unable to set at least one of the following contexts: ',\n    },\n    request: {\n        text_request: 'Sending a message to agent. Message content: ',\n    },\n    response: {\n        action: 'Action: ',\n        after_action: 'After action: ',\n        agent: 'Agent: ',\n        data: 'Response data: ',\n        score: 'Score is: ',\n    },\n    textHandlingInit: 'Inside text handling...',\n    unsupportedMessageType: 'Unsupported type',\n    warnings: {\n        hash_mismatch:\n            'The provided message does not match the provided hash: ',\n        no_agents: 'No agents were provided for request: ',\n    },\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            LOG_MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : DEFAULT_LOG_MESSAGES\n                        \n                    \n\n\n            \n        \n\n    src/framework/constants/messages.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    error: {\n        general: '',\n        handlingBetweenCoreAndChatAdapter:\n            'That did not quite work. Something went wrong during processing your answer. Please try again!',\n        messageHandlingInCore:\n            'A problem occured during the processing of your request. Please try again!',\n        unsupportedAttachment:\n            'I currently do not support this kind of attachment.',\n        unsupportedFormat:\n            'I was unable to process your message: Unsupported message type. I can currently only process \\\n            text messages, audio messages and the following attachments: images (.png or .jpg).',\n    },\n    noAgent:\n        'I currently do not use an agent that allows me to understand natural language.',\n    noConfigurationFileProvided:\n        'Welcome to emubot! If you want to test the core functionality you will need to provide a valid configuration file!',\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MESSAGES\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : DEFAULT_MESSAGES\n                        \n                    \n\n\n            \n        \n\n    test/chat_adapter/facebook/_mocks/_FacebookTestServer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            facebookMessageRoute\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/me/messages'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            SECRET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : generateId()\n                        \n                    \n\n\n            \n        \n\n    src/framework/configuration/interceptorConfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         InterceptorConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    chatToCore: MirrorInterceptor.getInstance,\n    nlpToCore: MirrorInterceptor.getInstance,\n    nlpToNlp: MirrorInterceptor.getInstance,\n}\n                        \n                    \n\n                \n                    \n                        Simple interceptor configuration. Interceptors are interceptors across the framework to manipulate messages or\nperform further actions. These exemplar interceptors are only used to mirror an incoming message without further\nmodifications. You can write arbitrarily complex interceptors, for more information see\nhere.\n\n                    \n                \n\n            \n        \n\n    src/framework/logger.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : winston.createLogger({\n    format: winston.format.json(),\n    level: logLevel,\n    transports: [\n        new winston.transports.File({ filename: 'error.log', level: 'error' }),\n        new winston.transports.File({ filename: 'userDefinedLogging.log' }),\n    ],\n})\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.loggingLevel || 'verbose'\n                        \n                    \n\n                \n                    \n                        We initialize and export an instance of a winston logger, using the default npm logging levels\n(see https://www.npmjs.com/package/winston#logging-levels)\nAll logs with a severity equal or above error are stored in error.log\nAll logs with a severity equal or above the logLevel set by yourself (default: verbose)\nare stored in userDefinedLogging.log\n\n                    \n                \n\n            \n        \n\n    test/chat_adapter/slack/SlackAdapterTest.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            messageMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Set\n\n                        \n                    \n                    \n                        \n                            Default value : new Set()\n                        \n                    \n\n\n            \n        \n\n    test/chat_adapter/facebook/FacebookAdapterTest.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            messageMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Map\n\n                        \n                    \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Set\n\n                        \n                    \n                    \n                        \n                            Default value : new Set()\n                        \n                    \n\n\n            \n        \n\n    test/_mocks/DummyNlpAdapter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            nlpMessageMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Map()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            platformDummyAdapter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NlpConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        first: {\n            executionIndex: 0,\n            minScore: 0.8,\n            token: '',\n            url: '',\n            languageCode: '',\n        },\n        second: {\n            executionIndex: 0,\n            minScore: 0.8,\n            token: '',\n            url: '',\n            languageCode: '',\n        },\n    },\n    constructor: DummyNlpAdapter,\n    name: 'dummyNlpAdapter',\n}\n                        \n                    \n\n\n            \n        \n\n    src/framework/configuration/platformChatCli.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformChatCli\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChatConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    appSecret: '',\n    constructor: CliAdapter,\n    name: 'cli',\n    url: '',\n    webhook_path: '/webhook',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the CLI adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the CLI section of our documentation.\nThis configuration is used in case no chat configuration was provided and can be used in order to test the framework\nvia the CLI client.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/platformChatFacebook.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformChatFacebook\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FacebookChatConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    appSecret: 'YOUR_APP_SECRET',\n    constructor: FacebookAdapter,\n    name: 'facebook',\n    pageAccessToken: 'YOUR_PAGE_ACCESS_TOKEN',\n    url: 'https://graph.facebook.com/',\n    verifyToken: 'YOUR_VERIFY_TOKEN',\n    version: 'v3.3',\n    webhook_path: '/webhook',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Facebook adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Facebook section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/platformChatSlack.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformChatSlack\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         SlackConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    appSecret: 'YOUR_SLACK_SECRET',\n    token: 'YOUR_SLACK_OAUTH_TOKEN',\n    constructor: SlackAdapter,\n    name: 'slack',\n    url: 'https://slack.com/api/',\n    webhook_path: '/webhook',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Slack adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Slack section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/platformNlpDialogflow.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpDialogflow\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DialogflowConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        first_agent: {\n            defaultLifespan: 2,\n            executionIndex: 0,\n            project_id: '', //Not required for V1, can be left empty.\n            languageCode: 'en',\n            minScore: 0.75,\n            token: 'YOUR_DIALOGFLOW_TOKEN_FROM_AGENT_1',\n            url: 'https://api.dialogflow.com/v1/query?v=20150910',\n        },\n        second_agent: {\n            defaultLifespan: 2,\n            executionIndex: 1,\n            project_id: '', //Not required for V1, can be left empty.\n            languageCode: 'en',\n            minScore: 0.5,\n            token: 'YOUR_DIALOGFLOW_TOKEN_FROM_AGENT_2',\n            url: 'https://api.dialogflow.com/v1/query?v=20150910',\n        },\n    },\n    constructor: DialogflowAdapter,\n    name: 'dialogflow',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Dialogflow adapter (using version 1 of the Dialogflow API). If you are unsure which\ninformation is required and how to retrieve it, take a look at the\nDialogflow section of our documentation.\nIMPORTANT: Version 1 is deprecated and the documentation might be incomplete. Please consider switching to version 2.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/platformNlpDialogflowV2.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpDialogflowV2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         DialogflowConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        my_first_agent: {\n            defaultLifespan: 2,\n            executionIndex: 0,\n            languageCode: 'en-US',\n            minScore: 0.8,\n            project_id: 'GCP-ID-Project1',\n            token: 'path/to/your/dialogflowApiToken1.json',\n            url: '', // You do not need an endpoint url. This is provided by the Dialogflow dependency itself.\n        },\n        my_second_agent: {\n            defaultLifespan: 2,\n            executionIndex: 1,\n            languageCode: 'en-US',\n            minScore: 0.75,\n            project_id: 'GCP-ID-Project2',\n            token: 'path/to/your/dialogflowApiToken2.json',\n            url: '', // You do not need an endpoint url. This is provided by the Dialogflow dependency itself.\n        },\n    },\n    constructor: DialogflowV2Adapter,\n    name: 'dialogflowV2',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Dialogflow adapter (using version 2 of the Dialogflow API). If you are unsure which\ninformation is required and how to retrieve it, take a look at the\nDialogflow section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/platformNlpRasa.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpRasa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NlpConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        rasa_test: {\n            executionIndex: 0,\n            languageCode: 'en',\n            minScore: 0.5,\n            token: 'your_secret_token',\n            url: 'http://localhost:5005',\n        },\n    },\n    constructor: RasaAdapter,\n    name: 'rasa',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Rasa adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Rasa section of our documentation.\n\n                    \n                \n\n            \n        \n\n    src/framework/configuration/platformNlpSnips.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            platformNlpSnips\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NlpConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    agents: {\n        snips_test: {\n            executionIndex: 0,\n            languageCode: 'en',\n            minScore: 0.8,\n            token: 'your_secret token',\n            url: 'https://www.url-to-your-server.com',\n        },\n    },\n    constructor: SnipsAdapter,\n    name: 'snips',\n}\n                        \n                    \n\n                \n                    \n                        Exemplar configuration of the Snips adapter. If you are unsure which information is required and how to retrieve it,\ntake a look at the Snips section of our documentation.\n\n                    \n                \n\n            \n        \n\n    test/chat_adapter/slack/_mocks/_SlackTestServer.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SECRET\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : generateId()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            slackMessageRoute\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/chat.postMessage'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            slackOpenChannelRoute\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '/im.open'\n                        \n                    \n\n\n            \n        \n\n    src/framework/configuration/serverConfig.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            serverConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ServerConfig\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    // The port your application runs on. If your application runs inside of a proxy,\n    // do not enter the port the messaging platform uses to communicate with, but the internally mapped port.\n    port: 4000,\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
